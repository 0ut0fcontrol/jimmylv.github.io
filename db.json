{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/apollo/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/apollo/source/css/apollo.css","path":"css/apollo.css","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff","path":"font/sourcesanspro.woff","modified":0,"renderable":1},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","path":"font/sourcesanspro.woff2","modified":0,"renderable":1},{"_id":"themes/apollo/source/scss/apollo.scss","path":"scss/apollo.scss","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/avatar.png","path":"css/images/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","path":"libs/justified-gallery/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","path":"libs/justified-gallery/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","path":"libs/source-code-pro/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/styles.css","path":"libs/open-sans/styles.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","path":"libs/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","path":"libs/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","path":"libs/lightgallery/css/lg-fb-comment-box.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","path":"libs/lightgallery/css/lg-fb-comment-box.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","path":"libs/lightgallery/css/lg-fb-comment-box.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","path":"libs/lightgallery/css/lg-transitions.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","path":"libs/lightgallery/css/lg-transitions.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","path":"libs/lightgallery/css/lg-transitions.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","path":"libs/lightgallery/css/lightgallery.css.map","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","path":"libs/lightgallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","path":"libs/lightgallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","path":"libs/lightgallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","path":"libs/lightgallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","path":"libs/lightgallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","path":"libs/lightgallery/css/lightgallery.css","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","path":"libs/lightgallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","path":"libs/lightgallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","path":"libs/lightgallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","path":"libs/lightgallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","path":"libs/lightgallery/js/lg-autoplay.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","path":"libs/lightgallery/js/lg-autoplay.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","path":"libs/lightgallery/js/lg-fullscreen.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","path":"libs/lightgallery/js/lg-hash.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","path":"libs/lightgallery/js/lg-hash.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","path":"libs/lightgallery/js/lg-pager.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","path":"libs/lightgallery/js/lg-pager.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","path":"libs/lightgallery/js/lg-fullscreen.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","path":"libs/lightgallery/js/lg-share.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","path":"libs/lightgallery/js/lg-share.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","path":"libs/lightgallery/js/lg-thumbnail.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","path":"libs/lightgallery/js/lg-thumbnail.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","path":"libs/lightgallery/js/lg-video.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","path":"libs/lightgallery/js/lg-video.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","path":"libs/lightgallery/js/lg-zoom.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","path":"libs/lightgallery/js/lightgallery.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","path":"libs/lightgallery/js/lg-zoom.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","path":"libs/lightgallery/js/lightgallery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","path":"libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","path":"libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","path":"libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","path":"libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","path":"libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","path":"libs/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","path":"libs/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","path":"libs/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","path":"libs/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","path":"libs/jquery/2.1.3/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","path":"libs/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","path":"libs/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1479579292000},{"_id":"themes/apollo/.gitignore","hash":"a006beea0877a0aa3610ee00e73f62cb1d45125b","modified":1479580623000},{"_id":"themes/apollo/LICENSE","hash":"6e31ac9076bfc8f09ae47977419eee4edfb63e5b","modified":1479580623000},{"_id":"themes/apollo/README.md","hash":"fb6fbe42172a35cbdaa540a777cc4bc02add2278","modified":1479580623000},{"_id":"themes/apollo/_config.yml","hash":"0a457e5b5bf045d50b7dd793b49be7376f1a7f13","modified":1479580623000},{"_id":"themes/apollo/gulpfile.js","hash":"857a026b6643a2cd52c65d4ae0dc7fe9618206ee","modified":1479580623000},{"_id":"themes/apollo/package.json","hash":"4d13f5f859db7d008f49251543a8f610b2ecabd5","modified":1479580623000},{"_id":"themes/apollo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479580623000},{"_id":"themes/apollo/.git/config","hash":"e8486e77527181934f2dda23e50b879ab7641244","modified":1479580623000},{"_id":"themes/apollo/.git/packed-refs","hash":"2ab66d2cb8ce41e703f19a82c8a86fe917b9f9e9","modified":1479580623000},{"_id":"themes/apollo/doc/doc-en.md","hash":"d6d9756b2085cdd8ee51eb5594427e2abf170e94","modified":1479580623000},{"_id":"themes/apollo/doc/doc-zh.md","hash":"d43c1f6bff66426744a2c6f031d19ff09cdeb2d1","modified":1479580623000},{"_id":"themes/apollo/languages/en.yml","hash":"40292f2a48e4e6361132033a47c516cb33127b6c","modified":1479580623000},{"_id":"themes/apollo/languages/zh-cn.yml","hash":"9e4b03e14c094000257ea254fd660dde4c7af63c","modified":1479580623000},{"_id":"themes/apollo/layout/archive.jade","hash":"62797414355bf4474092bc3a32726c8340820ffb","modified":1479580623000},{"_id":"themes/apollo/layout/index.jade","hash":"55f2f1b4b5364a0e09cb18e1112664c6415fb881","modified":1479580623000},{"_id":"themes/apollo/layout/post.jade","hash":"245c26244c075c3632d1545c3b228ee9d112f15d","modified":1479580623000},{"_id":"themes/apollo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479580616000},{"_id":"themes/apollo/source/favicon.png","hash":"a9cdcb22d1e74d5480323e19d1983de5a6873b8c","modified":1479580623000},{"_id":"themes/apollo/.git/index","hash":"76b33d0a90e31d51da61270e8388316fe8db177b","modified":1479580623000},{"_id":"themes/apollo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1479580616000},{"_id":"themes/apollo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479580616000},{"_id":"themes/apollo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479580616000},{"_id":"themes/apollo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1479580616000},{"_id":"themes/apollo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479580616000},{"_id":"themes/apollo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1479580616000},{"_id":"themes/apollo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479580616000},{"_id":"themes/apollo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479580616000},{"_id":"themes/apollo/layout/mixins/paginator.jade","hash":"f4ee2fb61a32e199b48cf93771749edc8a007391","modified":1479580623000},{"_id":"themes/apollo/layout/mixins/post.jade","hash":"cd9447e9b0ad22213e6a17d9a9b948f9f998f921","modified":1479580623000},{"_id":"themes/apollo/layout/partial/copyright.jade","hash":"217f8b17054e5079f2d30bb7e2e4e36c0f2161b7","modified":1479580623000},{"_id":"themes/apollo/layout/partial/comment.jade","hash":"ff0a2c269c2434da2ac5529872f1d6184a71f96d","modified":1479580623000},{"_id":"themes/apollo/layout/partial/head.jade","hash":"d062dafabfe65198e5cf2ddb0e47d909885aa950","modified":1479580623000},{"_id":"themes/apollo/layout/partial/nav.jade","hash":"dfdd6c667e537a98cca852f713c2057f2012ff61","modified":1479580623000},{"_id":"themes/apollo/layout/partial/layout.jade","hash":"eb15573ff66bdbb110ac77cf360b740170cee738","modified":1479580623000},{"_id":"themes/apollo/layout/partial/scripts.jade","hash":"cf3339de8979b5f75a3011f0f6b5451091b77dc8","modified":1479580623000},{"_id":"themes/apollo/source/css/apollo.css","hash":"805612fea3f0768dc705058f4b9b8bc95abe4ed4","modified":1479580623000},{"_id":"themes/apollo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479580616000},{"_id":"themes/apollo/source/font/sourcesanspro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1479580623000},{"_id":"themes/apollo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1479580616000},{"_id":"themes/apollo/.git/logs/HEAD","hash":"d4c15fbb71fe003b57db3f797866d35d3072e5f0","modified":1479580623000},{"_id":"themes/apollo/source/font/sourcesanspro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1479580623000},{"_id":"themes/apollo/source/scss/apollo.scss","hash":"153bbf882c1f6f65bb4510999b51812e20016ca7","modified":1479580623000},{"_id":"themes/apollo/.git/objects/pack/pack-50f8283c56cf66a29b415c15233c8b502336d1f5.idx","hash":"c5192c33e94b710fd0d51659ed1a94e22df9ec3d","modified":1479580623000},{"_id":"themes/apollo/.git/refs/heads/master","hash":"4605c6681d054db5754369e5211848dd9dcacaef","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/archive-post-list.scss","hash":"d2f740a7d48349b7536777c795f82ab740836d0f","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/copyright.scss","hash":"1309667e3000037170cfbb5b8c9c65f4ffcf6814","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/footer.scss","hash":"094aca6e52f11b139ac7980ca03fa7b9d8fc7b2f","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/base.scss","hash":"ae967b2049ecb9b8c4e139ecce32fd9fb5358ac5","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/header.scss","hash":"153bde88bf8ffeae4ffd813d8cc694dd83d33d94","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/home-post-list.scss","hash":"6b5c59f3d2295944f934aee2c1156012a3306d5d","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/mq.scss","hash":"b5eb0fb35fb275cbb6452b5d98702d461af3e6d5","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1479580623000},{"_id":"themes/apollo/source/scss/_partial/post.scss","hash":"912776a0eb7ad5a387b9aa929c857b6edd0c113e","modified":1479580623000},{"_id":"themes/apollo/.git/logs/refs/heads/master","hash":"d4c15fbb71fe003b57db3f797866d35d3072e5f0","modified":1479580623000},{"_id":"themes/apollo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1479580623000},{"_id":"themes/apollo/.git/objects/pack/pack-50f8283c56cf66a29b415c15233c8b502336d1f5.pack","hash":"cbcc56c2bbdf55f2238525ab7fdef25a5f4948dc","modified":1479580623000},{"_id":"themes/apollo/.git/logs/refs/remotes/origin/HEAD","hash":"d4c15fbb71fe003b57db3f797866d35d3072e5f0","modified":1479580623000},{"_id":"source/_posts/思考/2014-10-27-thoughtworks-speech.md","hash":"6ba2aebbd4924d14ab9ab70bebe5bf99cdf02e72","modified":1431867488000},{"_id":"source/_posts/思考/2014-11-01-why-i-am-so-serious.md","hash":"2993d225e97dd33a4b76322187dfd990af8e4bd9","modified":1431867488000},{"_id":"source/_posts/思考/2014-11-16-think-college-1.md","hash":"4a40b479fe8500f6e9b83a5d0ef62b3b4735dc2c","modified":1431867488000},{"_id":"source/_posts/思考/2015-05-12-intellectual-and-single-entrance.md","hash":"0803b69f6a79fe6b7624c08f19d1fc93c7af9507","modified":1431867488000},{"_id":"source/_posts/思考/2015-05-27-new-state-in-library.md","hash":"59ef27c1ca3d35ed77bbdf18f265530494ffce6d","modified":1432717611000},{"_id":"source/_posts/思考/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1434290415000},{"_id":"source/_posts/思考/2015-06-14.md","hash":"caa28958167f4165fa34202a0ef1f3da7e8043af","modified":1434290724000},{"_id":"source/_posts/思考/2015-06-14.png","hash":"978551d6ddb5f0a8e96824c58432f8e994c1b218","modified":1434290530000},{"_id":"source/_posts/技术/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1431867459000},{"_id":"source/_posts/技术/2013-10-02-blog-build-course.md","hash":"a207eca3b3d626d282c9531f794b9f50b7094230","modified":1439741098000},{"_id":"source/_posts/技术/2014-09-25-begin-ruby-with-rubymine.md","hash":"8d84352f8ff90a0d84116dc6c42012ddd2e78a57","modified":1431867488000},{"_id":"source/_posts/技术/2014-09-25-how-to-install-and-config-ubuntu.md","hash":"bdb9567a38cd8164bc19fe73bf87eb0e38be40c5","modified":1431867488000},{"_id":"source/_posts/技术/2014-09-25-use-git-and-github.md","hash":"ac51f4ca2a5da8256546604fff2fc6a52aa112a2","modified":1431867488000},{"_id":"source/_posts/技术/2014-09-26-setting-sublime-for-python.md","hash":"ddbd82764c14e53d8aa119ab28f391f68b1e3067","modified":1431867488000},{"_id":"source/_posts/技术/2014-09-26-write-article-use-jekyll-github-markdown.md","hash":"9bef82ce80349c1efd5f258e593657f32599a9bd","modified":1431867488000},{"_id":"source/_posts/技术/2014-09-27-Linux-file-and-dir.md","hash":"a929681f16e3d6a2940c3eee070b29c7ac1794d7","modified":1431867488000},{"_id":"source/_posts/技术/2014-09-28-Linux-apt-get.md","hash":"d4744fe31f31b7285465d00726ee0eb4a1d70c03","modified":1431867488000},{"_id":"source/_posts/技术/2014-11-16-Linux-text-editor.md","hash":"b04ff12a4ea8ed6e0afbfe0f04e9d275d41be6ff","modified":1431867488000},{"_id":"source/_posts/技术/2015-04-29-fight-with-gfw.md","hash":"b377bd2d92646924319552dce86e920c6b351cd9","modified":1431867488000},{"_id":"source/_posts/技术/2015-05-14-learning-reactjs.md","hash":"26d2efbd2b84149e9ce24b2407893a90fe7250de","modified":1431867488000},{"_id":"source/_posts/技术/2015-05-17-how-to-install-nodejs-correctly.md","hash":"90db249efe5241409734b7efbfc16f363cfa723a","modified":1431925061000},{"_id":"source/_posts/摄影/2014-11-17-SWJTU-photos-02.md","hash":"4cfdaca07689668e9fbeddcba9267c26cec29c3e","modified":1431867488000},{"_id":"source/_posts/摄影/2013-09-21-SWJTU-photos.md","hash":"87bf0eea7ed5bee3b9be7ed9017c0ecaee89c06a","modified":1431867488000},{"_id":"source/_posts/编程/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1431865621000},{"_id":"source/_posts/编程/2014-11-15-pythonic-zen.md","hash":"54d5a572906e8902709680c6bf8719c65acc1e98","modified":1431867488000},{"_id":"source/_posts/编程/2014-11-17-python-to-java-01.md","hash":"12f48c629cf0b968a3dd3ea5cf62f5f253ca5422","modified":1431867488000},{"_id":"source/_posts/编程/2015-01-17-python-guide-e2c-plan.md","hash":"a22765927674349bccea3ef817a9920606dc91d9","modified":1431867488000},{"_id":"source/_posts/读书/2014-01-01-Book-List-2014.md","hash":"7d759756e12a9a4a6556ddb4a2c4640bf950df59","modified":1433135416000},{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1479580819000},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1479581087000},{"_id":"themes/icarus/LICENSE","hash":"df00918fa95de563927fd92b26f14c7affdc3052","modified":1479581087000},{"_id":"themes/icarus/README.md","hash":"25c75503f044b817297995a96621c92ce037a098","modified":1479581087000},{"_id":"themes/icarus/_config.yml","hash":"29f83337dab99e94aab7ed70e009eeca36c3fd9d","modified":1479581581000},{"_id":"themes/icarus/package.json","hash":"1bc52ef10a33df23e56bd73c927f605019c87d41","modified":1479581087000},{"_id":"themes/icarus/.git/config","hash":"965ef2ab67fe8b8aa4fb072307ee50d7cf6b31fe","modified":1479581087000},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1479581087000},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1479581005000},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"9393fd3dbc943f1544facb66af7fd8b7a5b9ddbb","modified":1479581087000},{"_id":"themes/icarus/.git/packed-refs","hash":"585123114213e6063e73324a682c68b8d42ee934","modified":1479581087000},{"_id":"themes/icarus/languages/es.yml","hash":"d7432219be5bee4cb569331378ade61b749688e0","modified":1479581087000},{"_id":"themes/icarus/languages/en.yml","hash":"ade241498b85503a8953a1deca963222f47067a7","modified":1479581087000},{"_id":"themes/icarus/languages/fr.yml","hash":"cb3e597cbec7e8f458858c457bafd1f3a225083d","modified":1479581087000},{"_id":"themes/icarus/.git/index","hash":"9153b69f70b73ebd5926ee41feca25512f26f962","modified":1479581090000},{"_id":"themes/icarus/languages/id.yml","hash":"70ec9ab2ac04cf882e81377ca5ad15bf8adceca8","modified":1479581087000},{"_id":"themes/icarus/languages/ja.yml","hash":"ff972961e5f468a695d80d21b62c3e9032cdf561","modified":1479581087000},{"_id":"themes/icarus/languages/ko.yml","hash":"7c4ad4577dc0577ad2ca1c0410507f5e5fadf530","modified":1479581087000},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"3c5d5293575593705b9a2dfa9d97b017eb4bc8c3","modified":1479581087000},{"_id":"themes/icarus/languages/tr.yml","hash":"8b7eb6aec264db50dbabea89f680acca256f4cd1","modified":1479581087000},{"_id":"themes/icarus/languages/ru.yml","hash":"d1aab2b0c939d0c6020f881d664b660a01ee7327","modified":1479581087000},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"3dc8ec524805afd090438be717908750da439204","modified":1479581087000},{"_id":"source/_posts/.DS_Store","hash":"47c406bf47802e234a0efece22257456c248d958","modified":1479581136000},{"_id":"themes/icarus/layout/archive.ejs","hash":"c1ecf667f40f34d61ab33eed46bab143eb1af36d","modified":1479581087000},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"d8d96a0a17c20af11919ce036e87379a6b163db9","modified":1479581087000},{"_id":"themes/icarus/layout/categories.ejs","hash":"aa95629b770cff8cca9d663aeb6b17928f070de5","modified":1479581087000},{"_id":"themes/icarus/layout/category.ejs","hash":"1d407f9176db84e83062c52ad4755aaea9e74401","modified":1479581087000},{"_id":"themes/icarus/layout/layout.ejs","hash":"6f01b3d46d184a820297f9542497808b152bb09e","modified":1479581087000},{"_id":"themes/icarus/layout/index.ejs","hash":"43e971ebc35657b18e08a049559790348a16666f","modified":1479581087000},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1479581087000},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1479581087000},{"_id":"themes/icarus/layout/tag.ejs","hash":"f6c220d4e5c231028bc71ddc11aec97d7b5a9943","modified":1479581087000},{"_id":"themes/icarus/layout/tags.ejs","hash":"b0fcea68d7c11e5899bf0375d80997685111653f","modified":1479581087000},{"_id":"themes/icarus/scripts/meta.js","hash":"1993754a2f3dffa283fa0538eb8f056385b69ad4","modified":1479581087000},{"_id":"themes/icarus/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1479581087000},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1479581005000},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1479581005000},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1479581005000},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1479581005000},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1479581005000},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1479581005000},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1479581006000},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1479581006000},{"_id":"themes/icarus/_source/categories/index.md","hash":"55bee2cb88da438a2e8b1f29b1d7e954c07a9e60","modified":1479581087000},{"_id":"themes/icarus/_source/about/index.md","hash":"2847759c65295fdc47685cc32e10ae30b2f022ae","modified":1479581087000},{"_id":"themes/icarus/_source/tags/index.md","hash":"e999413d6392c34156b5c6e9273f9069f9e6d92d","modified":1479581087000},{"_id":"themes/icarus/layout/comment/counter.ejs","hash":"e109d3256b004b027d029bd5bd67feeb72dc5388","modified":1479581087000},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1479581006000},{"_id":"themes/icarus/.git/logs/HEAD","hash":"69eecb63458ab34a23a190a2ed312698868f46f6","modified":1479581087000},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1479581006000},{"_id":"themes/icarus/layout/comment/index.ejs","hash":"d45635e78a3fc40e424a401e983f2c8eef6ebcfd","modified":1479581087000},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"1b32a90f400dc580f4b8298de75b94429ca6de68","modified":1479581087000},{"_id":"themes/icarus/layout/comment/scripts.ejs","hash":"8a9a20f72ba0923afa776396fb67d8c5d446a666","modified":1479581087000},{"_id":"themes/icarus/layout/comment/duoshuo.ejs","hash":"ce46d7410a99b57704da32e9d09071cef6c9fa93","modified":1479581087000},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"cbfe560fcab445d42ceeb5d1beba5957d5be5eaa","modified":1479581087000},{"_id":"themes/icarus/layout/common/header.ejs","hash":"738c6a923b2a6de6a81c4892c8a47e03d8b34f88","modified":1479581087000},{"_id":"themes/icarus/layout/common/article.ejs","hash":"9aee307b2387f6762ff6e8226ade2c1c31251132","modified":1479581087000},{"_id":"themes/icarus/layout/comment/youyan.ejs","hash":"6fe807992832939caf6c3e7651d052df9520d88e","modified":1479581087000},{"_id":"themes/icarus/layout/common/profile.ejs","hash":"0d5a9622d490652599e3ba3e4077a7d6bb2eb38e","modified":1479581087000},{"_id":"themes/icarus/layout/common/head.ejs","hash":"44f30945882afd27c89da2173da501fb1b531488","modified":1479581087000},{"_id":"themes/icarus/layout/common/sidebar.ejs","hash":"6e80fa52d23c9c39bfa357a1e00c26fc8b851b82","modified":1479581087000},{"_id":"themes/icarus/layout/common/thumbnail.ejs","hash":"1b70f8a98cd8650b159bda858dbee38dbdb7f0c5","modified":1479581087000},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"c0a1a9e53f89440c42c325d5bd8c7234652c8937","modified":1479581087000},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"3e603a702d20c53fd3bcbeb570a16a86d54781ce","modified":1479581087000},{"_id":"themes/icarus/layout/common/timeline.ejs","hash":"6420e34e0332c9b6670011519f341340db989343","modified":1479581087000},{"_id":"themes/icarus/layout/search/index.ejs","hash":"24935e32e61d4706454b174ea3bed0726ae7fb34","modified":1479581087000},{"_id":"themes/icarus/layout/search/swiftype.ejs","hash":"379e66d2c13526e72e4120c443f95fccf4edef71","modified":1479581087000},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"130fe3d33ac71da0b50f7fee6a87979f30938a1b","modified":1479581087000},{"_id":"themes/icarus/layout/search/index-mobile.ejs","hash":"50a727ac1dfe3073eb6fa6699ba01e66f4ac41c0","modified":1479581087000},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"6a7bee18e666e627e62541a5e30906f87ba1bfe8","modified":1479581087000},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"349f08b6521a16e79046b1f94f04317ac74f556e","modified":1479581087000},{"_id":"themes/icarus/layout/plugin/scripts.ejs","hash":"4fdb85e6730530f2d262041b41d1ead1b87dfd88","modified":1479581087000},{"_id":"themes/icarus/source/css/_extend.styl","hash":"9a5c72663c0da1b32ecb6a75773a5ccfb8c467ca","modified":1479581087000},{"_id":"themes/icarus/source/css/_variables.styl","hash":"d62af931be6612ec8c3a917836379a8cd92fbce1","modified":1479581087000},{"_id":"themes/icarus/source/css/style.styl","hash":"82aa42f9826dc14e9e0d6443af6e253029e7fee6","modified":1479581087000},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"d9ebbb7f6ce2f25df5ae25e4a1fef3c08f7054b9","modified":1479581087000},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"583bda80cf15b3ef11fefbd1b502897dfff40100","modified":1479581087000},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"3b8ae5953990436893da9d68f910ebe592005659","modified":1479581087000},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"aad118699718b62c0d3f3cfd6f17a181139a76af","modified":1479581087000},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2ca923465275fb38a7ac7d67211d6e94a977e957","modified":1479581087000},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"ca8c7bf555fb6ce4904f2c59160548405c2c8a82","modified":1479581087000},{"_id":"themes/icarus/source/js/insight.js","hash":"6ee84c42c2b230ff9e9bf605a444bd671d44f9e3","modified":1479581087000},{"_id":"themes/icarus/source/js/main.js","hash":"1faffdc7aa7f0d28e85edbf49c99de3ad0b65753","modified":1479581087000},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"ac180c4c84b73a04d61b17e7dc18c257e20bf59f","modified":1479581087000},{"_id":"themes/icarus/layout/share/default.ejs","hash":"ebfb919dc525b3ed61a6a5ee05ee71410eedc541","modified":1479581087000},{"_id":"themes/icarus/layout/share/index.ejs","hash":"2a2c0095b95b11e5692bd8ad6a2337aa644189a2","modified":1479581087000},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"a1e772c5a6f174d585b0c1e574058f75dc8e2898","modified":1479581087000},{"_id":"themes/icarus/layout/share/jiathis.ejs","hash":"21ebaa51e828cba2cefbeeaccb01514643565755","modified":1479581087000},{"_id":"themes/icarus/.git/refs/heads/master","hash":"4c9b6e47375c645adef73874b2848a3c896eec82","modified":1479581087000},{"_id":"themes/icarus/layout/common/post/banner.ejs","hash":"47ced3f03525698c79c6b1c07b48383fb6c496b2","modified":1479581087000},{"_id":"themes/icarus/.git/objects/pack/pack-26daf26f9f44c21082fe84e4bfc2f6c1e4d5ba59.idx","hash":"31a7cfee1147bd94e7069e8dc8769ab8aaf41095","modified":1479581087000},{"_id":"themes/icarus/layout/common/post/date.ejs","hash":"45cb0bcad461036cdd1fe2e3fbb5f2f19940025c","modified":1479581087000},{"_id":"themes/icarus/layout/common/post/nav.ejs","hash":"d7cd611e642327f33dff3963ef869c2b46824a11","modified":1479581087000},{"_id":"themes/icarus/layout/common/post/category.ejs","hash":"75c9dda2e7ec041943855ca163a6b1c4c8b4f260","modified":1479581087000},{"_id":"themes/icarus/layout/common/post/gallery.ejs","hash":"659f019761116313169148ec61773e7b84abb739","modified":1479581087000},{"_id":"themes/icarus/layout/common/post/title.ejs","hash":"669ddb46fefa100856588351a7a2d30ad996b755","modified":1479581087000},{"_id":"themes/icarus/layout/common/post/tag.ejs","hash":"2e966216256321aa0c76fe1b9be689601c76ef31","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/androidstudio.styl","hash":"65d09f1b0e81c6a182f549fd3de51e59823c97ae","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/agate.styl","hash":"601eb70448a16b918df132f6fc41e891ae053653","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/arta.styl","hash":"1a5accc115f41d1b669ed708ac6a29abac876599","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-cave-dark.styl","hash":"bc647b2c1d971d7cc947aa1ed66e9fd115261921","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-dark.styl","hash":"df50a85a4b14c7ca6e825d665594b91229d0e460","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-estuary-dark.styl","hash":"d84382bc8298f96730757391d3e761b7e640f406","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-dark.styl","hash":"57c154c6045a038dc7df0a25927853e10bf48c4a","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-dark.styl","hash":"b0cf13b2233e7bc38342032d2d7296591a4c2bcf","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"bb0a8c4ad0dd8e3e7de7122ddf268fc42aa94acb","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-dark.styl","hash":"09c64f1a7052aec9070c36c0431df25216afaea1","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-dark.styl","hash":"a16c919a1ccf2f845488078fb341381bec46b1f3","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-seaside-dark.styl","hash":"ce233a101daea7124cbfcd34add43ccfe2e1e1c7","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"414b0cfc142f70afe359c16450b651e28bf7325a","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/codepen-embed.styl","hash":"f4dcc84d8e39f9831a5efe80e51923fc3054feb0","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/dark.styl","hash":"71ce56d311cc2f3a605f6e2c495ccd7236878404","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/darkula.styl","hash":"ad0d5728d21645039c9f199e7a56814170ed3bab","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/far.styl","hash":"d9928010ffe71e80b97a5afcba1a4975efdd7372","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/hopscotch.styl","hash":"b374c6550b89b4751aedc8fbc3cf98d95bd70ead","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/hybrid.styl","hash":"ea8d7ddc258b073308746385f5cb85aabb8bfb83","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/ir-black.styl","hash":"693078bbd72a2091ed30f506cc55949600b717af","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/monokai-sublime.styl","hash":"25aa2fc1dbe38593e7c7ebe525438a39574d9935","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/monokai.styl","hash":"5a4fe9f957fd7a368c21b62a818403db4270452f","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/obsidian.styl","hash":"55572bbcfee1de6c31ac54681bb00336f5ae826d","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/pojoaque.styl","hash":"77dae9dc41945359d17fe84dbd317f1b40b2ee33","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/railscasts.styl","hash":"acd620f8bb7ff0e3fe5f9a22b4433ceef93a05e6","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/rainbow.styl","hash":"ce73b858fc0aba0e57ef9fb136c083082746bc1d","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/solarized-dark.styl","hash":"702b9299a48c90124e3ac1d45f1591042f2beccc","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-blue.styl","hash":"8b3087d4422be6eb800935a22eb11e035341c4ba","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/sunburst.styl","hash":"a0b5b5129547a23865d400cfa562ea0ac1ee3958","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-bright.styl","hash":"0ac6af6ecb446b5b60d6226748e4a6532db34f57","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"fa57b3bb7857a160fc856dbe319b31e30cc5d771","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/tomorrow-night.styl","hash":"19b3080d4b066b40d50d7e7f297472482b5801fd","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1479581087000},{"_id":"themes/icarus/source/css/_highlight/zenburn.styl","hash":"fc5ec840435dad80964d04519d3f882ddc03746a","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/archive.styl","hash":"d35088c83ddd7a197d6d94e16a2ce3a7e29fa1dc","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/comment.styl","hash":"784646796184d4f27918c22395288a2fafbf9554","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/footer.styl","hash":"484776654e4c1691dc844e6e93786a08855c1c99","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/sidebar.styl","hash":"f528ca7064d9fcecd737b9b71c9c54601365d7d3","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/timeline.styl","hash":"c813b98f4fc45b64d2e07e5d944745a654c8c943","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/insight.styl","hash":"19833cd127f26ad90b06c115f8a96a30e0c0e53b","modified":1479581087000},{"_id":"themes/icarus/source/css/_util/grid.styl","hash":"93fb6f1e2f40cd7d88ad0d56dd73d3f9a7bc853e","modified":1479581087000},{"_id":"themes/icarus/source/css/_util/mixin.styl","hash":"c8e1ddfc0fe9108bab592c7a73b73ce9344991fd","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/header.styl","hash":"1e351f741144135871a3373fe7e969dc961b65e7","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/article.styl","hash":"5dda40a3767646502722bcf810e289f89f1fd998","modified":1479581087000},{"_id":"themes/icarus/source/css/_partial/profile.styl","hash":"fb0170075dc2a41e01dd11bbfdbccbed544c479a","modified":1479581087000},{"_id":"themes/icarus/source/css/images/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1479581087000},{"_id":"themes/icarus/source/css/images/logo.png","hash":"e606a0584f98268b2fe92303f3254520862ef659","modified":1479581087000},{"_id":"themes/icarus/source/css/images/thumb-default-small.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1479581087000},{"_id":"themes/icarus/source/libs/justified-gallery/justifiedGallery.min.css","hash":"13fbcba5e97aa88b748d94d3efc4718475279907","modified":1479581087000},{"_id":"themes/icarus/source/libs/justified-gallery/jquery.justifiedGallery.min.js","hash":"b2683e7a872bc109b1756a65188a37cef7d0bd5c","modified":1479581087000},{"_id":"themes/icarus/source/libs/source-code-pro/styles.css","hash":"93c308012738728f906cd4c5cfdb34189e0c712b","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/styles.css","hash":"5ca6e111046232bde112d33201a60532aee7d3c4","modified":1479581087000},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"69eecb63458ab34a23a190a2ed312698868f46f6","modified":1479581087000},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1479581087000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.min.css","hash":"7cd5a3384333f95c3d37d9488ad82cd6c4b03761","modified":1479581087000},{"_id":"themes/icarus/source/libs/font-awesome/css/font-awesome.css","hash":"b5020c3860669185ba3f316fa7332cdf5c06f393","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css","hash":"844ce27b8488968bccb3e50bb49184ba2aae0625","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.css.map","hash":"51e9df39edf0faa3f38c1bab0c1fa6c922b9edcb","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-fb-comment-box.min.css","hash":"05830fadb8454f39dcc98c8686eb4d5c24b71fc0","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css.map","hash":"50c3348638b4d82fa08a449c690e8d2bb593005d","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.css","hash":"7871c28498d74451d6aa438c8d3a1817810a1e19","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lg-transitions.min.css","hash":"5c22e2073a4c96d6212c72135391b599e8d1359f","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css.map","hash":"3175b4107078674d25798979f7666f4daf31e624","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.min.css","hash":"c9a2e19c932b56f4a2ce30c98910d10b74edb38a","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/img/loading.gif","hash":"607810444094b8619fa4efa6273bc2a7e38dd4b4","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/css/lightgallery.css","hash":"bef55316a32e512d5a8940e5d0bfe8bf7a9c5c61","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/img/video-play.png","hash":"3ea484cdc04d2e4547f80cbf80001dcf248c94ef","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/img/vimeo-play.png","hash":"6190254f2804904a4a1fa1eb390dfd334e416992","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/img/youtube-play.png","hash":"fea6df9d9d43151f9c9d15f000adb30eb3e26fc4","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/fonts/lg.svg","hash":"9a732790adc004b22022cc60fd5f77ec4c8e3e5a","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.js","hash":"426bb78b93acfc39d533ea2bab1cec8dc289cf24","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-autoplay.min.js","hash":"d845741bcaf961579622880eb2a445257efad1ac","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.min.js","hash":"b6b9e4022700b7faf2a5a175ba44a3bd938fdd20","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.js","hash":"15d16516c5642d3de1566ff8fc9160136ccaa405","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-hash.min.js","hash":"43f1e1e720ab0e241c19b83aa26bd6848eab8edc","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.min.js","hash":"25caa6ff65b1c6dee09941e795ae2633bdbab211","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-pager.js","hash":"8092c692b244bb26343eb03b91bd97deb9dafc9c","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-fullscreen.js","hash":"65c47ac65362854ba44b00a010bb01e3630209d8","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.js","hash":"b7fb5f6474911060a351b0a6fe9dbb9ac3fb22aa","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-share.min.js","hash":"39c615f07c5d3aaa65a2c3068a30fdd6dd5c372d","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.js","hash":"3a6476b6df1d2bef4a21861a78776282a7a11ef1","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-thumbnail.min.js","hash":"18dd7d2909d1bfd6852f031d03e774b4428c512b","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.min.js","hash":"032c001ab045a69856f9c3ed4a2a3bf12a8e310f","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-video.js","hash":"4f99b598f6bb18de9eca8c45c5b4373a03962367","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.js","hash":"a758e2c8fcf710f9ff761da0eea0ab9321f3484d","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/K88pR3goAWT7BTt32Z01mxJtnKITppOI_IvcXXDNrsc.woff2","hash":"e0350190d720a8fec0557ab47b318ec4e4486448","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.js","hash":"3cd19b33ba99efd5ba1d167da91720566d274b2c","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/LWCjsQkB6EMdfHrEVqA1KRJtnKITppOI_IvcXXDNrsc.woff2","hash":"2c5b039b57f62625e88226a938679ec937431ad1","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lg-zoom.min.js","hash":"15b49f9728439819ece15e4295cce254c87a4f45","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNShWV49_lSm1NYrwo-zkhivY.woff2","hash":"22413bb8bfb78608c1e25aa1ed5c1f38557df79f","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/59ZRklaO5bWGqF5A9baEERJtnKITppOI_IvcXXDNrsc.woff2","hash":"c4248ea800bd5608344ce163f5658b57e7ef9410","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSpX5f-9o1vgP2EXwfjgl7AY.woff2","hash":"328a22fe3eec71ad9e5ece4d67dd62e79dab6b7f","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSq-j2U0lmluP9RWlSytm3ho.woff2","hash":"4dc6d7174ea6d89f4c45e43e1bfc3e03d8ffebaf","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSj0LW-43aMEzIO6XUTLjad8.woff2","hash":"63eb74ef040aade256f2274a7f31a914edddb0ea","modified":1479581087000},{"_id":"themes/icarus/source/libs/lightgallery/js/lightgallery.min.js","hash":"956ef9b706755318da69ad0b5d7786339d831251","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSv8zf_FOSsgRmwsS7Aa9k2w.woff2","hash":"c5f29fed6632efe0aa83318369f0d8c4061b775b","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/RjgO7rYTmqiVp7vzi-Q5URJtnKITppOI_IvcXXDNrsc.woff2","hash":"be201d32a9aa5d186723ebb3c538be691aa8c53a","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSqaRobkAwv3vxw3jMhVENGA.woff2","hash":"415eee05976ab8b2471602a5ddb78a6c58fc21aa","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/MTP_ySUJH_bn48VBG8sNSugdm0LZdjqr5-oayXSOefg.woff2","hash":"a0b0c389cf46d63c850e61fed572485ff0b68183","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/cJZKeOuBrn4kERxqtaUH3VtXRa8TVwTICgirnJhmVJw.woff2","hash":"afc44700053c9a28f9ab26f6aec4862ac1d0795d","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBkbcKLIaa1LC45dFaAfauRA.woff2","hash":"ae80fb3cd16339aa7b5da280ab53975523dcaac2","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjTOQ_MqJVwkKsUn0wKzc2I.woff2","hash":"b366f2fda2e524eb5ef50058eefff249a3b96e6c","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/u-WUoqrET9fUeobQW7jkRRJtnKITppOI_IvcXXDNrsc.woff2","hash":"113978181dcac77baecef6115a9121d8f6e4fc3a","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBiYE0-AqJ3nfInTTiDXDjU4.woff2","hash":"5067c81462c15422853c94d21a1726865a61634f","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBmo_sUJ8uO4YLWRInS22T3Y.woff2","hash":"b85efde42fa3a03c32b1d31c6cd74c622fc7916c","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBr6up8jxqWt8HVA3mDhkV_0.woff2","hash":"d0b40a7848703556c6631f24e961a98ca5829255","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBo4P5ICox8Kq3LLUNMylGO4.woff2","hash":"e75607ba1417181397c700775b84303d5a2957b9","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xjAJXh38I15wypJXxuGMBjUj_cnvWIuuBMVgbX098Mw.woff2","hash":"d22904914469be735490e3c8cb093c7862896dd5","modified":1479581087000},{"_id":"themes/icarus/source/libs/open-sans/fonts/xozscpT2726on7jbcb_pAhJtnKITppOI_IvcXXDNrsc.woff2","hash":"be365eca44760ce3fc9b377c43d4634958479c69","modified":1479581087000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasD9V_2ngZ8dMf8fLgjYEouxg.woff2","hash":"942addaec4d3a60af33947a84a3d85f926015947","modified":1479581087000},{"_id":"themes/icarus/source/libs/source-code-pro/fonts/mrl8jkM18OlOQN8JLgasDy2Q8seG17bfDXYR_jUsrzg.woff2","hash":"b0e0bb5ef78db8b15d430d0b9be9d4329289a310","modified":1479581087000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1479581087000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1479581087000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1479581087000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1479581087000},{"_id":"themes/icarus/source/libs/jquery/2.1.3/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1479581087000},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"69eecb63458ab34a23a190a2ed312698868f46f6","modified":1479581087000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1479581087000},{"_id":"themes/icarus/source/libs/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1479581087000},{"_id":"themes/icarus/.git/objects/pack/pack-26daf26f9f44c21082fe84e4bfc2f6c1e4d5ba59.pack","hash":"78664089a71b8efbaeeac27718e6d063520586f1","modified":1479581087000}],"Category":[{"name":"思考","_id":"civpk97la0002tz3aza9gd11v"},{"name":"技术","_id":"civpk97me000rtz3aueitaocz"},{"name":"摄影","_id":"civpk97ob001ntz3af0ulwaq9"},{"name":"编程","_id":"civpk97p3002dtz3az1lbj8o1"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-11-19T18:14:52.000Z","updated":"2016-11-19T18:14:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"civpk18ky0000c13a2218lp1i","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"layout":"post","title":"Ruby入门：环境的搭建与RubyMine的安装","published":1,"_content":"\n##搭建Ruby环境（RVM+Ruby+Rails+Gems）\n\n###1. 安装RVM\n\n- Ruby版本管理工具，一个命令行工具，它允许你在同一台电脑上安装并管理和切换多个 Ruby 版本。\n- cURL是一个利用URL语法在命令行下工作的文件传输工具，它支持文件上传和下载，所以是综合传输工具。\n- Source命令也称为“点命令”，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。\n\n```sh\n$ curl -L get.rvm.io | bash -s stable\n$ source ~/.bashrc\n$ source ~/.bash_profile\n```\n\n###2.1 利用RVM安装Ruby\n\n- 安装Ruby\n\n```sh\n#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，这样能提高安装速度\n$ sed -i -e 's/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g' ~/.rvm/config/db\n#列出已知的ruby版本\n$ rvm list known\n#安装/使用/设置ruby默认版本\n$ rvm install ruby-1.9.3-p547\n$ rvm use 1.9.3 --default \n```\n\n- use RVM to install gems\n \n`rvm rubygems current`\n\n###2.2 Ubuntu下apt-get直接安装Ruby[*不推荐*]\n\n- 安装ruby\n\n`sudo apt-get install ruby irb rdoc`\n\n>这样安装之后rvm和ruby似乎是分开的，rvm无法使用和管理该版本的ruby\n\n- 安装Rubygems\n\n`sudo apt-get rubygems`\n\n> RubyGems 是什么？\n> RubyGems（简称 gems）是一个用于对 Ruby组件进行打包的Ruby打包系统。它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具，功能类似于Linux下的apt-get。\n\n> 使用它可以方便第从远程服务器下载并安装Rails。\n> 输入执行命令：\n`gem install rails --remote`\n`gem install rails--include-dependencies`\n\n###安装 Rails 环境\n\n```sh\n$ gem source -r https://rubygems.org/\n$ gem source -a https://ruby.taobao.org\n#手动更新下RubyGems 和其他需要更新的 Gem\n$ gem update --system\n$ gem update\n#使用 RubyGems 安装 Rails\n$ gem install rails\n$ rails -v\nRails 4.1.6\n```\n\n\n##安装RubyMine\n\n###1. 安装Oracle SDK\n[百度经验](http://jingyan.baidu.com/article/7f766daf5e20944101e1d02b.html)\n\n```sh\n#因为版权问题，在Ubuntu的APT仓库中不提供Oracle Java下载\n$ apt-cache search oracle-java　\n---搜索不到任何包\n$ apt-cache search java7\n---只可以搜索到OpenJDK的相关包\n#添加PPA：Personal Package Archive\n$ sudo add-apt-repository ppa:webupd8team/java\n#更新完成后，选择安装Java7\n$ sudo apt-get update\n$ sudo apt-get install oracle-java7-installer\n#设置环境变量\n$ sudo apt-get install oracle-java7-set-default\n```\n\n###2. 安装RubyMine\n- 下载.tar.gz文件\n[Ruby on Rails IDE :: JetBrains RubyMine](http://www.jetbrains.com/ruby/)\n\n- 解压并安装\n\n```sh\n#进入软件包目录\n$ ./bin/rubymine.sh\nbash: ./bin/rubymine.sh: Permission denied\n$ sudo chmod 777 Soft\n$ ls -l rubymine.sh\n-rw------- 1 llgreen llgreen 5848  6月 10 19:22 rubymine.sh\n$ sudo chmod 777 rubymine.sh\n$ ./bin/rubymine.sh\nrun\n```\n\n- 激活\n> 输入序列号验证：\n[JetBrain 软件注册码](http://peter2009.iteye.com/blog/1975994)\n\n- 右键锁定到启动器\n\n###3. 第一次使用\n\n- 选择配色\n\n> 深色主题：Dracula\n\n- 开始一个Rails项目\n\n![1](/public/img/tech/0926-1.png)\n\n![2](/public/img/tech/0926-2.png)","source":"_posts/技术/2014-09-25-begin-ruby-with-rubymine.md","raw":"---\nlayout: post\ntitle: \"Ruby入门：环境的搭建与RubyMine的安装\"\ncategory: 技术\ntags: Ruby\npublished: true\n---\n\n##搭建Ruby环境（RVM+Ruby+Rails+Gems）\n\n###1. 安装RVM\n\n- Ruby版本管理工具，一个命令行工具，它允许你在同一台电脑上安装并管理和切换多个 Ruby 版本。\n- cURL是一个利用URL语法在命令行下工作的文件传输工具，它支持文件上传和下载，所以是综合传输工具。\n- Source命令也称为“点命令”，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。\n\n```sh\n$ curl -L get.rvm.io | bash -s stable\n$ source ~/.bashrc\n$ source ~/.bash_profile\n```\n\n###2.1 利用RVM安装Ruby\n\n- 安装Ruby\n\n```sh\n#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，这样能提高安装速度\n$ sed -i -e 's/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g' ~/.rvm/config/db\n#列出已知的ruby版本\n$ rvm list known\n#安装/使用/设置ruby默认版本\n$ rvm install ruby-1.9.3-p547\n$ rvm use 1.9.3 --default \n```\n\n- use RVM to install gems\n \n`rvm rubygems current`\n\n###2.2 Ubuntu下apt-get直接安装Ruby[*不推荐*]\n\n- 安装ruby\n\n`sudo apt-get install ruby irb rdoc`\n\n>这样安装之后rvm和ruby似乎是分开的，rvm无法使用和管理该版本的ruby\n\n- 安装Rubygems\n\n`sudo apt-get rubygems`\n\n> RubyGems 是什么？\n> RubyGems（简称 gems）是一个用于对 Ruby组件进行打包的Ruby打包系统。它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具，功能类似于Linux下的apt-get。\n\n> 使用它可以方便第从远程服务器下载并安装Rails。\n> 输入执行命令：\n`gem install rails --remote`\n`gem install rails--include-dependencies`\n\n###安装 Rails 环境\n\n```sh\n$ gem source -r https://rubygems.org/\n$ gem source -a https://ruby.taobao.org\n#手动更新下RubyGems 和其他需要更新的 Gem\n$ gem update --system\n$ gem update\n#使用 RubyGems 安装 Rails\n$ gem install rails\n$ rails -v\nRails 4.1.6\n```\n\n\n##安装RubyMine\n\n###1. 安装Oracle SDK\n[百度经验](http://jingyan.baidu.com/article/7f766daf5e20944101e1d02b.html)\n\n```sh\n#因为版权问题，在Ubuntu的APT仓库中不提供Oracle Java下载\n$ apt-cache search oracle-java　\n---搜索不到任何包\n$ apt-cache search java7\n---只可以搜索到OpenJDK的相关包\n#添加PPA：Personal Package Archive\n$ sudo add-apt-repository ppa:webupd8team/java\n#更新完成后，选择安装Java7\n$ sudo apt-get update\n$ sudo apt-get install oracle-java7-installer\n#设置环境变量\n$ sudo apt-get install oracle-java7-set-default\n```\n\n###2. 安装RubyMine\n- 下载.tar.gz文件\n[Ruby on Rails IDE :: JetBrains RubyMine](http://www.jetbrains.com/ruby/)\n\n- 解压并安装\n\n```sh\n#进入软件包目录\n$ ./bin/rubymine.sh\nbash: ./bin/rubymine.sh: Permission denied\n$ sudo chmod 777 Soft\n$ ls -l rubymine.sh\n-rw------- 1 llgreen llgreen 5848  6月 10 19:22 rubymine.sh\n$ sudo chmod 777 rubymine.sh\n$ ./bin/rubymine.sh\nrun\n```\n\n- 激活\n> 输入序列号验证：\n[JetBrain 软件注册码](http://peter2009.iteye.com/blog/1975994)\n\n- 右键锁定到启动器\n\n###3. 第一次使用\n\n- 选择配色\n\n> 深色主题：Dracula\n\n- 开始一个Rails项目\n\n![1](/public/img/tech/0926-1.png)\n\n![2](/public/img/tech/0926-2.png)","slug":"技术-2014-09-25-begin-ruby-with-rubymine","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","_id":"civpk97md000qtz3ayh2hoj0r","comments":1,"photos":[],"link":"","content":"<p>##搭建Ruby环境（RVM+Ruby+Rails+Gems）</p>\n<p>###1. 安装RVM</p>\n<ul>\n<li>Ruby版本管理工具，一个命令行工具，它允许你在同一台电脑上安装并管理和切换多个 Ruby 版本。</li>\n<li>cURL是一个利用URL语法在命令行下工作的文件传输工具，它支持文件上传和下载，所以是综合传输工具。</li>\n<li>Source命令也称为“点命令”，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -L get.rvm.io | bash <span class=\"_\">-s</span> stable</div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_profile</div></pre></td></tr></table></figure>\n<p>###2.1 利用RVM安装Ruby</p>\n<ul>\n<li>安装Ruby</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，这样能提高安装速度</span></div><div class=\"line\">$ sed -i <span class=\"_\">-e</span> <span class=\"string\">'s/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g'</span> ~/.rvm/config/db</div><div class=\"line\"><span class=\"comment\">#列出已知的ruby版本</span></div><div class=\"line\">$ rvm list known</div><div class=\"line\"><span class=\"comment\">#安装/使用/设置ruby默认版本</span></div><div class=\"line\">$ rvm install ruby-1.9.3-p547</div><div class=\"line\">$ rvm use 1.9.3 --default</div></pre></td></tr></table></figure>\n<ul>\n<li>use RVM to install gems</li>\n</ul>\n<p><code>rvm rubygems current</code></p>\n<p>###2.2 Ubuntu下apt-get直接安装Ruby[<em>不推荐</em>]</p>\n<ul>\n<li>安装ruby</li>\n</ul>\n<p><code>sudo apt-get install ruby irb rdoc</code></p>\n<blockquote>\n<p>这样安装之后rvm和ruby似乎是分开的，rvm无法使用和管理该版本的ruby</p>\n</blockquote>\n<ul>\n<li>安装Rubygems</li>\n</ul>\n<p><code>sudo apt-get rubygems</code></p>\n<blockquote>\n<p>RubyGems 是什么？<br>RubyGems（简称 gems）是一个用于对 Ruby组件进行打包的Ruby打包系统。它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具，功能类似于Linux下的apt-get。</p>\n<p>使用它可以方便第从远程服务器下载并安装Rails。<br>输入执行命令：<br><code>gem install rails --remote</code><br><code>gem install rails--include-dependencies</code></p>\n</blockquote>\n<p>###安装 Rails 环境</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem <span class=\"built_in\">source</span> -r https://rubygems.org/</div><div class=\"line\">$ gem <span class=\"built_in\">source</span> <span class=\"_\">-a</span> https://ruby.taobao.org</div><div class=\"line\"><span class=\"comment\">#手动更新下RubyGems 和其他需要更新的 Gem</span></div><div class=\"line\">$ gem update --system</div><div class=\"line\">$ gem update</div><div class=\"line\"><span class=\"comment\">#使用 RubyGems 安装 Rails</span></div><div class=\"line\">$ gem install rails</div><div class=\"line\">$ rails -v</div><div class=\"line\">Rails 4.1.6</div></pre></td></tr></table></figure>\n<p>##安装RubyMine</p>\n<p>###1. 安装Oracle SDK<br><a href=\"http://jingyan.baidu.com/article/7f766daf5e20944101e1d02b.html\" target=\"_blank\" rel=\"external\">百度经验</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#因为版权问题，在Ubuntu的APT仓库中不提供Oracle Java下载</span></div><div class=\"line\">$ apt-cache search oracle-java　</div><div class=\"line\">---搜索不到任何包</div><div class=\"line\">$ apt-cache search java7</div><div class=\"line\">---只可以搜索到OpenJDK的相关包</div><div class=\"line\"><span class=\"comment\">#添加PPA：Personal Package Archive</span></div><div class=\"line\">$ sudo add-apt-repository ppa:webupd8team/java</div><div class=\"line\"><span class=\"comment\">#更新完成后，选择安装Java7</span></div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install oracle-java7-installer</div><div class=\"line\"><span class=\"comment\">#设置环境变量</span></div><div class=\"line\">$ sudo apt-get install oracle-java7-set-default</div></pre></td></tr></table></figure>\n<p>###2. 安装RubyMine</p>\n<ul>\n<li><p>下载.tar.gz文件<br><a href=\"http://www.jetbrains.com/ruby/\" target=\"_blank\" rel=\"external\">Ruby on Rails IDE :: JetBrains RubyMine</a></p>\n</li>\n<li><p>解压并安装</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#进入软件包目录</span></div><div class=\"line\">$ ./bin/rubymine.sh</div><div class=\"line\">bash: ./bin/rubymine.sh: Permission denied</div><div class=\"line\">$ sudo chmod 777 Soft</div><div class=\"line\">$ ls <span class=\"_\">-l</span> rubymine.sh</div><div class=\"line\">-rw------- 1 llgreen llgreen 5848  6月 10 19:22 rubymine.sh</div><div class=\"line\">$ sudo chmod 777 rubymine.sh</div><div class=\"line\">$ ./bin/rubymine.sh</div><div class=\"line\">run</div></pre></td></tr></table></figure>\n<ul>\n<li><p>激活</p>\n<blockquote>\n<p>输入序列号验证：<br><a href=\"http://peter2009.iteye.com/blog/1975994\" target=\"_blank\" rel=\"external\">JetBrain 软件注册码</a></p>\n</blockquote>\n</li>\n<li><p>右键锁定到启动器</p>\n</li>\n</ul>\n<p>###3. 第一次使用</p>\n<ul>\n<li>选择配色</li>\n</ul>\n<blockquote>\n<p>深色主题：Dracula</p>\n</blockquote>\n<ul>\n<li>开始一个Rails项目</li>\n</ul>\n<p><img src=\"/public/img/tech/0926-1.png\" alt=\"1\"></p>\n<p><img src=\"/public/img/tech/0926-2.png\" alt=\"2\"></p>\n","excerpt":"","more":"<p>##搭建Ruby环境（RVM+Ruby+Rails+Gems）</p>\n<p>###1. 安装RVM</p>\n<ul>\n<li>Ruby版本管理工具，一个命令行工具，它允许你在同一台电脑上安装并管理和切换多个 Ruby 版本。</li>\n<li>cURL是一个利用URL语法在命令行下工作的文件传输工具，它支持文件上传和下载，所以是综合传输工具。</li>\n<li>Source命令也称为“点命令”，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl -L get.rvm.io | bash <span class=\"_\">-s</span> stable</div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bash_profile</div></pre></td></tr></table></figure>\n<p>###2.1 利用RVM安装Ruby</p>\n<ul>\n<li>安装Ruby</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，这样能提高安装速度</span></div><div class=\"line\">$ sed -i <span class=\"_\">-e</span> <span class=\"string\">'s/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g'</span> ~/.rvm/config/db</div><div class=\"line\"><span class=\"comment\">#列出已知的ruby版本</span></div><div class=\"line\">$ rvm list known</div><div class=\"line\"><span class=\"comment\">#安装/使用/设置ruby默认版本</span></div><div class=\"line\">$ rvm install ruby-1.9.3-p547</div><div class=\"line\">$ rvm use 1.9.3 --default</div></pre></td></tr></table></figure>\n<ul>\n<li>use RVM to install gems</li>\n</ul>\n<p><code>rvm rubygems current</code></p>\n<p>###2.2 Ubuntu下apt-get直接安装Ruby[<em>不推荐</em>]</p>\n<ul>\n<li>安装ruby</li>\n</ul>\n<p><code>sudo apt-get install ruby irb rdoc</code></p>\n<blockquote>\n<p>这样安装之后rvm和ruby似乎是分开的，rvm无法使用和管理该版本的ruby</p>\n</blockquote>\n<ul>\n<li>安装Rubygems</li>\n</ul>\n<p><code>sudo apt-get rubygems</code></p>\n<blockquote>\n<p>RubyGems 是什么？<br>RubyGems（简称 gems）是一个用于对 Ruby组件进行打包的Ruby打包系统。它提供一个分发 Ruby 程序和库的标准格式，还提供一个管理程序包安装的工具，功能类似于Linux下的apt-get。</p>\n<p>使用它可以方便第从远程服务器下载并安装Rails。<br>输入执行命令：<br><code>gem install rails --remote</code><br><code>gem install rails--include-dependencies</code></p>\n</blockquote>\n<p>###安装 Rails 环境</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem <span class=\"built_in\">source</span> -r https://rubygems.org/</div><div class=\"line\">$ gem <span class=\"built_in\">source</span> <span class=\"_\">-a</span> https://ruby.taobao.org</div><div class=\"line\"><span class=\"comment\">#手动更新下RubyGems 和其他需要更新的 Gem</span></div><div class=\"line\">$ gem update --system</div><div class=\"line\">$ gem update</div><div class=\"line\"><span class=\"comment\">#使用 RubyGems 安装 Rails</span></div><div class=\"line\">$ gem install rails</div><div class=\"line\">$ rails -v</div><div class=\"line\">Rails 4.1.6</div></pre></td></tr></table></figure>\n<p>##安装RubyMine</p>\n<p>###1. 安装Oracle SDK<br><a href=\"http://jingyan.baidu.com/article/7f766daf5e20944101e1d02b.html\">百度经验</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#因为版权问题，在Ubuntu的APT仓库中不提供Oracle Java下载</span></div><div class=\"line\">$ apt-cache search oracle-java　</div><div class=\"line\">---搜索不到任何包</div><div class=\"line\">$ apt-cache search java7</div><div class=\"line\">---只可以搜索到OpenJDK的相关包</div><div class=\"line\"><span class=\"comment\">#添加PPA：Personal Package Archive</span></div><div class=\"line\">$ sudo add-apt-repository ppa:webupd8team/java</div><div class=\"line\"><span class=\"comment\">#更新完成后，选择安装Java7</span></div><div class=\"line\">$ sudo apt-get update</div><div class=\"line\">$ sudo apt-get install oracle-java7-installer</div><div class=\"line\"><span class=\"comment\">#设置环境变量</span></div><div class=\"line\">$ sudo apt-get install oracle-java7-set-default</div></pre></td></tr></table></figure>\n<p>###2. 安装RubyMine</p>\n<ul>\n<li><p>下载.tar.gz文件<br><a href=\"http://www.jetbrains.com/ruby/\">Ruby on Rails IDE :: JetBrains RubyMine</a></p>\n</li>\n<li><p>解压并安装</p>\n</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#进入软件包目录</span></div><div class=\"line\">$ ./bin/rubymine.sh</div><div class=\"line\">bash: ./bin/rubymine.sh: Permission denied</div><div class=\"line\">$ sudo chmod 777 Soft</div><div class=\"line\">$ ls <span class=\"_\">-l</span> rubymine.sh</div><div class=\"line\">-rw------- 1 llgreen llgreen 5848  6月 10 19:22 rubymine.sh</div><div class=\"line\">$ sudo chmod 777 rubymine.sh</div><div class=\"line\">$ ./bin/rubymine.sh</div><div class=\"line\">run</div></pre></td></tr></table></figure>\n<ul>\n<li><p>激活</p>\n<blockquote>\n<p>输入序列号验证：<br><a href=\"http://peter2009.iteye.com/blog/1975994\">JetBrain 软件注册码</a></p>\n</blockquote>\n</li>\n<li><p>右键锁定到启动器</p>\n</li>\n</ul>\n<p>###3. 第一次使用</p>\n<ul>\n<li>选择配色</li>\n</ul>\n<blockquote>\n<p>深色主题：Dracula</p>\n</blockquote>\n<ul>\n<li>开始一个Rails项目</li>\n</ul>\n<p><img src=\"/public/img/tech/0926-1.png\" alt=\"1\"></p>\n<p><img src=\"/public/img/tech/0926-2.png\" alt=\"2\"></p>\n"},{"date":"2015-08-16T16:04:00.000Z","description":null,"keywords":"markdown","layout":"post","status":"public","title":"傻瓜式博客搭建教程:使用GitHub Pages快速生成博客","_content":"\n- 关键词：**Git+github+jekyll+.tk+DNS.LA+markdown** \n\n\n###前言：搭建博客的几大要素\n\n\n>一个域名（即你的博客的网址，这里选用顶级免费域名.tk）\n\n>一个服务器（即博客的代码存放的地方，这里选用github）\n\n>一个Blog生成工具（这里选用jekyll，类似WordPress）\n\n\n\n第一部分：使用GitHub Pages快速生成博客 \n---\n\n###一、介绍Git和Github\n\nGit，一个非常强大的版本管理工具。\n\nGithub则是一个基于Git的日益流行的开源项目托管库，也就是你的“代码仓库”（repository）。\n\n你可以在本地或者网上对自己的代码进行修改，而Github就是一个将你对代码的任何修改和更改说明（commit）进行同步的一个工具，并且可以进行版本管理。在我们搭建博客的过程中，它就扮演着一个“云仓库”服务器的角色，存放我们的博客代码。\n\n###二、Github的安装和配置\n\n1、注册，这个总会吧，官网（[https://github.com/](https://github.com/)）\n \n2、下载安装（[https://help.github.com/articles/set-up-git](https://help.github.com/articles/set-up-git)）\n \n3、安装完成后，桌面出现两个图标：\n \n ![enter image description here][1]\n \n4、GitHub是客户端，点击登陆，输入你先前注册的帐号密码\n \n5、Git Shell是Git的命令行，类似于window下的CMD\n \n6、在Shell里面配置本地信息，分别输入你的github帐号和邮箱：\n \n```\ngit config --global user.name \"Your Name Here\"# Sets the default name for git to use when you commit\n\ngit config --global user.email \"your_email@example.com\"# Sets the default email for git to use when you commit\n```\n\n更多关于Github的设置可以看[这里][2]\n\n###三、建立一个“Blog”项目，用Github Pages生成博客 \n\n>**说明：**\n\n>先前就介绍过Github是一个跨平台的“云仓库”，所以我们既可以在网上操作，也可以在本地操作再推送到云端。\n\n>我先介绍一下在Github网站上怎么直接用Github Pages快速生成一个博客，再介绍在本地利用Git Shell新建一个，同时可以熟悉一下git的操作流程。\n\n\n\n1、在[网站][3]上新建一个仓库（repository），网站右上角：\n \n![][4]\n\n2、输入库的名字，**注意：**一定要以这种形式**yourname.github.com**进行命名，比如我的用户名是liqing215，于是我的命名就是liqing215.github.com。\n \n![enter image description here][5]\n\n3、创建完成之后进入这个界面后点击右边的设置，\n\n![enter image description here][6]\n\n4、把界面往下拉就可以看到一个“页面自动生成”按钮了，猛击它！！\n\n![enter image description here][7]\n\n5、然后进入Github自带的markdown编辑器进行编辑，你可以随意修改写上几句自己的话。然后点击右下角的绿色按钮[Continue to Layouts]\n    \n6、然后你可以选择一个自己喜欢的主题，点击Publish就可以生成属于你自己的博客啦！\n\n7、试着在地址栏输入http://yourname.github.io/就可以进入你刚刚创建的博客，比如我的就是[http://liqing215.github.io/](http://liqing215.github.io/)\n\n当然输入http://yourname.github.com/也可以，它会自动跳转到http://yourname.github.io/\n\n###四、在本地上新建一个Github项目\n > 其实到以上为止我们已经创建好了一个属于自己的博客，接下来我们再新建一个其他项目，用来熟悉github的整个操作流程，你会发现它真的超好用。\n \n**4.1、利用图形界面GitHub：**\n\n1、跟上面一样，在网站上新建一个repository，这里我们把名字命名为myBlog，（其实随意啦）\n\n2、新建好到这个界面的时候，打开你的GitHub软件，刷新一下你就可以在列表里看到你新建的那个repository了。\n\n![enter image description here][8]\n\n3、此时你就可以把网上的仓库加载到本地：\n\n一种非常简单的方法是点击列表中repository的右边有个clone按钮，点击之后等待下载，然后右键可以选择open in explorer在资源管理器中打开。\n\n在资源管理器中你可以新建文件啊，更改文件啊，随便进行任何修改之后回到GitHub你会发现它已经感应到了。\n\n![enter image description here][9]\n\n之后点击上方的publish按钮就可以把本地的更改发布上去了，这里publish的概念应该就是发布一个新版本，在右边它会让你填写commit，应该是对此版本的一个说明。\n\n**4.2、利用命令行Git Shell：**\n\n1、也可以选择在Shell下完成整个过程，虽然比较麻烦，但是有一种程序员的感觉有木有：\n\n![enter image description here][10]\n\n2、在上图中可以看到在Shell中新建一个仓库的完整命令：\n\n```\nmakdir ~/hello-world    //创建一个项目hello-world\n\ncd ~/hello-world       //打开这个项目\n\ngit init             //初始化 \n\ntouch README //创建说明文件\n\ngit add README        //更新README文件\n\ngit commit -m 'first commit'     //提交更新，并注释信息“first commit”\n\ngit remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目\n\ngit push -u origin master     //将本地项目更新到github项目上去\n```\n\n3、还有怎样推送一个已经存在的，被你修改过的项目到网上：\n\n```\ngit remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目\n\ngit push -u origin master     //将本地项目更新到github项目上去\n```\n\n4、发现https://github.com/liqing215/myBlog.git就是下图中标识红线的那个类似于网址的东西了吧，记得把我的改成你的。\n\n![enter image description here][10]\n\n**一个槽点：**\n>发现还是图形界面好用吗？只需要用鼠标点击几个按钮就行了？\n\n>但是程序员可不一样，他们喜欢一直用键盘敲啊敲，这样的场景在电视电影中太常见了而且很酷炫有木有。\n\n>而且啊？！你有米有发现在Shell下完全不用切换界面了!!!\n\n>所有工作都在一个黑底白字的框框里面完成了，当你熟悉过后你就会发现图形界面才是更难用的。\n\n\n<div align=\"right\">\nWritten with\n<a href=\"http://benweet.github.io/stackedit/\">\n[StackEdit]\n</a>\n</div>\n\n\n\n  [1]: https://lh4.googleusercontent.com/-muAVO81BsfM/Ukwf1vepLzI/AAAAAAAAAFc/20AHhLdbK8U/s0/GIT.jpg \"GIT.jpg\"\n  [2]: http://www.cnblogs.com/sprying/p/3276984.html\n  [3]: https://github.com\n  [4]: https://lh5.googleusercontent.com/-eQD90D5qlfY/UkwsyUt3ZHI/AAAAAAAAAFw/xSU3QCTUZPs/s0/%E5%88%9B%E5%BB%BArepository.jpg \"创建repository.jpg\"\n  [5]: https://lh3.googleusercontent.com/-EybvjDatNUg/UkwukR5hZjI/AAAAAAAAAGE/TtrM2NRohGU/s450/%25E5%2588%259B%25E5%25BB%25BArepository2.jpg \"创建repository2.jpg\"\n  [6]: https://lh3.googleusercontent.com/-gp-py8RIyfc/Ukww4ubcbGI/AAAAAAAAAGs/oVVXirynjp4/s450/%E5%88%9B%E5%BB%BArepository3.jpg \"创建repository3.jpg\"\n  [7]: https://lh3.googleusercontent.com/-465J4njURXw/Ukww9gZE8PI/AAAAAAAAAG4/2YfW-sTvMWI/s450/%E5%88%9B%E5%BB%BArepository4.jpg \"创建repository4.jpg\"\n  [8]: https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHo/ysaYhKsb9Ic/s450/HTTP+SSH.jpg \"HTTP SSH.jpg\"\n  [9]: https://lh5.googleusercontent.com/-03kwuSLa5fg/Ukw6OzSVIBI/AAAAAAAAAH0/lPmjGm3-Fzg/s450/local+update.jpg \"local update.jpg\"\n  [10]: https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHs/CnHE_IV0TP0/s450/HTTP+SSH.jpg \"HTTP SSH.jpg\"","source":"_posts/技术/2013-10-02-blog-build-course.md","raw":"---\ncategory: 技术\ndate: 2015-08-17 00:04\ndescription:\nkeywords: markdown\nlayout: post\nstatus: public\ntags: 'Github Jekyll'\ntitle: '傻瓜式博客搭建教程:使用GitHub Pages快速生成博客'\n---\n\n- 关键词：**Git+github+jekyll+.tk+DNS.LA+markdown** \n\n\n###前言：搭建博客的几大要素\n\n\n>一个域名（即你的博客的网址，这里选用顶级免费域名.tk）\n\n>一个服务器（即博客的代码存放的地方，这里选用github）\n\n>一个Blog生成工具（这里选用jekyll，类似WordPress）\n\n\n\n第一部分：使用GitHub Pages快速生成博客 \n---\n\n###一、介绍Git和Github\n\nGit，一个非常强大的版本管理工具。\n\nGithub则是一个基于Git的日益流行的开源项目托管库，也就是你的“代码仓库”（repository）。\n\n你可以在本地或者网上对自己的代码进行修改，而Github就是一个将你对代码的任何修改和更改说明（commit）进行同步的一个工具，并且可以进行版本管理。在我们搭建博客的过程中，它就扮演着一个“云仓库”服务器的角色，存放我们的博客代码。\n\n###二、Github的安装和配置\n\n1、注册，这个总会吧，官网（[https://github.com/](https://github.com/)）\n \n2、下载安装（[https://help.github.com/articles/set-up-git](https://help.github.com/articles/set-up-git)）\n \n3、安装完成后，桌面出现两个图标：\n \n ![enter image description here][1]\n \n4、GitHub是客户端，点击登陆，输入你先前注册的帐号密码\n \n5、Git Shell是Git的命令行，类似于window下的CMD\n \n6、在Shell里面配置本地信息，分别输入你的github帐号和邮箱：\n \n```\ngit config --global user.name \"Your Name Here\"# Sets the default name for git to use when you commit\n\ngit config --global user.email \"your_email@example.com\"# Sets the default email for git to use when you commit\n```\n\n更多关于Github的设置可以看[这里][2]\n\n###三、建立一个“Blog”项目，用Github Pages生成博客 \n\n>**说明：**\n\n>先前就介绍过Github是一个跨平台的“云仓库”，所以我们既可以在网上操作，也可以在本地操作再推送到云端。\n\n>我先介绍一下在Github网站上怎么直接用Github Pages快速生成一个博客，再介绍在本地利用Git Shell新建一个，同时可以熟悉一下git的操作流程。\n\n\n\n1、在[网站][3]上新建一个仓库（repository），网站右上角：\n \n![][4]\n\n2、输入库的名字，**注意：**一定要以这种形式**yourname.github.com**进行命名，比如我的用户名是liqing215，于是我的命名就是liqing215.github.com。\n \n![enter image description here][5]\n\n3、创建完成之后进入这个界面后点击右边的设置，\n\n![enter image description here][6]\n\n4、把界面往下拉就可以看到一个“页面自动生成”按钮了，猛击它！！\n\n![enter image description here][7]\n\n5、然后进入Github自带的markdown编辑器进行编辑，你可以随意修改写上几句自己的话。然后点击右下角的绿色按钮[Continue to Layouts]\n    \n6、然后你可以选择一个自己喜欢的主题，点击Publish就可以生成属于你自己的博客啦！\n\n7、试着在地址栏输入http://yourname.github.io/就可以进入你刚刚创建的博客，比如我的就是[http://liqing215.github.io/](http://liqing215.github.io/)\n\n当然输入http://yourname.github.com/也可以，它会自动跳转到http://yourname.github.io/\n\n###四、在本地上新建一个Github项目\n > 其实到以上为止我们已经创建好了一个属于自己的博客，接下来我们再新建一个其他项目，用来熟悉github的整个操作流程，你会发现它真的超好用。\n \n**4.1、利用图形界面GitHub：**\n\n1、跟上面一样，在网站上新建一个repository，这里我们把名字命名为myBlog，（其实随意啦）\n\n2、新建好到这个界面的时候，打开你的GitHub软件，刷新一下你就可以在列表里看到你新建的那个repository了。\n\n![enter image description here][8]\n\n3、此时你就可以把网上的仓库加载到本地：\n\n一种非常简单的方法是点击列表中repository的右边有个clone按钮，点击之后等待下载，然后右键可以选择open in explorer在资源管理器中打开。\n\n在资源管理器中你可以新建文件啊，更改文件啊，随便进行任何修改之后回到GitHub你会发现它已经感应到了。\n\n![enter image description here][9]\n\n之后点击上方的publish按钮就可以把本地的更改发布上去了，这里publish的概念应该就是发布一个新版本，在右边它会让你填写commit，应该是对此版本的一个说明。\n\n**4.2、利用命令行Git Shell：**\n\n1、也可以选择在Shell下完成整个过程，虽然比较麻烦，但是有一种程序员的感觉有木有：\n\n![enter image description here][10]\n\n2、在上图中可以看到在Shell中新建一个仓库的完整命令：\n\n```\nmakdir ~/hello-world    //创建一个项目hello-world\n\ncd ~/hello-world       //打开这个项目\n\ngit init             //初始化 \n\ntouch README //创建说明文件\n\ngit add README        //更新README文件\n\ngit commit -m 'first commit'     //提交更新，并注释信息“first commit”\n\ngit remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目\n\ngit push -u origin master     //将本地项目更新到github项目上去\n```\n\n3、还有怎样推送一个已经存在的，被你修改过的项目到网上：\n\n```\ngit remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目\n\ngit push -u origin master     //将本地项目更新到github项目上去\n```\n\n4、发现https://github.com/liqing215/myBlog.git就是下图中标识红线的那个类似于网址的东西了吧，记得把我的改成你的。\n\n![enter image description here][10]\n\n**一个槽点：**\n>发现还是图形界面好用吗？只需要用鼠标点击几个按钮就行了？\n\n>但是程序员可不一样，他们喜欢一直用键盘敲啊敲，这样的场景在电视电影中太常见了而且很酷炫有木有。\n\n>而且啊？！你有米有发现在Shell下完全不用切换界面了!!!\n\n>所有工作都在一个黑底白字的框框里面完成了，当你熟悉过后你就会发现图形界面才是更难用的。\n\n\n<div align=\"right\">\nWritten with\n<a href=\"http://benweet.github.io/stackedit/\">\n[StackEdit]\n</a>\n</div>\n\n\n\n  [1]: https://lh4.googleusercontent.com/-muAVO81BsfM/Ukwf1vepLzI/AAAAAAAAAFc/20AHhLdbK8U/s0/GIT.jpg \"GIT.jpg\"\n  [2]: http://www.cnblogs.com/sprying/p/3276984.html\n  [3]: https://github.com\n  [4]: https://lh5.googleusercontent.com/-eQD90D5qlfY/UkwsyUt3ZHI/AAAAAAAAAFw/xSU3QCTUZPs/s0/%E5%88%9B%E5%BB%BArepository.jpg \"创建repository.jpg\"\n  [5]: https://lh3.googleusercontent.com/-EybvjDatNUg/UkwukR5hZjI/AAAAAAAAAGE/TtrM2NRohGU/s450/%25E5%2588%259B%25E5%25BB%25BArepository2.jpg \"创建repository2.jpg\"\n  [6]: https://lh3.googleusercontent.com/-gp-py8RIyfc/Ukww4ubcbGI/AAAAAAAAAGs/oVVXirynjp4/s450/%E5%88%9B%E5%BB%BArepository3.jpg \"创建repository3.jpg\"\n  [7]: https://lh3.googleusercontent.com/-465J4njURXw/Ukww9gZE8PI/AAAAAAAAAG4/2YfW-sTvMWI/s450/%E5%88%9B%E5%BB%BArepository4.jpg \"创建repository4.jpg\"\n  [8]: https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHo/ysaYhKsb9Ic/s450/HTTP+SSH.jpg \"HTTP SSH.jpg\"\n  [9]: https://lh5.googleusercontent.com/-03kwuSLa5fg/Ukw6OzSVIBI/AAAAAAAAAH0/lPmjGm3-Fzg/s450/local+update.jpg \"local update.jpg\"\n  [10]: https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHs/CnHE_IV0TP0/s450/HTTP+SSH.jpg \"HTTP SSH.jpg\"","slug":"技术-2013-10-02-blog-build-course","published":1,"updated":"2015-08-16T16:04:58.000Z","_id":"civpk97mi000vtz3arkhad1v3","comments":1,"photos":[],"link":"","content":"<ul>\n<li>关键词：<strong>Git+github+jekyll+.tk+DNS.LA+markdown</strong> </li>\n</ul>\n<p>###前言：搭建博客的几大要素</p>\n<blockquote>\n<p>一个域名（即你的博客的网址，这里选用顶级免费域名.tk）</p>\n<p>一个服务器（即博客的代码存放的地方，这里选用github）</p>\n<p>一个Blog生成工具（这里选用jekyll，类似WordPress）</p>\n</blockquote>\n<h2 id=\"第一部分：使用GitHub-Pages快速生成博客\"><a href=\"#第一部分：使用GitHub-Pages快速生成博客\" class=\"headerlink\" title=\"第一部分：使用GitHub Pages快速生成博客 \"></a>第一部分：使用GitHub Pages快速生成博客 </h2><p>###一、介绍Git和Github</p>\n<p>Git，一个非常强大的版本管理工具。</p>\n<p>Github则是一个基于Git的日益流行的开源项目托管库，也就是你的“代码仓库”（repository）。</p>\n<p>你可以在本地或者网上对自己的代码进行修改，而Github就是一个将你对代码的任何修改和更改说明（commit）进行同步的一个工具，并且可以进行版本管理。在我们搭建博客的过程中，它就扮演着一个“云仓库”服务器的角色，存放我们的博客代码。</p>\n<p>###二、Github的安装和配置</p>\n<p>1、注册，这个总会吧，官网（<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">https://github.com/</a>）</p>\n<p>2、下载安装（<a href=\"https://help.github.com/articles/set-up-git\" target=\"_blank\" rel=\"external\">https://help.github.com/articles/set-up-git</a>）</p>\n<p>3、安装完成后，桌面出现两个图标：</p>\n<p> <img src=\"https://lh4.googleusercontent.com/-muAVO81BsfM/Ukwf1vepLzI/AAAAAAAAAFc/20AHhLdbK8U/s0/GIT.jpg\" alt=\"enter image description here\" title=\"GIT.jpg\"></p>\n<p>4、GitHub是客户端，点击登陆，输入你先前注册的帐号密码</p>\n<p>5、Git Shell是Git的命令行，类似于window下的CMD</p>\n<p>6、在Shell里面配置本地信息，分别输入你的github帐号和邮箱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;Your Name Here&quot;# Sets the default name for git to use when you commit</div><div class=\"line\"></div><div class=\"line\">git config --global user.email &quot;your_email@example.com&quot;# Sets the default email for git to use when you commit</div></pre></td></tr></table></figure>\n<p>更多关于Github的设置可以看<a href=\"http://www.cnblogs.com/sprying/p/3276984.html\" target=\"_blank\" rel=\"external\">这里</a></p>\n<p>###三、建立一个“Blog”项目，用Github Pages生成博客 </p>\n<blockquote>\n<p><strong>说明：</strong></p>\n<p>先前就介绍过Github是一个跨平台的“云仓库”，所以我们既可以在网上操作，也可以在本地操作再推送到云端。</p>\n<p>我先介绍一下在Github网站上怎么直接用Github Pages快速生成一个博客，再介绍在本地利用Git Shell新建一个，同时可以熟悉一下git的操作流程。</p>\n</blockquote>\n<p>1、在<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">网站</a>上新建一个仓库（repository），网站右上角：</p>\n<p><img src=\"https://lh5.googleusercontent.com/-eQD90D5qlfY/UkwsyUt3ZHI/AAAAAAAAAFw/xSU3QCTUZPs/s0/%E5%88%9B%E5%BB%BArepository.jpg\" alt=\"\" title=\"创建repository.jpg\"></p>\n<p>2、输入库的名字，<strong>注意：</strong>一定要以这种形式<strong>yourname.github.com</strong>进行命名，比如我的用户名是liqing215，于是我的命名就是liqing215.github.com。</p>\n<p><img src=\"https://lh3.googleusercontent.com/-EybvjDatNUg/UkwukR5hZjI/AAAAAAAAAGE/TtrM2NRohGU/s450/%25E5%2588%259B%25E5%25BB%25BArepository2.jpg\" alt=\"enter image description here\" title=\"创建repository2.jpg\"></p>\n<p>3、创建完成之后进入这个界面后点击右边的设置，</p>\n<p><img src=\"https://lh3.googleusercontent.com/-gp-py8RIyfc/Ukww4ubcbGI/AAAAAAAAAGs/oVVXirynjp4/s450/%E5%88%9B%E5%BB%BArepository3.jpg\" alt=\"enter image description here\" title=\"创建repository3.jpg\"></p>\n<p>4、把界面往下拉就可以看到一个“页面自动生成”按钮了，猛击它！！</p>\n<p><img src=\"https://lh3.googleusercontent.com/-465J4njURXw/Ukww9gZE8PI/AAAAAAAAAG4/2YfW-sTvMWI/s450/%E5%88%9B%E5%BB%BArepository4.jpg\" alt=\"enter image description here\" title=\"创建repository4.jpg\"></p>\n<p>5、然后进入Github自带的markdown编辑器进行编辑，你可以随意修改写上几句自己的话。然后点击右下角的绿色按钮[Continue to Layouts]</p>\n<p>6、然后你可以选择一个自己喜欢的主题，点击Publish就可以生成属于你自己的博客啦！</p>\n<p>7、试着在地址栏输入<a href=\"http://yourname.github.io/就可以进入你刚刚创建的博客，比如我的就是[http://liqing215.github.io/](http://liqing215.github.io/\" target=\"_blank\" rel=\"external\">http://yourname.github.io/就可以进入你刚刚创建的博客，比如我的就是[http://liqing215.github.io/](http://liqing215.github.io/</a>)</p>\n<p>当然输入<a href=\"http://yourname.github.com/也可以，它会自动跳转到http://yourname.github.io/\" target=\"_blank\" rel=\"external\">http://yourname.github.com/也可以，它会自动跳转到http://yourname.github.io/</a></p>\n<p>###四、在本地上新建一个Github项目</p>\n<blockquote>\n<p>其实到以上为止我们已经创建好了一个属于自己的博客，接下来我们再新建一个其他项目，用来熟悉github的整个操作流程，你会发现它真的超好用。</p>\n</blockquote>\n<p><strong>4.1、利用图形界面GitHub：</strong></p>\n<p>1、跟上面一样，在网站上新建一个repository，这里我们把名字命名为myBlog，（其实随意啦）</p>\n<p>2、新建好到这个界面的时候，打开你的GitHub软件，刷新一下你就可以在列表里看到你新建的那个repository了。</p>\n<p><img src=\"https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHo/ysaYhKsb9Ic/s450/HTTP+SSH.jpg\" alt=\"enter image description here\" title=\"HTTP SSH.jpg\"></p>\n<p>3、此时你就可以把网上的仓库加载到本地：</p>\n<p>一种非常简单的方法是点击列表中repository的右边有个clone按钮，点击之后等待下载，然后右键可以选择open in explorer在资源管理器中打开。</p>\n<p>在资源管理器中你可以新建文件啊，更改文件啊，随便进行任何修改之后回到GitHub你会发现它已经感应到了。</p>\n<p><img src=\"https://lh5.googleusercontent.com/-03kwuSLa5fg/Ukw6OzSVIBI/AAAAAAAAAH0/lPmjGm3-Fzg/s450/local+update.jpg\" alt=\"enter image description here\" title=\"local update.jpg\"></p>\n<p>之后点击上方的publish按钮就可以把本地的更改发布上去了，这里publish的概念应该就是发布一个新版本，在右边它会让你填写commit，应该是对此版本的一个说明。</p>\n<p><strong>4.2、利用命令行Git Shell：</strong></p>\n<p>1、也可以选择在Shell下完成整个过程，虽然比较麻烦，但是有一种程序员的感觉有木有：</p>\n<p><img src=\"https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHs/CnHE_IV0TP0/s450/HTTP+SSH.jpg\" alt=\"enter image description here\" title=\"HTTP SSH.jpg\"></p>\n<p>2、在上图中可以看到在Shell中新建一个仓库的完整命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">makdir ~/hello-world    //创建一个项目hello-world</div><div class=\"line\"></div><div class=\"line\">cd ~/hello-world       //打开这个项目</div><div class=\"line\"></div><div class=\"line\">git init             //初始化 </div><div class=\"line\"></div><div class=\"line\">touch README //创建说明文件</div><div class=\"line\"></div><div class=\"line\">git add README        //更新README文件</div><div class=\"line\"></div><div class=\"line\">git commit -m &apos;first commit&apos;     //提交更新，并注释信息“first commit”</div><div class=\"line\"></div><div class=\"line\">git remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目</div><div class=\"line\"></div><div class=\"line\">git push -u origin master     //将本地项目更新到github项目上去</div></pre></td></tr></table></figure>\n<p>3、还有怎样推送一个已经存在的，被你修改过的项目到网上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目</div><div class=\"line\"></div><div class=\"line\">git push -u origin master     //将本地项目更新到github项目上去</div></pre></td></tr></table></figure>\n<p>4、发现<a href=\"https://github.com/liqing215/myBlog.git就是下图中标识红线的那个类似于网址的东西了吧，记得把我的改成你的。\" target=\"_blank\" rel=\"external\">https://github.com/liqing215/myBlog.git就是下图中标识红线的那个类似于网址的东西了吧，记得把我的改成你的。</a></p>\n<p><img src=\"https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHs/CnHE_IV0TP0/s450/HTTP+SSH.jpg\" alt=\"enter image description here\" title=\"HTTP SSH.jpg\"></p>\n<p><strong>一个槽点：</strong></p>\n<blockquote>\n<p>发现还是图形界面好用吗？只需要用鼠标点击几个按钮就行了？</p>\n<p>但是程序员可不一样，他们喜欢一直用键盘敲啊敲，这样的场景在电视电影中太常见了而且很酷炫有木有。</p>\n<p>而且啊？！你有米有发现在Shell下完全不用切换界面了!!!</p>\n<p>所有工作都在一个黑底白字的框框里面完成了，当你熟悉过后你就会发现图形界面才是更难用的。</p>\n</blockquote>\n<div align=\"right\"><br>Written with<br><a href=\"http://benweet.github.io/stackedit/\" target=\"_blank\" rel=\"external\"><br>[StackEdit]<br></a><br></div>\n\n\n\n","excerpt":"","more":"<ul>\n<li>关键词：<strong>Git+github+jekyll+.tk+DNS.LA+markdown</strong> </li>\n</ul>\n<p>###前言：搭建博客的几大要素</p>\n<blockquote>\n<p>一个域名（即你的博客的网址，这里选用顶级免费域名.tk）</p>\n<p>一个服务器（即博客的代码存放的地方，这里选用github）</p>\n<p>一个Blog生成工具（这里选用jekyll，类似WordPress）</p>\n</blockquote>\n<h2 id=\"第一部分：使用GitHub-Pages快速生成博客\"><a href=\"#第一部分：使用GitHub-Pages快速生成博客\" class=\"headerlink\" title=\"第一部分：使用GitHub Pages快速生成博客 \"></a>第一部分：使用GitHub Pages快速生成博客 </h2><p>###一、介绍Git和Github</p>\n<p>Git，一个非常强大的版本管理工具。</p>\n<p>Github则是一个基于Git的日益流行的开源项目托管库，也就是你的“代码仓库”（repository）。</p>\n<p>你可以在本地或者网上对自己的代码进行修改，而Github就是一个将你对代码的任何修改和更改说明（commit）进行同步的一个工具，并且可以进行版本管理。在我们搭建博客的过程中，它就扮演着一个“云仓库”服务器的角色，存放我们的博客代码。</p>\n<p>###二、Github的安装和配置</p>\n<p>1、注册，这个总会吧，官网（<a href=\"https://github.com/\">https://github.com/</a>）</p>\n<p>2、下载安装（<a href=\"https://help.github.com/articles/set-up-git\">https://help.github.com/articles/set-up-git</a>）</p>\n<p>3、安装完成后，桌面出现两个图标：</p>\n<p> <img src=\"https://lh4.googleusercontent.com/-muAVO81BsfM/Ukwf1vepLzI/AAAAAAAAAFc/20AHhLdbK8U/s0/GIT.jpg\" alt=\"enter image description here\" title=\"GIT.jpg\"></p>\n<p>4、GitHub是客户端，点击登陆，输入你先前注册的帐号密码</p>\n<p>5、Git Shell是Git的命令行，类似于window下的CMD</p>\n<p>6、在Shell里面配置本地信息，分别输入你的github帐号和邮箱：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;Your Name Here&quot;# Sets the default name for git to use when you commit</div><div class=\"line\"></div><div class=\"line\">git config --global user.email &quot;your_email@example.com&quot;# Sets the default email for git to use when you commit</div></pre></td></tr></table></figure>\n<p>更多关于Github的设置可以看<a href=\"http://www.cnblogs.com/sprying/p/3276984.html\">这里</a></p>\n<p>###三、建立一个“Blog”项目，用Github Pages生成博客 </p>\n<blockquote>\n<p><strong>说明：</strong></p>\n<p>先前就介绍过Github是一个跨平台的“云仓库”，所以我们既可以在网上操作，也可以在本地操作再推送到云端。</p>\n<p>我先介绍一下在Github网站上怎么直接用Github Pages快速生成一个博客，再介绍在本地利用Git Shell新建一个，同时可以熟悉一下git的操作流程。</p>\n</blockquote>\n<p>1、在<a href=\"https://github.com\">网站</a>上新建一个仓库（repository），网站右上角：</p>\n<p><img src=\"https://lh5.googleusercontent.com/-eQD90D5qlfY/UkwsyUt3ZHI/AAAAAAAAAFw/xSU3QCTUZPs/s0/%E5%88%9B%E5%BB%BArepository.jpg\" alt=\"\" title=\"创建repository.jpg\"></p>\n<p>2、输入库的名字，<strong>注意：</strong>一定要以这种形式<strong>yourname.github.com</strong>进行命名，比如我的用户名是liqing215，于是我的命名就是liqing215.github.com。</p>\n<p><img src=\"https://lh3.googleusercontent.com/-EybvjDatNUg/UkwukR5hZjI/AAAAAAAAAGE/TtrM2NRohGU/s450/%25E5%2588%259B%25E5%25BB%25BArepository2.jpg\" alt=\"enter image description here\" title=\"创建repository2.jpg\"></p>\n<p>3、创建完成之后进入这个界面后点击右边的设置，</p>\n<p><img src=\"https://lh3.googleusercontent.com/-gp-py8RIyfc/Ukww4ubcbGI/AAAAAAAAAGs/oVVXirynjp4/s450/%E5%88%9B%E5%BB%BArepository3.jpg\" alt=\"enter image description here\" title=\"创建repository3.jpg\"></p>\n<p>4、把界面往下拉就可以看到一个“页面自动生成”按钮了，猛击它！！</p>\n<p><img src=\"https://lh3.googleusercontent.com/-465J4njURXw/Ukww9gZE8PI/AAAAAAAAAG4/2YfW-sTvMWI/s450/%E5%88%9B%E5%BB%BArepository4.jpg\" alt=\"enter image description here\" title=\"创建repository4.jpg\"></p>\n<p>5、然后进入Github自带的markdown编辑器进行编辑，你可以随意修改写上几句自己的话。然后点击右下角的绿色按钮[Continue to Layouts]</p>\n<p>6、然后你可以选择一个自己喜欢的主题，点击Publish就可以生成属于你自己的博客啦！</p>\n<p>7、试着在地址栏输入<a href=\"http://yourname.github.io/就可以进入你刚刚创建的博客，比如我的就是[http://liqing215.github.io/](http://liqing215.github.io/\">http://yourname.github.io/就可以进入你刚刚创建的博客，比如我的就是[http://liqing215.github.io/](http://liqing215.github.io/</a>)</p>\n<p>当然输入<a href=\"http://yourname.github.com/也可以，它会自动跳转到http://yourname.github.io/\">http://yourname.github.com/也可以，它会自动跳转到http://yourname.github.io/</a></p>\n<p>###四、在本地上新建一个Github项目</p>\n<blockquote>\n<p>其实到以上为止我们已经创建好了一个属于自己的博客，接下来我们再新建一个其他项目，用来熟悉github的整个操作流程，你会发现它真的超好用。</p>\n</blockquote>\n<p><strong>4.1、利用图形界面GitHub：</strong></p>\n<p>1、跟上面一样，在网站上新建一个repository，这里我们把名字命名为myBlog，（其实随意啦）</p>\n<p>2、新建好到这个界面的时候，打开你的GitHub软件，刷新一下你就可以在列表里看到你新建的那个repository了。</p>\n<p><img src=\"https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHo/ysaYhKsb9Ic/s450/HTTP+SSH.jpg\" alt=\"enter image description here\" title=\"HTTP SSH.jpg\"></p>\n<p>3、此时你就可以把网上的仓库加载到本地：</p>\n<p>一种非常简单的方法是点击列表中repository的右边有个clone按钮，点击之后等待下载，然后右键可以选择open in explorer在资源管理器中打开。</p>\n<p>在资源管理器中你可以新建文件啊，更改文件啊，随便进行任何修改之后回到GitHub你会发现它已经感应到了。</p>\n<p><img src=\"https://lh5.googleusercontent.com/-03kwuSLa5fg/Ukw6OzSVIBI/AAAAAAAAAH0/lPmjGm3-Fzg/s450/local+update.jpg\" alt=\"enter image description here\" title=\"local update.jpg\"></p>\n<p>之后点击上方的publish按钮就可以把本地的更改发布上去了，这里publish的概念应该就是发布一个新版本，在右边它会让你填写commit，应该是对此版本的一个说明。</p>\n<p><strong>4.2、利用命令行Git Shell：</strong></p>\n<p>1、也可以选择在Shell下完成整个过程，虽然比较麻烦，但是有一种程序员的感觉有木有：</p>\n<p><img src=\"https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHs/CnHE_IV0TP0/s450/HTTP+SSH.jpg\" alt=\"enter image description here\" title=\"HTTP SSH.jpg\"></p>\n<p>2、在上图中可以看到在Shell中新建一个仓库的完整命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">makdir ~/hello-world    //创建一个项目hello-world</div><div class=\"line\"></div><div class=\"line\">cd ~/hello-world       //打开这个项目</div><div class=\"line\"></div><div class=\"line\">git init             //初始化 </div><div class=\"line\"></div><div class=\"line\">touch README //创建说明文件</div><div class=\"line\"></div><div class=\"line\">git add README        //更新README文件</div><div class=\"line\"></div><div class=\"line\">git commit -m &apos;first commit&apos;     //提交更新，并注释信息“first commit”</div><div class=\"line\"></div><div class=\"line\">git remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目</div><div class=\"line\"></div><div class=\"line\">git push -u origin master     //将本地项目更新到github项目上去</div></pre></td></tr></table></figure>\n<p>3、还有怎样推送一个已经存在的，被你修改过的项目到网上：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin https://github.com/liqing215/myBlog.git //连接远程github项目</div><div class=\"line\"></div><div class=\"line\">git push -u origin master     //将本地项目更新到github项目上去</div></pre></td></tr></table></figure>\n<p>4、发现<a href=\"https://github.com/liqing215/myBlog.git就是下图中标识红线的那个类似于网址的东西了吧，记得把我的改成你的。\">https://github.com/liqing215/myBlog.git就是下图中标识红线的那个类似于网址的东西了吧，记得把我的改成你的。</a></p>\n<p><img src=\"https://lh5.googleusercontent.com/-hTOYtR5YD2E/Ukw5VGhg8qI/AAAAAAAAAHs/CnHE_IV0TP0/s450/HTTP+SSH.jpg\" alt=\"enter image description here\" title=\"HTTP SSH.jpg\"></p>\n<p><strong>一个槽点：</strong></p>\n<blockquote>\n<p>发现还是图形界面好用吗？只需要用鼠标点击几个按钮就行了？</p>\n<p>但是程序员可不一样，他们喜欢一直用键盘敲啊敲，这样的场景在电视电影中太常见了而且很酷炫有木有。</p>\n<p>而且啊？！你有米有发现在Shell下完全不用切换界面了!!!</p>\n<p>所有工作都在一个黑底白字的框框里面完成了，当你熟悉过后你就会发现图形界面才是更难用的。</p>\n</blockquote>\n<div align=\"right\"><br>Written with<br><a href=\"http://benweet.github.io/stackedit/\"><br>[StackEdit]<br></a><br></div>\n\n\n\n"},{"layout":"post","title":"Ubuntu系统的安装与优化","keywords":"Ubuntu","description":null,"published":1,"_content":"\n##安装Ubuntu \n[参考教程](http://jingyan.baidu.com/article/ff42efa9423991c19e22020d.html)\n\n###1. Win下的准备：\n- [下载.iso文件](http://www.ubuntu.com/download/desktop)\n- [UltraISO下载](http://www.baidu.com/s?&wd=UltraISO)\n- [制作U盘启动器](http://jingyan.baidu.com/article/d169e186800f02436711d87b.html)\n- 修改BIOS设置为U盘启动：HP电脑开机按F9\n\n###2. 安装中的分区问题：\n- swap: 交换空间，类似于Win下的虚拟空间。（内存够大也许不需要）\n- /: 根目录，系统的安装目录，相当于C盘，重装时数据丢失。\n- /boot是开机引导系统用的，建立此分区可使Win引导Ubuntu，否则默认Ubuntu引导Win。\n- /home是个人资料文件夹（下载/音乐/文档）这些，重装时数据保留。\n\n###3. 安装过程中下载软件更新和安装软件部分可以skip\n\n##Ubuntu软件\n\n###1. 简化安装：Synaptic (新立得) \n- 是Ubuntu的包管理工具apt的图形化前端。\n- 集成了很多一键安装的软件包，eg: LAMP 解决包依赖的问题。\n- 这里可以先在系统Software Center内安装这个软件\n- tips: 注意此软件打开时terminal中无法使用apt-get\n\n```bash\nE: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)\nE: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?\n```\n\n###2. 词典：Youdao/Stardict/GoldenDict\n- 星际词王最容易安装和使用。\n\n- [Ubuntu-youdao](https://www.google.com/search?q=Ubuntu-youdao)安装不上。\n\n- [GoldenDict](https://www.google.com/search?q=GoldenDict)配置太麻烦。\n\n###3. 输入法：搜狗/Google输入法（Fcitx系列）\n\n- 在synaptic中搜索*googlepinyin*即可安装\n\n###4. 浏览器：Firefox/Chromium\n\n- 还未安装Chromium时使用火狐，火狐的flash插件可以在软件商店中心下载安装解决\n\n- 解决google无法访问 [参考知乎](http://www.zhihu.com/question/21245060/answer/27201877)\n\n> 1. 修改DNS/host：更改系统文件，可能出现莫名奇妙的问题\n> 2. GoAgent + [SwitchySharp](http://www.baidu.com/s?&wd=SwitchySharp)：GoAgent不稳定\n> 3. [红杏](http://botey.cn/UPLOAD/All_Files/Chrome_Red.rar)：付费，但是基础功能提高Google的访问，足以。 \n> tips：此时都不能从Google应用商店下载，只能先下载再拖入chromium安装\n\n- 解决flash\nPepper Flash Player，一个来自Google更安全更稳定的版本的Flash Player\n\n```bash\nsudo apt-get install pepperflashplugin-nonfree\nsudo update-pepperflashplugin-nonfree --install\n```\n\n###5. 系统优化：[Ubuntu Tweak](http://ubuntu-tweak.com/)\n\n- 国人TualatriX开发的ubuntu平台下的优化大师，简单易用\n\n- 可以设置字体/清理垃圾/查看软件\n\n###6. 下拉式终端：「[Guake Terminal](https://github.com/Guake/guake/)」\n\n- `sudo apt-get build-dep guake`\n\n\n##界面美化/优化 \n\n###1. 鼠标指针闪烁\n\n- [关闭 “未知显示器”](http://jingyan.baidu.com/article/3aed632e78668970108091c0.html)\n\n###2. 在当前目录打开terminal\n\n```bash\nsudo apt-get install nautilus-open-terminal\n#reload dir\nnautilus -q\n```\n\n###3. 字体/语言\n\n- 系统语言使用English，默认字体看起来就很舒服\n\n- 浏览器中的字体实在太难看，下载[微软雅黑字体](http://www.baidu.com/s?&wd=微软雅黑字体) -> 在浏览器中选择相应字体+chrome扩展\n\n###4. 使用开源字体库文泉驿的微黑字体\n\n1) 安装文泉驿微黑字体库\n\n```sh\nsudo apt-get install ttf-wqy-microhei\n```\n\n2) 下载安装[Ubuntu Tweak](http://ubuntu-tweak.com/)\n\n原系统设置中没有找到修改字体的地方，使用Ubuntu Tweak：调整－>字库中，将默认字体、桌面字体等做修改\n\n![set-tweak](/public/img/tech/tweak.png)\n\n3) 进一步确认并修改字体配置文件\n\n> - 通常Ubuntu的字体文件存放在/usr/share/fonts下面，字体配置配置文件放在/etc/fonts下面\n> - Ubuntu 对中文字体的控制集中在一个文件/etc/fonts/conf.d/69-language-selector-zh-cn.conf\n> - 编辑文件：`sudo gedit /etc/fonts/conf.d/69-language-selector-zh-cn.conf `\n\n修改如下：\n\n```html\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n<fontconfig>\n\n    <match target=\"pattern\">\n        <test name=\"lang\">\n            <string>zh-cn</string>\n        </test>\n        <test qual=\"any\" name=\"family\">\n            <string>serif</string>\n        </test>\n        <edit name=\"family\" mode=\"prepend\" binding=\"strong\">\n            <string>WenQuanYi Micro Hei</string>\n            <string>AR PL UMing CN</string>\n            <string>AR PL UMing HK</string>\n            <string>AR PL New Sung</string>\n            <string>WenQuanYi Bitmap Song</string>\n            <string>AR PL UKai CN</string>\n            <string>AR PL ZenKai Uni</string>\n            <string>HYSong</string>\n        </edit>\n    </match> \n    <match target=\"pattern\">\n        <test qual=\"any\" name=\"family\">\n            <string>sans-serif</string>\n        </test>\n        <test name=\"lang\">\n            <string>zh-cn</string>\n        </test>\n        <edit name=\"family\" mode=\"prepend\" binding=\"strong\">\n            <string>WenQuanYi Micro Hei</string>\n            <string>Droid Sans Fallback</string>\n            <string>HYSong</string>\n            <string>AR PL UMing CN</string>\n            <string>AR PL UMing HK</string>\n            <string>AR PL New Sung</string>\n            <string>AR PL UKai CN</string>\n            <string>AR PL ZenKai Uni</string>\n        </edit>\n    </match> \n    <match target=\"pattern\">\n        <test qual=\"any\" name=\"family\">\n            <string>monospace</string>\n        </test>\n        <test name=\"lang\">\n            <string>zh-cn</string>\n        </test>\n        <edit name=\"family\" mode=\"prepend\" binding=\"strong\">\n            <string>WenQuanYi Micro Hei Mono</string>\n            <string>Droid Sans Fallback</string>\n            <string>HYSong</string>\n            <string>AR PL UMing CN</string>\n            <string>AR PL UMing HK</string>\n            <string>AR PL New Sung</string>\n            <string>AR PL UKai CN</string>\n            <string>AR PL ZenKai Uni</string>\n        </edit>\n    </match> \n\n</fontconfig>\n```","source":"_posts/技术/2014-09-25-how-to-install-and-config-ubuntu.md","raw":"---\nlayout: post\ntitle: \"Ubuntu系统的安装与优化\"\ncategory: 技术\ntags: Ubuntu\nkeywords: Ubuntu\ndescription: null\npublished: true\n---\n\n##安装Ubuntu \n[参考教程](http://jingyan.baidu.com/article/ff42efa9423991c19e22020d.html)\n\n###1. Win下的准备：\n- [下载.iso文件](http://www.ubuntu.com/download/desktop)\n- [UltraISO下载](http://www.baidu.com/s?&wd=UltraISO)\n- [制作U盘启动器](http://jingyan.baidu.com/article/d169e186800f02436711d87b.html)\n- 修改BIOS设置为U盘启动：HP电脑开机按F9\n\n###2. 安装中的分区问题：\n- swap: 交换空间，类似于Win下的虚拟空间。（内存够大也许不需要）\n- /: 根目录，系统的安装目录，相当于C盘，重装时数据丢失。\n- /boot是开机引导系统用的，建立此分区可使Win引导Ubuntu，否则默认Ubuntu引导Win。\n- /home是个人资料文件夹（下载/音乐/文档）这些，重装时数据保留。\n\n###3. 安装过程中下载软件更新和安装软件部分可以skip\n\n##Ubuntu软件\n\n###1. 简化安装：Synaptic (新立得) \n- 是Ubuntu的包管理工具apt的图形化前端。\n- 集成了很多一键安装的软件包，eg: LAMP 解决包依赖的问题。\n- 这里可以先在系统Software Center内安装这个软件\n- tips: 注意此软件打开时terminal中无法使用apt-get\n\n```bash\nE: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)\nE: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?\n```\n\n###2. 词典：Youdao/Stardict/GoldenDict\n- 星际词王最容易安装和使用。\n\n- [Ubuntu-youdao](https://www.google.com/search?q=Ubuntu-youdao)安装不上。\n\n- [GoldenDict](https://www.google.com/search?q=GoldenDict)配置太麻烦。\n\n###3. 输入法：搜狗/Google输入法（Fcitx系列）\n\n- 在synaptic中搜索*googlepinyin*即可安装\n\n###4. 浏览器：Firefox/Chromium\n\n- 还未安装Chromium时使用火狐，火狐的flash插件可以在软件商店中心下载安装解决\n\n- 解决google无法访问 [参考知乎](http://www.zhihu.com/question/21245060/answer/27201877)\n\n> 1. 修改DNS/host：更改系统文件，可能出现莫名奇妙的问题\n> 2. GoAgent + [SwitchySharp](http://www.baidu.com/s?&wd=SwitchySharp)：GoAgent不稳定\n> 3. [红杏](http://botey.cn/UPLOAD/All_Files/Chrome_Red.rar)：付费，但是基础功能提高Google的访问，足以。 \n> tips：此时都不能从Google应用商店下载，只能先下载再拖入chromium安装\n\n- 解决flash\nPepper Flash Player，一个来自Google更安全更稳定的版本的Flash Player\n\n```bash\nsudo apt-get install pepperflashplugin-nonfree\nsudo update-pepperflashplugin-nonfree --install\n```\n\n###5. 系统优化：[Ubuntu Tweak](http://ubuntu-tweak.com/)\n\n- 国人TualatriX开发的ubuntu平台下的优化大师，简单易用\n\n- 可以设置字体/清理垃圾/查看软件\n\n###6. 下拉式终端：「[Guake Terminal](https://github.com/Guake/guake/)」\n\n- `sudo apt-get build-dep guake`\n\n\n##界面美化/优化 \n\n###1. 鼠标指针闪烁\n\n- [关闭 “未知显示器”](http://jingyan.baidu.com/article/3aed632e78668970108091c0.html)\n\n###2. 在当前目录打开terminal\n\n```bash\nsudo apt-get install nautilus-open-terminal\n#reload dir\nnautilus -q\n```\n\n###3. 字体/语言\n\n- 系统语言使用English，默认字体看起来就很舒服\n\n- 浏览器中的字体实在太难看，下载[微软雅黑字体](http://www.baidu.com/s?&wd=微软雅黑字体) -> 在浏览器中选择相应字体+chrome扩展\n\n###4. 使用开源字体库文泉驿的微黑字体\n\n1) 安装文泉驿微黑字体库\n\n```sh\nsudo apt-get install ttf-wqy-microhei\n```\n\n2) 下载安装[Ubuntu Tweak](http://ubuntu-tweak.com/)\n\n原系统设置中没有找到修改字体的地方，使用Ubuntu Tweak：调整－>字库中，将默认字体、桌面字体等做修改\n\n![set-tweak](/public/img/tech/tweak.png)\n\n3) 进一步确认并修改字体配置文件\n\n> - 通常Ubuntu的字体文件存放在/usr/share/fonts下面，字体配置配置文件放在/etc/fonts下面\n> - Ubuntu 对中文字体的控制集中在一个文件/etc/fonts/conf.d/69-language-selector-zh-cn.conf\n> - 编辑文件：`sudo gedit /etc/fonts/conf.d/69-language-selector-zh-cn.conf `\n\n修改如下：\n\n```html\n<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n<fontconfig>\n\n    <match target=\"pattern\">\n        <test name=\"lang\">\n            <string>zh-cn</string>\n        </test>\n        <test qual=\"any\" name=\"family\">\n            <string>serif</string>\n        </test>\n        <edit name=\"family\" mode=\"prepend\" binding=\"strong\">\n            <string>WenQuanYi Micro Hei</string>\n            <string>AR PL UMing CN</string>\n            <string>AR PL UMing HK</string>\n            <string>AR PL New Sung</string>\n            <string>WenQuanYi Bitmap Song</string>\n            <string>AR PL UKai CN</string>\n            <string>AR PL ZenKai Uni</string>\n            <string>HYSong</string>\n        </edit>\n    </match> \n    <match target=\"pattern\">\n        <test qual=\"any\" name=\"family\">\n            <string>sans-serif</string>\n        </test>\n        <test name=\"lang\">\n            <string>zh-cn</string>\n        </test>\n        <edit name=\"family\" mode=\"prepend\" binding=\"strong\">\n            <string>WenQuanYi Micro Hei</string>\n            <string>Droid Sans Fallback</string>\n            <string>HYSong</string>\n            <string>AR PL UMing CN</string>\n            <string>AR PL UMing HK</string>\n            <string>AR PL New Sung</string>\n            <string>AR PL UKai CN</string>\n            <string>AR PL ZenKai Uni</string>\n        </edit>\n    </match> \n    <match target=\"pattern\">\n        <test qual=\"any\" name=\"family\">\n            <string>monospace</string>\n        </test>\n        <test name=\"lang\">\n            <string>zh-cn</string>\n        </test>\n        <edit name=\"family\" mode=\"prepend\" binding=\"strong\">\n            <string>WenQuanYi Micro Hei Mono</string>\n            <string>Droid Sans Fallback</string>\n            <string>HYSong</string>\n            <string>AR PL UMing CN</string>\n            <string>AR PL UMing HK</string>\n            <string>AR PL New Sung</string>\n            <string>AR PL UKai CN</string>\n            <string>AR PL ZenKai Uni</string>\n        </edit>\n    </match> \n\n</fontconfig>\n```","slug":"技术-2014-09-25-how-to-install-and-config-ubuntu","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97nn000ztz3au2ehukdc","content":"<p>##安装Ubuntu<br><a href=\"http://jingyan.baidu.com/article/ff42efa9423991c19e22020d.html\" target=\"_blank\" rel=\"external\">参考教程</a></p>\n<p>###1. Win下的准备：</p>\n<ul>\n<li><a href=\"http://www.ubuntu.com/download/desktop\" target=\"_blank\" rel=\"external\">下载.iso文件</a></li>\n<li><a href=\"http://www.baidu.com/s?&amp;wd=UltraISO\" target=\"_blank\" rel=\"external\">UltraISO下载</a></li>\n<li><a href=\"http://jingyan.baidu.com/article/d169e186800f02436711d87b.html\" target=\"_blank\" rel=\"external\">制作U盘启动器</a></li>\n<li>修改BIOS设置为U盘启动：HP电脑开机按F9</li>\n</ul>\n<p>###2. 安装中的分区问题：</p>\n<ul>\n<li>swap: 交换空间，类似于Win下的虚拟空间。（内存够大也许不需要）</li>\n<li>/: 根目录，系统的安装目录，相当于C盘，重装时数据丢失。</li>\n<li>/boot是开机引导系统用的，建立此分区可使Win引导Ubuntu，否则默认Ubuntu引导Win。</li>\n<li>/home是个人资料文件夹（下载/音乐/文档）这些，重装时数据保留。</li>\n</ul>\n<p>###3. 安装过程中下载软件更新和安装软件部分可以skip</p>\n<p>##Ubuntu软件</p>\n<p>###1. 简化安装：Synaptic (新立得) </p>\n<ul>\n<li>是Ubuntu的包管理工具apt的图形化前端。</li>\n<li>集成了很多一键安装的软件包，eg: LAMP 解决包依赖的问题。</li>\n<li>这里可以先在系统Software Center内安装这个软件</li>\n<li>tips: 注意此软件打开时terminal中无法使用apt-get</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)</div><div class=\"line\">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</div></pre></td></tr></table></figure>\n<p>###2. 词典：Youdao/Stardict/GoldenDict</p>\n<ul>\n<li><p>星际词王最容易安装和使用。</p>\n</li>\n<li><p><a href=\"https://www.google.com/search?q=Ubuntu-youdao\" target=\"_blank\" rel=\"external\">Ubuntu-youdao</a>安装不上。</p>\n</li>\n<li><p><a href=\"https://www.google.com/search?q=GoldenDict\" target=\"_blank\" rel=\"external\">GoldenDict</a>配置太麻烦。</p>\n</li>\n</ul>\n<p>###3. 输入法：搜狗/Google输入法（Fcitx系列）</p>\n<ul>\n<li>在synaptic中搜索<em>googlepinyin</em>即可安装</li>\n</ul>\n<p>###4. 浏览器：Firefox/Chromium</p>\n<ul>\n<li><p>还未安装Chromium时使用火狐，火狐的flash插件可以在软件商店中心下载安装解决</p>\n</li>\n<li><p>解决google无法访问 <a href=\"http://www.zhihu.com/question/21245060/answer/27201877\" target=\"_blank\" rel=\"external\">参考知乎</a></p>\n</li>\n</ul>\n<blockquote>\n<ol>\n<li>修改DNS/host：更改系统文件，可能出现莫名奇妙的问题</li>\n<li>GoAgent + <a href=\"http://www.baidu.com/s?&amp;wd=SwitchySharp\" target=\"_blank\" rel=\"external\">SwitchySharp</a>：GoAgent不稳定</li>\n<li><a href=\"http://botey.cn/UPLOAD/All_Files/Chrome_Red.rar\" target=\"_blank\" rel=\"external\">红杏</a>：付费，但是基础功能提高Google的访问，足以。<br>tips：此时都不能从Google应用商店下载，只能先下载再拖入chromium安装</li>\n</ol>\n</blockquote>\n<ul>\n<li>解决flash<br>Pepper Flash Player，一个来自Google更安全更稳定的版本的Flash Player</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install pepperflashplugin-nonfree</div><div class=\"line\">sudo update-pepperflashplugin-nonfree --install</div></pre></td></tr></table></figure>\n<p>###5. 系统优化：<a href=\"http://ubuntu-tweak.com/\" target=\"_blank\" rel=\"external\">Ubuntu Tweak</a></p>\n<ul>\n<li><p>国人TualatriX开发的ubuntu平台下的优化大师，简单易用</p>\n</li>\n<li><p>可以设置字体/清理垃圾/查看软件</p>\n</li>\n</ul>\n<p>###6. 下拉式终端：「<a href=\"https://github.com/Guake/guake/\" target=\"_blank\" rel=\"external\">Guake Terminal</a>」</p>\n<ul>\n<li><code>sudo apt-get build-dep guake</code></li>\n</ul>\n<p>##界面美化/优化 </p>\n<p>###1. 鼠标指针闪烁</p>\n<ul>\n<li><a href=\"http://jingyan.baidu.com/article/3aed632e78668970108091c0.html\" target=\"_blank\" rel=\"external\">关闭 “未知显示器”</a></li>\n</ul>\n<p>###2. 在当前目录打开terminal</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nautilus-open-terminal</div><div class=\"line\"><span class=\"comment\">#reload dir</span></div><div class=\"line\">nautilus -q</div></pre></td></tr></table></figure>\n<p>###3. 字体/语言</p>\n<ul>\n<li><p>系统语言使用English，默认字体看起来就很舒服</p>\n</li>\n<li><p>浏览器中的字体实在太难看，下载<a href=\"http://www.baidu.com/s?&amp;wd=微软雅黑字体\" target=\"_blank\" rel=\"external\">微软雅黑字体</a> -&gt; 在浏览器中选择相应字体+chrome扩展</p>\n</li>\n</ul>\n<p>###4. 使用开源字体库文泉驿的微黑字体</p>\n<p>1) 安装文泉驿微黑字体库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install ttf-wqy-microhei</div></pre></td></tr></table></figure>\n<p>2) 下载安装<a href=\"http://ubuntu-tweak.com/\" target=\"_blank\" rel=\"external\">Ubuntu Tweak</a></p>\n<p>原系统设置中没有找到修改字体的地方，使用Ubuntu Tweak：调整－&gt;字库中，将默认字体、桌面字体等做修改</p>\n<p><img src=\"/public/img/tech/tweak.png\" alt=\"set-tweak\"></p>\n<p>3) 进一步确认并修改字体配置文件</p>\n<blockquote>\n<ul>\n<li>通常Ubuntu的字体文件存放在/usr/share/fonts下面，字体配置配置文件放在/etc/fonts下面</li>\n<li>Ubuntu 对中文字体的控制集中在一个文件/etc/fonts/conf.d/69-language-selector-zh-cn.conf</li>\n<li>编辑文件：<code>sudo gedit /etc/fonts/conf.d/69-language-selector-zh-cn.conf</code></li>\n</ul>\n</blockquote>\n<p>修改如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\"?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE fontconfig SYSTEM \"fonts.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fontconfig</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lang\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>zh-cn<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"strong\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>WenQuanYi Micro Hei<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing HK<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL New Sung<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>WenQuanYi Bitmap Song<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UKai CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL ZenKai Uni<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>HYSong<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>sans-serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lang\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>zh-cn<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"strong\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>WenQuanYi Micro Hei<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Droid Sans Fallback<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>HYSong<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing HK<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL New Sung<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UKai CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL ZenKai Uni<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>monospace<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lang\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>zh-cn<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"strong\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>WenQuanYi Micro Hei Mono<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Droid Sans Fallback<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>HYSong<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing HK<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL New Sung<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UKai CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL ZenKai Uni<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fontconfig</span>&gt;</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>##安装Ubuntu<br><a href=\"http://jingyan.baidu.com/article/ff42efa9423991c19e22020d.html\">参考教程</a></p>\n<p>###1. Win下的准备：</p>\n<ul>\n<li><a href=\"http://www.ubuntu.com/download/desktop\">下载.iso文件</a></li>\n<li><a href=\"http://www.baidu.com/s?&amp;wd=UltraISO\">UltraISO下载</a></li>\n<li><a href=\"http://jingyan.baidu.com/article/d169e186800f02436711d87b.html\">制作U盘启动器</a></li>\n<li>修改BIOS设置为U盘启动：HP电脑开机按F9</li>\n</ul>\n<p>###2. 安装中的分区问题：</p>\n<ul>\n<li>swap: 交换空间，类似于Win下的虚拟空间。（内存够大也许不需要）</li>\n<li>/: 根目录，系统的安装目录，相当于C盘，重装时数据丢失。</li>\n<li>/boot是开机引导系统用的，建立此分区可使Win引导Ubuntu，否则默认Ubuntu引导Win。</li>\n<li>/home是个人资料文件夹（下载/音乐/文档）这些，重装时数据保留。</li>\n</ul>\n<p>###3. 安装过程中下载软件更新和安装软件部分可以skip</p>\n<p>##Ubuntu软件</p>\n<p>###1. 简化安装：Synaptic (新立得) </p>\n<ul>\n<li>是Ubuntu的包管理工具apt的图形化前端。</li>\n<li>集成了很多一键安装的软件包，eg: LAMP 解决包依赖的问题。</li>\n<li>这里可以先在系统Software Center内安装这个软件</li>\n<li>tips: 注意此软件打开时terminal中无法使用apt-get</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)</div><div class=\"line\">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</div></pre></td></tr></table></figure>\n<p>###2. 词典：Youdao/Stardict/GoldenDict</p>\n<ul>\n<li><p>星际词王最容易安装和使用。</p>\n</li>\n<li><p><a href=\"https://www.google.com/search?q=Ubuntu-youdao\">Ubuntu-youdao</a>安装不上。</p>\n</li>\n<li><p><a href=\"https://www.google.com/search?q=GoldenDict\">GoldenDict</a>配置太麻烦。</p>\n</li>\n</ul>\n<p>###3. 输入法：搜狗/Google输入法（Fcitx系列）</p>\n<ul>\n<li>在synaptic中搜索<em>googlepinyin</em>即可安装</li>\n</ul>\n<p>###4. 浏览器：Firefox/Chromium</p>\n<ul>\n<li><p>还未安装Chromium时使用火狐，火狐的flash插件可以在软件商店中心下载安装解决</p>\n</li>\n<li><p>解决google无法访问 <a href=\"http://www.zhihu.com/question/21245060/answer/27201877\">参考知乎</a></p>\n</li>\n</ul>\n<blockquote>\n<ol>\n<li>修改DNS/host：更改系统文件，可能出现莫名奇妙的问题</li>\n<li>GoAgent + <a href=\"http://www.baidu.com/s?&amp;wd=SwitchySharp\">SwitchySharp</a>：GoAgent不稳定</li>\n<li><a href=\"http://botey.cn/UPLOAD/All_Files/Chrome_Red.rar\">红杏</a>：付费，但是基础功能提高Google的访问，足以。<br>tips：此时都不能从Google应用商店下载，只能先下载再拖入chromium安装</li>\n</ol>\n</blockquote>\n<ul>\n<li>解决flash<br>Pepper Flash Player，一个来自Google更安全更稳定的版本的Flash Player</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install pepperflashplugin-nonfree</div><div class=\"line\">sudo update-pepperflashplugin-nonfree --install</div></pre></td></tr></table></figure>\n<p>###5. 系统优化：<a href=\"http://ubuntu-tweak.com/\">Ubuntu Tweak</a></p>\n<ul>\n<li><p>国人TualatriX开发的ubuntu平台下的优化大师，简单易用</p>\n</li>\n<li><p>可以设置字体/清理垃圾/查看软件</p>\n</li>\n</ul>\n<p>###6. 下拉式终端：「<a href=\"https://github.com/Guake/guake/\">Guake Terminal</a>」</p>\n<ul>\n<li><code>sudo apt-get build-dep guake</code></li>\n</ul>\n<p>##界面美化/优化 </p>\n<p>###1. 鼠标指针闪烁</p>\n<ul>\n<li><a href=\"http://jingyan.baidu.com/article/3aed632e78668970108091c0.html\">关闭 “未知显示器”</a></li>\n</ul>\n<p>###2. 在当前目录打开terminal</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install nautilus-open-terminal</div><div class=\"line\"><span class=\"comment\">#reload dir</span></div><div class=\"line\">nautilus -q</div></pre></td></tr></table></figure>\n<p>###3. 字体/语言</p>\n<ul>\n<li><p>系统语言使用English，默认字体看起来就很舒服</p>\n</li>\n<li><p>浏览器中的字体实在太难看，下载<a href=\"http://www.baidu.com/s?&amp;wd=微软雅黑字体\">微软雅黑字体</a> -&gt; 在浏览器中选择相应字体+chrome扩展</p>\n</li>\n</ul>\n<p>###4. 使用开源字体库文泉驿的微黑字体</p>\n<p>1) 安装文泉驿微黑字体库</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install ttf-wqy-microhei</div></pre></td></tr></table></figure>\n<p>2) 下载安装<a href=\"http://ubuntu-tweak.com/\">Ubuntu Tweak</a></p>\n<p>原系统设置中没有找到修改字体的地方，使用Ubuntu Tweak：调整－&gt;字库中，将默认字体、桌面字体等做修改</p>\n<p><img src=\"/public/img/tech/tweak.png\" alt=\"set-tweak\"></p>\n<p>3) 进一步确认并修改字体配置文件</p>\n<blockquote>\n<ul>\n<li>通常Ubuntu的字体文件存放在/usr/share/fonts下面，字体配置配置文件放在/etc/fonts下面</li>\n<li>Ubuntu 对中文字体的控制集中在一个文件/etc/fonts/conf.d/69-language-selector-zh-cn.conf</li>\n<li>编辑文件：<code>sudo gedit /etc/fonts/conf.d/69-language-selector-zh-cn.conf</code></li>\n</ul>\n</blockquote>\n<p>修改如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\"?&gt;</div><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE fontconfig SYSTEM \"fonts.dtd\"&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fontconfig</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lang\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>zh-cn<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"strong\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>WenQuanYi Micro Hei<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing HK<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL New Sung<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>WenQuanYi Bitmap Song<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UKai CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL ZenKai Uni<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>HYSong<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>sans-serif<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lang\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>zh-cn<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"strong\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>WenQuanYi Micro Hei<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Droid Sans Fallback<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>HYSong<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing HK<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL New Sung<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UKai CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL ZenKai Uni<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span> </div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">match</span> <span class=\"attr\">target</span>=<span class=\"string\">\"pattern\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">qual</span>=<span class=\"string\">\"any\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>monospace<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">test</span> <span class=\"attr\">name</span>=<span class=\"string\">\"lang\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>zh-cn<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">test</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">edit</span> <span class=\"attr\">name</span>=<span class=\"string\">\"family\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"prepend\"</span> <span class=\"attr\">binding</span>=<span class=\"string\">\"strong\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>WenQuanYi Micro Hei Mono<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>Droid Sans Fallback<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>HYSong<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UMing HK<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL New Sung<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL UKai CN<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>AR PL ZenKai Uni<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">edit</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">match</span>&gt;</span> </div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">fontconfig</span>&gt;</span></div></pre></td></tr></table></figure>"},{"layout":"post","title":"配置Python开发环境和Sublime Text 3编辑器","published":1,"_content":"\n##配置Python环境\n\n###1. 安装pip\n \n> pip 是 Python 的包管理工具，建议 Python 的包都用 pip 进行管理。\n\n```sh\n# 安装 pip\n$ sudo apt-get install python-pip\n#安装python包\n$ pip install [ ]\n#升级python包\n$ pip install --upgrade [ ]\n#卸载python包\n$ pip uninstall [ ]\n```\n\n\n###2. 构建虚拟环境\n\n> virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够：\n\n* 在没有权限的情况下安装新套件\n\n* 不同应用可以使用不同的套件版本\n\n* 套件升级不影响其他应用\n\n- 安装Virtualenv和Virtualenvwrapper\n\n> Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：\n\n* 将所有虚拟环境整合在一个目录下\n\n* 管理（新增，删除，复制）虚拟环境 \n\n* 切换虚拟环境\n\n\n1) **安装virtualenv和virtualenvwrapper**\n\n```sh\n$ sudo apt-get install python-virtualenv\n$ virtualenv --version\n1.11.6\n$ sudo pip install virtualenvwrapper  \n\n```\n\n2) **设置环境**\n\n```sh\n#创建目录用来存放虚拟环境\n$ mkdir $HOME/.virtualenvs\n#在~/.bashrc中添加： \n$ nano ~/.bashrc\nexport WORKON_HOME=$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n#重载环境\n$ source ~/.bashrc\n```\n\n3) **使用方法**\n\n> 默认情况下，虚拟环境会依赖系统环境中的site packages，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数 --no-site-packages建立虚拟环境`virtualenv --no-site-packages [虚拟环境名称]`\n\n```sh\n#列出虚拟环境列表\n$ workon\n#或者\n$ lsvirtualenv\n#新建虚拟环境\n$ mkvirtualenv testENV\nNew python executable in testENV/bin/python\nInstalling setuptools, pip...lsdone.\n#列出虚拟环境列表\n(testENV)llgreen@Work-PC:~$ lsvirtualenv\ntestENV\n=======\n#启动/切换虚拟环境\n$ workon [虚拟环境名称]\n#删除虚拟环境\n$ rmvirtualenv [虚拟环境名称]\n#离开虚拟环境\n(testENV)llgreen@Work-PC:~$ deactivate\n```\n\n##Sublime Text 3的安装与配置\n\n[官网下载](http://www.sublimetext.com/3)\n\n###1. 安装插件\n\n1) 首先安装[Package Control](https://sublime.wbond.net/installation#st3)，通过Package Control可以很方便安装其他插件\n\n> - 通过快捷键 ctrl+` 或者 View > Show Console 菜单打开控制台\n\n> - 粘贴对应版本的代码后回车安装\n\n```python\n#适用于 Sublime Text 3：\nimport urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n2) 按快捷键Ctrl+Shift+P调出命令窗口，选择Package Control: Install Package，安装 Python 开发常用的插件：\n\n>Sublime 有一个非常丰富的插件系统。而我当前使用的插件如下：\n \n* Color Scheme - Tomorrow Night Color schemes 决定了编辑器界面语法高亮的字体颜色。这是一个非常酷的暗黑系样式。\n \n* Theme  - Soda Dark Themes 影响 Sublime 界面元素的颜色和风格。这个非常适合 Tomorrow Night 的配色方案。 \n\n* All  Autocomplete Sublime 默认的自动完成只关注当前文件的单词。这个插件扩展了其自动完成的单词列表到所有打开的文件。 \n\n* SublimeCodeIntel  为部分语言增强自动完成功能，包括了 Python 。这个插件同时也可以让你跳转到符号定义的地方，通过按住 alt 并点击符号。非常方便。\n \n* SublimeTmpl  这个插件允许用户定义文件的模板，比如在写一个html文件时，老是重复文件头的一些引入信息很繁琐，可以定义一个模板直接生成必须的信息，具体的SublimeTmpl插件用法请自行百度。\n\n* SideBarEnhancements  一个增强侧边栏文件夹浏览功能的插件，比较不错。\n\n* SublimeREPL  允许你在编辑界面直接运行 Python 解释器。我倾向于在单独的终端窗口用 bpython 来运行，但有时 SublimeREPL 是很有帮助的。 \n\n* GitGutter  在编辑器的凹槽区，依照 Git ，增加小图标来标识一行是否被插入、修改或删除。在 GitGutter 的 readme 中有说明如何更改颜色图标来更新你的配色方案文件。 \n\n* Pylinter  这个插件提供了目前我所见到的最好的 pylint 编辑器整合。它自动检查 .py 文件，无论其何时被保存，并且会直接在编辑界面显示 pylint 违规。它还有一个快捷方式来禁用局部的 pylint 检查，通过插入一个 #pylint: 禁用注释。这个插件对于我确实非常有用。 \n\n* SublimeLinter 是用来在写代码时做代码检查的，可以检查Python代码是否符合PEP8的要求。\n\n* Tag  可以为web开发者提供html和css标签，很方便快捷，对于web前端设计者非常实用。\n\n3) 自动安装插件\n\n> 修改配置文件Preferences->Package Settings->Package Control->Settings-User如下，保存以后，选择Package Control->Install Package，将会自动下载。\n\n\n```json\n{\n\t\"installed_packages\":\n\t[\n\t\t\"Terminal\",\n\t\t\"Alignment\",\n\t\t\"BracketHighlighter\",\n\t\t\"SublimeLinter\",\n\t\t\"ColorPicker\",\n\t\t\"CompactExpandCss\",\n\t\t\"CSScomb JS\",\n\t\t\"Emmet Css Snippets\",\n\t\t\"Hex-to-RGBA\",\n\t\t\"HTML5\",\n\t\t\"JsFormat\",\n\t\t\"Package Control\",\n\t\t\"Rails Developer Snippets\",\n\t\t\"Ruby on Rails snippets\",\n\t\t\"RubyTest\",\n\t\t\"SublimeTmpl\",\n\t\t\"Tag\",\n\t\t\"Tradsim\"\n\t]\n}\n```\n\n###2. 修改快捷键\n\n> SublimeREPL安装之后没有快捷键，每次运行程序必须用鼠标去点工具栏，有些不爽。\n\n1) **SublimeREPL插件的菜单命令**\n\nPreferences => Browser Packages…打开插件安装包位置，依次找到 SublimeREPL\\config\\Python文件夹下的Main.sublime-menu并打开。\n\n该文件即是插件菜单的结构及相关参数，从中找到运行Python文件的菜单项的部分：\n\n```json\n    {\"command\": \"repl_open\",\n     \"caption\": \"Python - RUN current file\",\n     \"id\": \"repl_python_run\",\n     \"mnemonic\": \"d\",\n     \"args\": {\n        \"type\": \"subprocess\",\n        \"encoding\": \"utf8\",\n        \"cmd\": [\"python\", \"-u\", \"$file_basename\"],\n        \"cwd\": \"$file_path\",\n        \"syntax\": \"Packages/Python/Python.tmLanguage\",\n        \"external_id\": \"python\",\n        \"extend_env\": {\"PYTHONIOENCODING\": \"utf-8\"}\n        }\n    },\n```\n\n其中id的值是我们需要的，因为我们正是要为其添加快捷键。另外，菜单文件的位置也是需要先记下的，因为需要为这个命令指定定义的来源。\n\n2) **自定义快捷键**\n\nPreferences => Key Boundings-User打开自定义快捷键文件，写入如下内容：\n\n```json\n[\n\t{\n\t\t\"keys\" : [\"f5\"],                           // 快捷键，注意小写\n\t\t\"command\" : \"run_existing_window_command\", // 运行定义的命令\n\t\t\"args\" :                                   // 命令参数\n\t\t{\n\t\t\t\"id\" : \"repl_python_run\",              // 上一步查看的命令的id\n\t\t\t\"file\" : \"config/Python/Main.sublime-menu\" // 菜单定义文件位置\n\t\t}\n\n\t}\n]\n```\n\n###3. 修改视图\n\n- 选择查看--布局--行：2 或者 Shift+Alt+8\n\n将Sublime分割为上下两部分，选择F5进行代码编译，编译信息将会显示在下面的编译区域。\n\n###4. 编辑器快捷键汇总\n\nCtrl+Shift+P：打开命令面板\n\nCtrl+P：搜索项目中的文件\n\nCtrl+G：跳转到第几行\n\nCtrl+W：关闭当前打开文件\n\nCtrl+Shift+W：关闭所有打开文件\n\nCtrl+Shift+V：粘贴并格式化\n\nCtrl+D：选择单词，重复可增加选择下一个相同的单词\n\nCtrl+L：选择行，重复可依次增加选择下一行\n\nCtrl+Shift+L：选择多行\n\nCtrl+Shift+Enter：在当前行前插入新行\n\nCtrl+X：删除当前行\n\nCtrl+M：跳转到对应括号\n\nCtrl+U：软撤销，撤销光标位置\n\nCtrl+J：选择标签内容\n\nCtrl+F：查找内容\n\nCtrl+Shift+F：查找并替换\n\nCtrl+H：替换\n\nCtrl+R：前往 method\n\nCtrl+N：新建窗口\n\nCtrl+K+B：开关侧栏\n\nCtrl+Shift+M：选中当前括号内容，重复可选着括号本身\n\nCtrl+F2：设置/删除标记\n\nCtrl+/：注释当前行\n\nCtrl+Shift+/：当前位置插入注释\n\nCtrl+Alt+/：块注释，并Focus到首行，写注释说明用的\n\nCtrl+Shift+A：选择当前标签前后，修改标签用的\n\nF11：全屏\n\nShift+F11：全屏免打扰模式，只编辑当前文件\n\nAlt+F3：选择所有相同的词\n\nAlt+.：闭合标签\n\nAlt+Shift+数字：分屏显示\n\nAlt+数字：切换打开第N个文件\n\nShift+右键拖动：光标多不，用来更改或插入列内容\n\n鼠标的前进后退键可切换Tab文件\n\n按Ctrl，依次点击或选取，可需要编辑的多个位置\n\n按Ctrl+Shift+上下键，可替换行\n","source":"_posts/技术/2014-09-26-setting-sublime-for-python.md","raw":"---\nlayout: post\ntitle: \"配置Python开发环境和Sublime Text 3编辑器\"\ncategory: 技术\ntags: [Ubuntu, Sublime, Python]\npublished: true\n---\n\n##配置Python环境\n\n###1. 安装pip\n \n> pip 是 Python 的包管理工具，建议 Python 的包都用 pip 进行管理。\n\n```sh\n# 安装 pip\n$ sudo apt-get install python-pip\n#安装python包\n$ pip install [ ]\n#升级python包\n$ pip install --upgrade [ ]\n#卸载python包\n$ pip uninstall [ ]\n```\n\n\n###2. 构建虚拟环境\n\n> virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够：\n\n* 在没有权限的情况下安装新套件\n\n* 不同应用可以使用不同的套件版本\n\n* 套件升级不影响其他应用\n\n- 安装Virtualenv和Virtualenvwrapper\n\n> Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：\n\n* 将所有虚拟环境整合在一个目录下\n\n* 管理（新增，删除，复制）虚拟环境 \n\n* 切换虚拟环境\n\n\n1) **安装virtualenv和virtualenvwrapper**\n\n```sh\n$ sudo apt-get install python-virtualenv\n$ virtualenv --version\n1.11.6\n$ sudo pip install virtualenvwrapper  \n\n```\n\n2) **设置环境**\n\n```sh\n#创建目录用来存放虚拟环境\n$ mkdir $HOME/.virtualenvs\n#在~/.bashrc中添加： \n$ nano ~/.bashrc\nexport WORKON_HOME=$HOME/.virtualenvs\nsource /usr/local/bin/virtualenvwrapper.sh\n#重载环境\n$ source ~/.bashrc\n```\n\n3) **使用方法**\n\n> 默认情况下，虚拟环境会依赖系统环境中的site packages，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数 --no-site-packages建立虚拟环境`virtualenv --no-site-packages [虚拟环境名称]`\n\n```sh\n#列出虚拟环境列表\n$ workon\n#或者\n$ lsvirtualenv\n#新建虚拟环境\n$ mkvirtualenv testENV\nNew python executable in testENV/bin/python\nInstalling setuptools, pip...lsdone.\n#列出虚拟环境列表\n(testENV)llgreen@Work-PC:~$ lsvirtualenv\ntestENV\n=======\n#启动/切换虚拟环境\n$ workon [虚拟环境名称]\n#删除虚拟环境\n$ rmvirtualenv [虚拟环境名称]\n#离开虚拟环境\n(testENV)llgreen@Work-PC:~$ deactivate\n```\n\n##Sublime Text 3的安装与配置\n\n[官网下载](http://www.sublimetext.com/3)\n\n###1. 安装插件\n\n1) 首先安装[Package Control](https://sublime.wbond.net/installation#st3)，通过Package Control可以很方便安装其他插件\n\n> - 通过快捷键 ctrl+` 或者 View > Show Console 菜单打开控制台\n\n> - 粘贴对应版本的代码后回车安装\n\n```python\n#适用于 Sublime Text 3：\nimport urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)\n```\n\n2) 按快捷键Ctrl+Shift+P调出命令窗口，选择Package Control: Install Package，安装 Python 开发常用的插件：\n\n>Sublime 有一个非常丰富的插件系统。而我当前使用的插件如下：\n \n* Color Scheme - Tomorrow Night Color schemes 决定了编辑器界面语法高亮的字体颜色。这是一个非常酷的暗黑系样式。\n \n* Theme  - Soda Dark Themes 影响 Sublime 界面元素的颜色和风格。这个非常适合 Tomorrow Night 的配色方案。 \n\n* All  Autocomplete Sublime 默认的自动完成只关注当前文件的单词。这个插件扩展了其自动完成的单词列表到所有打开的文件。 \n\n* SublimeCodeIntel  为部分语言增强自动完成功能，包括了 Python 。这个插件同时也可以让你跳转到符号定义的地方，通过按住 alt 并点击符号。非常方便。\n \n* SublimeTmpl  这个插件允许用户定义文件的模板，比如在写一个html文件时，老是重复文件头的一些引入信息很繁琐，可以定义一个模板直接生成必须的信息，具体的SublimeTmpl插件用法请自行百度。\n\n* SideBarEnhancements  一个增强侧边栏文件夹浏览功能的插件，比较不错。\n\n* SublimeREPL  允许你在编辑界面直接运行 Python 解释器。我倾向于在单独的终端窗口用 bpython 来运行，但有时 SublimeREPL 是很有帮助的。 \n\n* GitGutter  在编辑器的凹槽区，依照 Git ，增加小图标来标识一行是否被插入、修改或删除。在 GitGutter 的 readme 中有说明如何更改颜色图标来更新你的配色方案文件。 \n\n* Pylinter  这个插件提供了目前我所见到的最好的 pylint 编辑器整合。它自动检查 .py 文件，无论其何时被保存，并且会直接在编辑界面显示 pylint 违规。它还有一个快捷方式来禁用局部的 pylint 检查，通过插入一个 #pylint: 禁用注释。这个插件对于我确实非常有用。 \n\n* SublimeLinter 是用来在写代码时做代码检查的，可以检查Python代码是否符合PEP8的要求。\n\n* Tag  可以为web开发者提供html和css标签，很方便快捷，对于web前端设计者非常实用。\n\n3) 自动安装插件\n\n> 修改配置文件Preferences->Package Settings->Package Control->Settings-User如下，保存以后，选择Package Control->Install Package，将会自动下载。\n\n\n```json\n{\n\t\"installed_packages\":\n\t[\n\t\t\"Terminal\",\n\t\t\"Alignment\",\n\t\t\"BracketHighlighter\",\n\t\t\"SublimeLinter\",\n\t\t\"ColorPicker\",\n\t\t\"CompactExpandCss\",\n\t\t\"CSScomb JS\",\n\t\t\"Emmet Css Snippets\",\n\t\t\"Hex-to-RGBA\",\n\t\t\"HTML5\",\n\t\t\"JsFormat\",\n\t\t\"Package Control\",\n\t\t\"Rails Developer Snippets\",\n\t\t\"Ruby on Rails snippets\",\n\t\t\"RubyTest\",\n\t\t\"SublimeTmpl\",\n\t\t\"Tag\",\n\t\t\"Tradsim\"\n\t]\n}\n```\n\n###2. 修改快捷键\n\n> SublimeREPL安装之后没有快捷键，每次运行程序必须用鼠标去点工具栏，有些不爽。\n\n1) **SublimeREPL插件的菜单命令**\n\nPreferences => Browser Packages…打开插件安装包位置，依次找到 SublimeREPL\\config\\Python文件夹下的Main.sublime-menu并打开。\n\n该文件即是插件菜单的结构及相关参数，从中找到运行Python文件的菜单项的部分：\n\n```json\n    {\"command\": \"repl_open\",\n     \"caption\": \"Python - RUN current file\",\n     \"id\": \"repl_python_run\",\n     \"mnemonic\": \"d\",\n     \"args\": {\n        \"type\": \"subprocess\",\n        \"encoding\": \"utf8\",\n        \"cmd\": [\"python\", \"-u\", \"$file_basename\"],\n        \"cwd\": \"$file_path\",\n        \"syntax\": \"Packages/Python/Python.tmLanguage\",\n        \"external_id\": \"python\",\n        \"extend_env\": {\"PYTHONIOENCODING\": \"utf-8\"}\n        }\n    },\n```\n\n其中id的值是我们需要的，因为我们正是要为其添加快捷键。另外，菜单文件的位置也是需要先记下的，因为需要为这个命令指定定义的来源。\n\n2) **自定义快捷键**\n\nPreferences => Key Boundings-User打开自定义快捷键文件，写入如下内容：\n\n```json\n[\n\t{\n\t\t\"keys\" : [\"f5\"],                           // 快捷键，注意小写\n\t\t\"command\" : \"run_existing_window_command\", // 运行定义的命令\n\t\t\"args\" :                                   // 命令参数\n\t\t{\n\t\t\t\"id\" : \"repl_python_run\",              // 上一步查看的命令的id\n\t\t\t\"file\" : \"config/Python/Main.sublime-menu\" // 菜单定义文件位置\n\t\t}\n\n\t}\n]\n```\n\n###3. 修改视图\n\n- 选择查看--布局--行：2 或者 Shift+Alt+8\n\n将Sublime分割为上下两部分，选择F5进行代码编译，编译信息将会显示在下面的编译区域。\n\n###4. 编辑器快捷键汇总\n\nCtrl+Shift+P：打开命令面板\n\nCtrl+P：搜索项目中的文件\n\nCtrl+G：跳转到第几行\n\nCtrl+W：关闭当前打开文件\n\nCtrl+Shift+W：关闭所有打开文件\n\nCtrl+Shift+V：粘贴并格式化\n\nCtrl+D：选择单词，重复可增加选择下一个相同的单词\n\nCtrl+L：选择行，重复可依次增加选择下一行\n\nCtrl+Shift+L：选择多行\n\nCtrl+Shift+Enter：在当前行前插入新行\n\nCtrl+X：删除当前行\n\nCtrl+M：跳转到对应括号\n\nCtrl+U：软撤销，撤销光标位置\n\nCtrl+J：选择标签内容\n\nCtrl+F：查找内容\n\nCtrl+Shift+F：查找并替换\n\nCtrl+H：替换\n\nCtrl+R：前往 method\n\nCtrl+N：新建窗口\n\nCtrl+K+B：开关侧栏\n\nCtrl+Shift+M：选中当前括号内容，重复可选着括号本身\n\nCtrl+F2：设置/删除标记\n\nCtrl+/：注释当前行\n\nCtrl+Shift+/：当前位置插入注释\n\nCtrl+Alt+/：块注释，并Focus到首行，写注释说明用的\n\nCtrl+Shift+A：选择当前标签前后，修改标签用的\n\nF11：全屏\n\nShift+F11：全屏免打扰模式，只编辑当前文件\n\nAlt+F3：选择所有相同的词\n\nAlt+.：闭合标签\n\nAlt+Shift+数字：分屏显示\n\nAlt+数字：切换打开第N个文件\n\nShift+右键拖动：光标多不，用来更改或插入列内容\n\n鼠标的前进后退键可切换Tab文件\n\n按Ctrl，依次点击或选取，可需要编辑的多个位置\n\n按Ctrl+Shift+上下键，可替换行\n","slug":"技术-2014-09-26-setting-sublime-for-python","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97np0010tz3a826u2gf7","content":"<p>##配置Python环境</p>\n<p>###1. 安装pip</p>\n<blockquote>\n<p>pip 是 Python 的包管理工具，建议 Python 的包都用 pip 进行管理。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装 pip</span></div><div class=\"line\">$ sudo apt-get install python-pip</div><div class=\"line\"><span class=\"comment\">#安装python包</span></div><div class=\"line\">$ pip install [ ]</div><div class=\"line\"><span class=\"comment\">#升级python包</span></div><div class=\"line\">$ pip install --upgrade [ ]</div><div class=\"line\"><span class=\"comment\">#卸载python包</span></div><div class=\"line\">$ pip uninstall [ ]</div></pre></td></tr></table></figure>\n<p>###2. 构建虚拟环境</p>\n<blockquote>\n<p>virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够：</p>\n</blockquote>\n<ul>\n<li><p>在没有权限的情况下安装新套件</p>\n</li>\n<li><p>不同应用可以使用不同的套件版本</p>\n</li>\n<li><p>套件升级不影响其他应用</p>\n</li>\n</ul>\n<ul>\n<li>安装Virtualenv和Virtualenvwrapper</li>\n</ul>\n<blockquote>\n<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p>\n</blockquote>\n<ul>\n<li><p>将所有虚拟环境整合在一个目录下</p>\n</li>\n<li><p>管理（新增，删除，复制）虚拟环境 </p>\n</li>\n<li><p>切换虚拟环境</p>\n</li>\n</ul>\n<p>1) <strong>安装virtualenv和virtualenvwrapper</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install python-virtualenv</div><div class=\"line\">$ virtualenv --version</div><div class=\"line\">1.11.6</div><div class=\"line\">$ sudo pip install virtualenvwrapper</div></pre></td></tr></table></figure>\n<p>2) <strong>设置环境</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#创建目录用来存放虚拟环境</span></div><div class=\"line\">$ mkdir <span class=\"variable\">$HOME</span>/.virtualenvs</div><div class=\"line\"><span class=\"comment\">#在~/.bashrc中添加： </span></div><div class=\"line\">$ nano ~/.bashrc</div><div class=\"line\"><span class=\"built_in\">export</span> WORKON_HOME=<span class=\"variable\">$HOME</span>/.virtualenvs</div><div class=\"line\"><span class=\"built_in\">source</span> /usr/<span class=\"built_in\">local</span>/bin/virtualenvwrapper.sh</div><div class=\"line\"><span class=\"comment\">#重载环境</span></div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</div></pre></td></tr></table></figure>\n<p>3) <strong>使用方法</strong></p>\n<blockquote>\n<p>默认情况下，虚拟环境会依赖系统环境中的site packages，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数 –no-site-packages建立虚拟环境<code>virtualenv --no-site-packages [虚拟环境名称]</code></p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#列出虚拟环境列表</span></div><div class=\"line\">$ workon</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\">$ lsvirtualenv</div><div class=\"line\"><span class=\"comment\">#新建虚拟环境</span></div><div class=\"line\">$ mkvirtualenv <span class=\"built_in\">test</span>ENV</div><div class=\"line\">New python executable <span class=\"keyword\">in</span> <span class=\"built_in\">test</span>ENV/bin/python</div><div class=\"line\">Installing setuptools, pip...lsdone.</div><div class=\"line\"><span class=\"comment\">#列出虚拟环境列表</span></div><div class=\"line\">(<span class=\"built_in\">test</span>ENV)llgreen@Work-PC:~$ lsvirtualenv</div><div class=\"line\"><span class=\"built_in\">test</span>ENV</div><div class=\"line\">=======</div><div class=\"line\"><span class=\"comment\">#启动/切换虚拟环境</span></div><div class=\"line\">$ workon [虚拟环境名称]</div><div class=\"line\"><span class=\"comment\">#删除虚拟环境</span></div><div class=\"line\">$ rmvirtualenv [虚拟环境名称]</div><div class=\"line\"><span class=\"comment\">#离开虚拟环境</span></div><div class=\"line\">(<span class=\"built_in\">test</span>ENV)llgreen@Work-PC:~$ deactivate</div></pre></td></tr></table></figure>\n<p>##Sublime Text 3的安装与配置</p>\n<p><a href=\"http://www.sublimetext.com/3\" target=\"_blank\" rel=\"external\">官网下载</a></p>\n<p>###1. 安装插件</p>\n<p>1) 首先安装<a href=\"https://sublime.wbond.net/installation#st3\" target=\"_blank\" rel=\"external\">Package Control</a>，通过Package Control可以很方便安装其他插件</p>\n<blockquote>\n<ul>\n<li><p>通过快捷键 ctrl+` 或者 View &gt; Show Console 菜单打开控制台</p>\n</li>\n<li><p>粘贴对应版本的代码后回车安装</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#适用于 Sublime Text 3：</span></div><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'7183a2d3e96f11eeadd761d777e62404'</span> + <span class=\"string\">'e330c659d4bb41d3bdf022e94cab3cd0'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://sublime.wbond.net/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure>\n<p>2) 按快捷键Ctrl+Shift+P调出命令窗口，选择Package Control: Install Package，安装 Python 开发常用的插件：</p>\n<blockquote>\n<p>Sublime 有一个非常丰富的插件系统。而我当前使用的插件如下：</p>\n</blockquote>\n<ul>\n<li><p>Color Scheme - Tomorrow Night Color schemes 决定了编辑器界面语法高亮的字体颜色。这是一个非常酷的暗黑系样式。</p>\n</li>\n<li><p>Theme  - Soda Dark Themes 影响 Sublime 界面元素的颜色和风格。这个非常适合 Tomorrow Night 的配色方案。 </p>\n</li>\n<li><p>All  Autocomplete Sublime 默认的自动完成只关注当前文件的单词。这个插件扩展了其自动完成的单词列表到所有打开的文件。 </p>\n</li>\n<li><p>SublimeCodeIntel  为部分语言增强自动完成功能，包括了 Python 。这个插件同时也可以让你跳转到符号定义的地方，通过按住 alt 并点击符号。非常方便。</p>\n</li>\n<li><p>SublimeTmpl  这个插件允许用户定义文件的模板，比如在写一个html文件时，老是重复文件头的一些引入信息很繁琐，可以定义一个模板直接生成必须的信息，具体的SublimeTmpl插件用法请自行百度。</p>\n</li>\n<li><p>SideBarEnhancements  一个增强侧边栏文件夹浏览功能的插件，比较不错。</p>\n</li>\n<li><p>SublimeREPL  允许你在编辑界面直接运行 Python 解释器。我倾向于在单独的终端窗口用 bpython 来运行，但有时 SublimeREPL 是很有帮助的。 </p>\n</li>\n<li><p>GitGutter  在编辑器的凹槽区，依照 Git ，增加小图标来标识一行是否被插入、修改或删除。在 GitGutter 的 readme 中有说明如何更改颜色图标来更新你的配色方案文件。 </p>\n</li>\n<li><p>Pylinter  这个插件提供了目前我所见到的最好的 pylint 编辑器整合。它自动检查 .py 文件，无论其何时被保存，并且会直接在编辑界面显示 pylint 违规。它还有一个快捷方式来禁用局部的 pylint 检查，通过插入一个 #pylint: 禁用注释。这个插件对于我确实非常有用。 </p>\n</li>\n<li><p>SublimeLinter 是用来在写代码时做代码检查的，可以检查Python代码是否符合PEP8的要求。</p>\n</li>\n<li><p>Tag  可以为web开发者提供html和css标签，很方便快捷，对于web前端设计者非常实用。</p>\n</li>\n</ul>\n<p>3) 自动安装插件</p>\n<blockquote>\n<p>修改配置文件Preferences-&gt;Package Settings-&gt;Package Control-&gt;Settings-User如下，保存以后，选择Package Control-&gt;Install Package，将会自动下载。</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"installed_packages\"</span>:</div><div class=\"line\">\t[</div><div class=\"line\">\t\t<span class=\"string\">\"Terminal\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Alignment\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"BracketHighlighter\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"SublimeLinter\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"ColorPicker\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"CompactExpandCss\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"CSScomb JS\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Emmet Css Snippets\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Hex-to-RGBA\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"HTML5\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"JsFormat\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Package Control\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Rails Developer Snippets\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Ruby on Rails snippets\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"RubyTest\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"SublimeTmpl\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Tag\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Tradsim\"</span></div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###2. 修改快捷键</p>\n<blockquote>\n<p>SublimeREPL安装之后没有快捷键，每次运行程序必须用鼠标去点工具栏，有些不爽。</p>\n</blockquote>\n<p>1) <strong>SublimeREPL插件的菜单命令</strong></p>\n<p>Preferences =&gt; Browser Packages…打开插件安装包位置，依次找到 SublimeREPL\\config\\Python文件夹下的Main.sublime-menu并打开。</p>\n<p>该文件即是插件菜单的结构及相关参数，从中找到运行Python文件的菜单项的部分：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;\"command\": \"repl_open\",</div><div class=\"line\"> \"caption\": \"Python - RUN current file\",</div><div class=\"line\"> \"id\": \"repl_python_run\",</div><div class=\"line\"> \"mnemonic\": \"d\",</div><div class=\"line\"> \"args\": &#123;</div><div class=\"line\">    \"type\": \"subprocess\",</div><div class=\"line\">    \"encoding\": \"utf8\",</div><div class=\"line\">    \"cmd\": [\"python\", \"-u\", \"$file_basename\"],</div><div class=\"line\">    \"cwd\": \"$file_path\",</div><div class=\"line\">    \"syntax\": \"Packages/Python/Python.tmLanguage\",</div><div class=\"line\">    \"external_id\": \"python\",</div><div class=\"line\">    \"extend_env\": &#123;\"PYTHONIOENCODING\": \"utf-8\"&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>其中id的值是我们需要的，因为我们正是要为其添加快捷键。另外，菜单文件的位置也是需要先记下的，因为需要为这个命令指定定义的来源。</p>\n<p>2) <strong>自定义快捷键</strong></p>\n<p>Preferences =&gt; Key Boundings-User打开自定义快捷键文件，写入如下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t\"keys\" : [\"f5\"],                           // 快捷键，注意小写</div><div class=\"line\">\t\t\"command\" : \"run_existing_window_command\", // 运行定义的命令</div><div class=\"line\">\t\t\"args\" :                                   // 命令参数</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t\"id\" : \"repl_python_run\",              // 上一步查看的命令的id</div><div class=\"line\">\t\t\t\"file\" : \"config/Python/Main.sublime-menu\" // 菜单定义文件位置</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>###3. 修改视图</p>\n<ul>\n<li>选择查看–布局–行：2 或者 Shift+Alt+8</li>\n</ul>\n<p>将Sublime分割为上下两部分，选择F5进行代码编译，编译信息将会显示在下面的编译区域。</p>\n<p>###4. 编辑器快捷键汇总</p>\n<p>Ctrl+Shift+P：打开命令面板</p>\n<p>Ctrl+P：搜索项目中的文件</p>\n<p>Ctrl+G：跳转到第几行</p>\n<p>Ctrl+W：关闭当前打开文件</p>\n<p>Ctrl+Shift+W：关闭所有打开文件</p>\n<p>Ctrl+Shift+V：粘贴并格式化</p>\n<p>Ctrl+D：选择单词，重复可增加选择下一个相同的单词</p>\n<p>Ctrl+L：选择行，重复可依次增加选择下一行</p>\n<p>Ctrl+Shift+L：选择多行</p>\n<p>Ctrl+Shift+Enter：在当前行前插入新行</p>\n<p>Ctrl+X：删除当前行</p>\n<p>Ctrl+M：跳转到对应括号</p>\n<p>Ctrl+U：软撤销，撤销光标位置</p>\n<p>Ctrl+J：选择标签内容</p>\n<p>Ctrl+F：查找内容</p>\n<p>Ctrl+Shift+F：查找并替换</p>\n<p>Ctrl+H：替换</p>\n<p>Ctrl+R：前往 method</p>\n<p>Ctrl+N：新建窗口</p>\n<p>Ctrl+K+B：开关侧栏</p>\n<p>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</p>\n<p>Ctrl+F2：设置/删除标记</p>\n<p>Ctrl+/：注释当前行</p>\n<p>Ctrl+Shift+/：当前位置插入注释</p>\n<p>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的</p>\n<p>Ctrl+Shift+A：选择当前标签前后，修改标签用的</p>\n<p>F11：全屏</p>\n<p>Shift+F11：全屏免打扰模式，只编辑当前文件</p>\n<p>Alt+F3：选择所有相同的词</p>\n<p>Alt+.：闭合标签</p>\n<p>Alt+Shift+数字：分屏显示</p>\n<p>Alt+数字：切换打开第N个文件</p>\n<p>Shift+右键拖动：光标多不，用来更改或插入列内容</p>\n<p>鼠标的前进后退键可切换Tab文件</p>\n<p>按Ctrl，依次点击或选取，可需要编辑的多个位置</p>\n<p>按Ctrl+Shift+上下键，可替换行</p>\n","excerpt":"","more":"<p>##配置Python环境</p>\n<p>###1. 安装pip</p>\n<blockquote>\n<p>pip 是 Python 的包管理工具，建议 Python 的包都用 pip 进行管理。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装 pip</span></div><div class=\"line\">$ sudo apt-get install python-pip</div><div class=\"line\"><span class=\"comment\">#安装python包</span></div><div class=\"line\">$ pip install [ ]</div><div class=\"line\"><span class=\"comment\">#升级python包</span></div><div class=\"line\">$ pip install --upgrade [ ]</div><div class=\"line\"><span class=\"comment\">#卸载python包</span></div><div class=\"line\">$ pip uninstall [ ]</div></pre></td></tr></table></figure>\n<p>###2. 构建虚拟环境</p>\n<blockquote>\n<p>virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够：</p>\n</blockquote>\n<ul>\n<li><p>在没有权限的情况下安装新套件</p>\n</li>\n<li><p>不同应用可以使用不同的套件版本</p>\n</li>\n<li><p>套件升级不影响其他应用</p>\n</li>\n</ul>\n<ul>\n<li>安装Virtualenv和Virtualenvwrapper</li>\n</ul>\n<blockquote>\n<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p>\n</blockquote>\n<ul>\n<li><p>将所有虚拟环境整合在一个目录下</p>\n</li>\n<li><p>管理（新增，删除，复制）虚拟环境 </p>\n</li>\n<li><p>切换虚拟环境</p>\n</li>\n</ul>\n<p>1) <strong>安装virtualenv和virtualenvwrapper</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install python-virtualenv</div><div class=\"line\">$ virtualenv --version</div><div class=\"line\">1.11.6</div><div class=\"line\">$ sudo pip install virtualenvwrapper</div></pre></td></tr></table></figure>\n<p>2) <strong>设置环境</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#创建目录用来存放虚拟环境</span></div><div class=\"line\">$ mkdir <span class=\"variable\">$HOME</span>/.virtualenvs</div><div class=\"line\"><span class=\"comment\">#在~/.bashrc中添加： </span></div><div class=\"line\">$ nano ~/.bashrc</div><div class=\"line\"><span class=\"built_in\">export</span> WORKON_HOME=<span class=\"variable\">$HOME</span>/.virtualenvs</div><div class=\"line\"><span class=\"built_in\">source</span> /usr/<span class=\"built_in\">local</span>/bin/virtualenvwrapper.sh</div><div class=\"line\"><span class=\"comment\">#重载环境</span></div><div class=\"line\">$ <span class=\"built_in\">source</span> ~/.bashrc</div></pre></td></tr></table></figure>\n<p>3) <strong>使用方法</strong></p>\n<blockquote>\n<p>默认情况下，虚拟环境会依赖系统环境中的site packages，就是说系统中已经安装好的第三方package也会安装在虚拟环境中，如果不想依赖这些package，那么可以加上参数 –no-site-packages建立虚拟环境<code>virtualenv --no-site-packages [虚拟环境名称]</code></p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#列出虚拟环境列表</span></div><div class=\"line\">$ workon</div><div class=\"line\"><span class=\"comment\">#或者</span></div><div class=\"line\">$ lsvirtualenv</div><div class=\"line\"><span class=\"comment\">#新建虚拟环境</span></div><div class=\"line\">$ mkvirtualenv <span class=\"built_in\">test</span>ENV</div><div class=\"line\">New python executable <span class=\"keyword\">in</span> <span class=\"built_in\">test</span>ENV/bin/python</div><div class=\"line\">Installing setuptools, pip...lsdone.</div><div class=\"line\"><span class=\"comment\">#列出虚拟环境列表</span></div><div class=\"line\">(<span class=\"built_in\">test</span>ENV)llgreen@Work-PC:~$ lsvirtualenv</div><div class=\"line\"><span class=\"built_in\">test</span>ENV</div><div class=\"line\">=======</div><div class=\"line\"><span class=\"comment\">#启动/切换虚拟环境</span></div><div class=\"line\">$ workon [虚拟环境名称]</div><div class=\"line\"><span class=\"comment\">#删除虚拟环境</span></div><div class=\"line\">$ rmvirtualenv [虚拟环境名称]</div><div class=\"line\"><span class=\"comment\">#离开虚拟环境</span></div><div class=\"line\">(<span class=\"built_in\">test</span>ENV)llgreen@Work-PC:~$ deactivate</div></pre></td></tr></table></figure>\n<p>##Sublime Text 3的安装与配置</p>\n<p><a href=\"http://www.sublimetext.com/3\">官网下载</a></p>\n<p>###1. 安装插件</p>\n<p>1) 首先安装<a href=\"https://sublime.wbond.net/installation#st3\">Package Control</a>，通过Package Control可以很方便安装其他插件</p>\n<blockquote>\n<ul>\n<li><p>通过快捷键 ctrl+` 或者 View &gt; Show Console 菜单打开控制台</p>\n</li>\n<li><p>粘贴对应版本的代码后回车安装</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#适用于 Sublime Text 3：</span></div><div class=\"line\"><span class=\"keyword\">import</span> urllib.request,os,hashlib; h = <span class=\"string\">'7183a2d3e96f11eeadd761d777e62404'</span> + <span class=\"string\">'e330c659d4bb41d3bdf022e94cab3cd0'</span>; pf = <span class=\"string\">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( <span class=\"string\">'http://sublime.wbond.net/'</span> + pf.replace(<span class=\"string\">' '</span>, <span class=\"string\">'%20'</span>)).read(); dh = hashlib.sha256(by).hexdigest(); print(<span class=\"string\">'Error validating download (got %s instead of %s), please try manual install'</span> % (dh, h)) <span class=\"keyword\">if</span> dh != h <span class=\"keyword\">else</span> open(os.path.join( ipp, pf), <span class=\"string\">'wb'</span> ).write(by)</div></pre></td></tr></table></figure>\n<p>2) 按快捷键Ctrl+Shift+P调出命令窗口，选择Package Control: Install Package，安装 Python 开发常用的插件：</p>\n<blockquote>\n<p>Sublime 有一个非常丰富的插件系统。而我当前使用的插件如下：</p>\n</blockquote>\n<ul>\n<li><p>Color Scheme - Tomorrow Night Color schemes 决定了编辑器界面语法高亮的字体颜色。这是一个非常酷的暗黑系样式。</p>\n</li>\n<li><p>Theme  - Soda Dark Themes 影响 Sublime 界面元素的颜色和风格。这个非常适合 Tomorrow Night 的配色方案。 </p>\n</li>\n<li><p>All  Autocomplete Sublime 默认的自动完成只关注当前文件的单词。这个插件扩展了其自动完成的单词列表到所有打开的文件。 </p>\n</li>\n<li><p>SublimeCodeIntel  为部分语言增强自动完成功能，包括了 Python 。这个插件同时也可以让你跳转到符号定义的地方，通过按住 alt 并点击符号。非常方便。</p>\n</li>\n<li><p>SublimeTmpl  这个插件允许用户定义文件的模板，比如在写一个html文件时，老是重复文件头的一些引入信息很繁琐，可以定义一个模板直接生成必须的信息，具体的SublimeTmpl插件用法请自行百度。</p>\n</li>\n<li><p>SideBarEnhancements  一个增强侧边栏文件夹浏览功能的插件，比较不错。</p>\n</li>\n<li><p>SublimeREPL  允许你在编辑界面直接运行 Python 解释器。我倾向于在单独的终端窗口用 bpython 来运行，但有时 SublimeREPL 是很有帮助的。 </p>\n</li>\n<li><p>GitGutter  在编辑器的凹槽区，依照 Git ，增加小图标来标识一行是否被插入、修改或删除。在 GitGutter 的 readme 中有说明如何更改颜色图标来更新你的配色方案文件。 </p>\n</li>\n<li><p>Pylinter  这个插件提供了目前我所见到的最好的 pylint 编辑器整合。它自动检查 .py 文件，无论其何时被保存，并且会直接在编辑界面显示 pylint 违规。它还有一个快捷方式来禁用局部的 pylint 检查，通过插入一个 #pylint: 禁用注释。这个插件对于我确实非常有用。 </p>\n</li>\n<li><p>SublimeLinter 是用来在写代码时做代码检查的，可以检查Python代码是否符合PEP8的要求。</p>\n</li>\n<li><p>Tag  可以为web开发者提供html和css标签，很方便快捷，对于web前端设计者非常实用。</p>\n</li>\n</ul>\n<p>3) 自动安装插件</p>\n<blockquote>\n<p>修改配置文件Preferences-&gt;Package Settings-&gt;Package Control-&gt;Settings-User如下，保存以后，选择Package Control-&gt;Install Package，将会自动下载。</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"attr\">\"installed_packages\"</span>:</div><div class=\"line\">\t[</div><div class=\"line\">\t\t<span class=\"string\">\"Terminal\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Alignment\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"BracketHighlighter\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"SublimeLinter\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"ColorPicker\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"CompactExpandCss\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"CSScomb JS\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Emmet Css Snippets\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Hex-to-RGBA\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"HTML5\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"JsFormat\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Package Control\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Rails Developer Snippets\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Ruby on Rails snippets\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"RubyTest\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"SublimeTmpl\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Tag\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"Tradsim\"</span></div><div class=\"line\">\t]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>###2. 修改快捷键</p>\n<blockquote>\n<p>SublimeREPL安装之后没有快捷键，每次运行程序必须用鼠标去点工具栏，有些不爽。</p>\n</blockquote>\n<p>1) <strong>SublimeREPL插件的菜单命令</strong></p>\n<p>Preferences =&gt; Browser Packages…打开插件安装包位置，依次找到 SublimeREPL\\config\\Python文件夹下的Main.sublime-menu并打开。</p>\n<p>该文件即是插件菜单的结构及相关参数，从中找到运行Python文件的菜单项的部分：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;\"command\": \"repl_open\",</div><div class=\"line\"> \"caption\": \"Python - RUN current file\",</div><div class=\"line\"> \"id\": \"repl_python_run\",</div><div class=\"line\"> \"mnemonic\": \"d\",</div><div class=\"line\"> \"args\": &#123;</div><div class=\"line\">    \"type\": \"subprocess\",</div><div class=\"line\">    \"encoding\": \"utf8\",</div><div class=\"line\">    \"cmd\": [\"python\", \"-u\", \"$file_basename\"],</div><div class=\"line\">    \"cwd\": \"$file_path\",</div><div class=\"line\">    \"syntax\": \"Packages/Python/Python.tmLanguage\",</div><div class=\"line\">    \"external_id\": \"python\",</div><div class=\"line\">    \"extend_env\": &#123;\"PYTHONIOENCODING\": \"utf-8\"&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>其中id的值是我们需要的，因为我们正是要为其添加快捷键。另外，菜单文件的位置也是需要先记下的，因为需要为这个命令指定定义的来源。</p>\n<p>2) <strong>自定义快捷键</strong></p>\n<p>Preferences =&gt; Key Boundings-User打开自定义快捷键文件，写入如下内容：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t\"keys\" : [\"f5\"],                           // 快捷键，注意小写</div><div class=\"line\">\t\t\"command\" : \"run_existing_window_command\", // 运行定义的命令</div><div class=\"line\">\t\t\"args\" :                                   // 命令参数</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t\"id\" : \"repl_python_run\",              // 上一步查看的命令的id</div><div class=\"line\">\t\t\t\"file\" : \"config/Python/Main.sublime-menu\" // 菜单定义文件位置</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t&#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>###3. 修改视图</p>\n<ul>\n<li>选择查看–布局–行：2 或者 Shift+Alt+8</li>\n</ul>\n<p>将Sublime分割为上下两部分，选择F5进行代码编译，编译信息将会显示在下面的编译区域。</p>\n<p>###4. 编辑器快捷键汇总</p>\n<p>Ctrl+Shift+P：打开命令面板</p>\n<p>Ctrl+P：搜索项目中的文件</p>\n<p>Ctrl+G：跳转到第几行</p>\n<p>Ctrl+W：关闭当前打开文件</p>\n<p>Ctrl+Shift+W：关闭所有打开文件</p>\n<p>Ctrl+Shift+V：粘贴并格式化</p>\n<p>Ctrl+D：选择单词，重复可增加选择下一个相同的单词</p>\n<p>Ctrl+L：选择行，重复可依次增加选择下一行</p>\n<p>Ctrl+Shift+L：选择多行</p>\n<p>Ctrl+Shift+Enter：在当前行前插入新行</p>\n<p>Ctrl+X：删除当前行</p>\n<p>Ctrl+M：跳转到对应括号</p>\n<p>Ctrl+U：软撤销，撤销光标位置</p>\n<p>Ctrl+J：选择标签内容</p>\n<p>Ctrl+F：查找内容</p>\n<p>Ctrl+Shift+F：查找并替换</p>\n<p>Ctrl+H：替换</p>\n<p>Ctrl+R：前往 method</p>\n<p>Ctrl+N：新建窗口</p>\n<p>Ctrl+K+B：开关侧栏</p>\n<p>Ctrl+Shift+M：选中当前括号内容，重复可选着括号本身</p>\n<p>Ctrl+F2：设置/删除标记</p>\n<p>Ctrl+/：注释当前行</p>\n<p>Ctrl+Shift+/：当前位置插入注释</p>\n<p>Ctrl+Alt+/：块注释，并Focus到首行，写注释说明用的</p>\n<p>Ctrl+Shift+A：选择当前标签前后，修改标签用的</p>\n<p>F11：全屏</p>\n<p>Shift+F11：全屏免打扰模式，只编辑当前文件</p>\n<p>Alt+F3：选择所有相同的词</p>\n<p>Alt+.：闭合标签</p>\n<p>Alt+Shift+数字：分屏显示</p>\n<p>Alt+数字：切换打开第N个文件</p>\n<p>Shift+右键拖动：光标多不，用来更改或插入列内容</p>\n<p>鼠标的前进后退键可切换Tab文件</p>\n<p>按Ctrl，依次点击或选取，可需要编辑的多个位置</p>\n<p>按Ctrl+Shift+上下键，可替换行</p>\n"},{"layout":"post","title":"Git安装笔记与如何连接GitHub远程仓库","published":1,"_content":"\n##1. 安装/设置Git\n\n```bash\n#下载\n$ sudo apt-get install git\n#设置\n$ git config --global user.name \"llgreen\"\n$ git config --global user.email \"460051518@qq.com\"\n#常用的命令都设置alias，尽量少敲键盘\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.co checkout\ngit config --global alias.st status\n```\n\n##2. 初始化本地仓库\n\n```bash\n#第一次链接远程库，忘记初始化本地仓库了\n$ git remote add origin git@github.com:liqing215/note-blog.git\nfatal: Not a git repository (or any of the parent directories): .git\n\n#建立本地仓库\n$ mkdir Documents/Git_repository\n$ cd /Documents/Git_repository\n$ git init\nInitialized empty Git repository in /home/llgreen/Documents/Git_repository/.git/\n```\n\n##3. 连接/克隆远程仓库Github\n[Permission denied: 怎样生成SSH Keys?](https://help.github.com/articles/generating-ssh-keys)\n\n[如何添加SSH key到GitHub?](https://github.com/settings/ssh)\n\n```bash\n#第二次连接远程仓库，忘记添加密匙，权限拒绝\n$ git remote add origin git@github.com:liqing215/note-blog.git\n$ git clone git@github.com:liqing215/note-blog.git\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\n#添加本地_rsa.pub到GitHub上\n#Step 1: Check for SSH keys\n$ ls -al ~/.ssh\n\n#Step 2: Generate a new SSH key\n$ ssh-keygen -t rsa -C \"460051518@qq.com\"\nYour identification has been saved in /home/llgreen/.ssh/id_rsa.\nYour public key has been saved in /home/llgreen/.ssh/id_rsa.pub.\n#add your new key to the ssh-agent:\n$ eval \"$(ssh-agent -s)\"\nAgent pid 7359\n$ ssh-add ~/.ssh/id_rsa\nEnter passphrase for /home/llgreen/.ssh/id_rsa: \nIdentity added: /home/llgreen/.ssh/id_rsa (/home/llgreen/.ssh/id_rsa)\n\n#Step 3: Add your SSH key to GitHub\n#查看本地_rsa.pub中的SSH key\n$ cat /home/llgreen/.ssh/id_rsa.pub\nssh-rsa [a-zA-Zd]* 460051518@qq.com\n#利用xclip复制到clipboard，在添加到GitHub - SSH key\n$ sudo apt-get install xclip\n$xclip -sel clip < ~/.ssh/id_rsa.pub\n# Copies the contents of the id_rsa.pub file to your clipboard\n\n#Step 4: Test everything out\n$ ssh -T git@github.com\nHi liqing215! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n##4. 修改/推送本地内容到远程库\n\n```bash\n$ git clone git@github.com:liqing215/note-blog.git\n$ cd note-blog/\n$ nano README.md \n#添加文件 add -> commit -> push\n$ git add README.md \n$ git commit -m 'learngit commit'\n#查看文件在那个分支，选择推送到gh-pages分支（这是GitHub的pages分支，项目在master上）\n$ git status\nOn branch gh-pages\nYour branch is ahead of 'origin/gh-pages' by 1 commit.\n$ git push -u origin gh-pages\n\n```\n\n[廖雪峰-Git教程-添加远程库](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000)\n\n> - 要关联一个远程库：\n`git remote add origin git@server-name:path/repo-name.git`\n> - 关联后，第一次推送master分支的所有内容：\n`git push -u origin master`\n> - 此后，每次本地提交后，推送最新修改：\n`git push origin master`\n> - 提交默认的对应分支：\n`git push`\n\n##5. Git命令大全\n\n![cheat-sheet-large01](/public/img/tech/cheat-sheet-large01.png)","source":"_posts/技术/2014-09-25-use-git-and-github.md","raw":"---\nlayout: post\ntitle: \"Git安装笔记与如何连接GitHub远程仓库\"\ncategory: 技术\ntags: Ubuntu\npublished: true\n---\n\n##1. 安装/设置Git\n\n```bash\n#下载\n$ sudo apt-get install git\n#设置\n$ git config --global user.name \"llgreen\"\n$ git config --global user.email \"460051518@qq.com\"\n#常用的命令都设置alias，尽量少敲键盘\ngit config --global alias.br branch\ngit config --global alias.ci commit\ngit config --global alias.co checkout\ngit config --global alias.st status\n```\n\n##2. 初始化本地仓库\n\n```bash\n#第一次链接远程库，忘记初始化本地仓库了\n$ git remote add origin git@github.com:liqing215/note-blog.git\nfatal: Not a git repository (or any of the parent directories): .git\n\n#建立本地仓库\n$ mkdir Documents/Git_repository\n$ cd /Documents/Git_repository\n$ git init\nInitialized empty Git repository in /home/llgreen/Documents/Git_repository/.git/\n```\n\n##3. 连接/克隆远程仓库Github\n[Permission denied: 怎样生成SSH Keys?](https://help.github.com/articles/generating-ssh-keys)\n\n[如何添加SSH key到GitHub?](https://github.com/settings/ssh)\n\n```bash\n#第二次连接远程仓库，忘记添加密匙，权限拒绝\n$ git remote add origin git@github.com:liqing215/note-blog.git\n$ git clone git@github.com:liqing215/note-blog.git\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\n#添加本地_rsa.pub到GitHub上\n#Step 1: Check for SSH keys\n$ ls -al ~/.ssh\n\n#Step 2: Generate a new SSH key\n$ ssh-keygen -t rsa -C \"460051518@qq.com\"\nYour identification has been saved in /home/llgreen/.ssh/id_rsa.\nYour public key has been saved in /home/llgreen/.ssh/id_rsa.pub.\n#add your new key to the ssh-agent:\n$ eval \"$(ssh-agent -s)\"\nAgent pid 7359\n$ ssh-add ~/.ssh/id_rsa\nEnter passphrase for /home/llgreen/.ssh/id_rsa: \nIdentity added: /home/llgreen/.ssh/id_rsa (/home/llgreen/.ssh/id_rsa)\n\n#Step 3: Add your SSH key to GitHub\n#查看本地_rsa.pub中的SSH key\n$ cat /home/llgreen/.ssh/id_rsa.pub\nssh-rsa [a-zA-Zd]* 460051518@qq.com\n#利用xclip复制到clipboard，在添加到GitHub - SSH key\n$ sudo apt-get install xclip\n$xclip -sel clip < ~/.ssh/id_rsa.pub\n# Copies the contents of the id_rsa.pub file to your clipboard\n\n#Step 4: Test everything out\n$ ssh -T git@github.com\nHi liqing215! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n##4. 修改/推送本地内容到远程库\n\n```bash\n$ git clone git@github.com:liqing215/note-blog.git\n$ cd note-blog/\n$ nano README.md \n#添加文件 add -> commit -> push\n$ git add README.md \n$ git commit -m 'learngit commit'\n#查看文件在那个分支，选择推送到gh-pages分支（这是GitHub的pages分支，项目在master上）\n$ git status\nOn branch gh-pages\nYour branch is ahead of 'origin/gh-pages' by 1 commit.\n$ git push -u origin gh-pages\n\n```\n\n[廖雪峰-Git教程-添加远程库](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000)\n\n> - 要关联一个远程库：\n`git remote add origin git@server-name:path/repo-name.git`\n> - 关联后，第一次推送master分支的所有内容：\n`git push -u origin master`\n> - 此后，每次本地提交后，推送最新修改：\n`git push origin master`\n> - 提交默认的对应分支：\n`git push`\n\n##5. Git命令大全\n\n![cheat-sheet-large01](/public/img/tech/cheat-sheet-large01.png)","slug":"技术-2014-09-25-use-git-and-github","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97nr0012tz3aiq38elu3","content":"<p>##1. 安装/设置Git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#下载</span></div><div class=\"line\">$ sudo apt-get install git</div><div class=\"line\"><span class=\"comment\">#设置</span></div><div class=\"line\">$ git config --global user.name <span class=\"string\">\"llgreen\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"460051518@qq.com\"</span></div><div class=\"line\"><span class=\"comment\">#常用的命令都设置alias，尽量少敲键盘</span></div><div class=\"line\">git config --global alias.br branch</div><div class=\"line\">git config --global alias.ci commit</div><div class=\"line\">git config --global alias.co checkout</div><div class=\"line\">git config --global alias.st status</div></pre></td></tr></table></figure>\n<p>##2. 初始化本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#第一次链接远程库，忘记初始化本地仓库了</span></div><div class=\"line\">$ git remote add origin git@github.com:liqing215/note-blog.git</div><div class=\"line\">fatal: Not a git repository (or any of the parent directories): .git</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#建立本地仓库</span></div><div class=\"line\">$ mkdir Documents/Git_repository</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /Documents/Git_repository</div><div class=\"line\">$ git init</div><div class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /home/llgreen/Documents/Git_repository/.git/</div></pre></td></tr></table></figure>\n<p>##3. 连接/克隆远程仓库Github<br><a href=\"https://help.github.com/articles/generating-ssh-keys\" target=\"_blank\" rel=\"external\">Permission denied: 怎样生成SSH Keys?</a></p>\n<p><a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"external\">如何添加SSH key到GitHub?</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#第二次连接远程仓库，忘记添加密匙，权限拒绝</span></div><div class=\"line\">$ git remote add origin git@github.com:liqing215/note-blog.git</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:liqing215/note-blog.git</div><div class=\"line\">Permission denied (publickey).</div><div class=\"line\">fatal: Could not <span class=\"built_in\">read</span> from remote repository.</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#添加本地_rsa.pub到GitHub上</span></div><div class=\"line\"><span class=\"comment\">#Step 1: Check for SSH keys</span></div><div class=\"line\">$ ls -al ~/.ssh</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Step 2: Generate a new SSH key</span></div><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"460051518@qq.com\"</span></div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /home/llgreen/.ssh/id_rsa.</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /home/llgreen/.ssh/id_rsa.pub.</div><div class=\"line\"><span class=\"comment\">#add your new key to the ssh-agent:</span></div><div class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></div><div class=\"line\">Agent pid 7359</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div><div class=\"line\">Enter passphrase <span class=\"keyword\">for</span> /home/llgreen/.ssh/id_rsa: </div><div class=\"line\">Identity added: /home/llgreen/.ssh/id_rsa (/home/llgreen/.ssh/id_rsa)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Step 3: Add your SSH key to GitHub</span></div><div class=\"line\"><span class=\"comment\">#查看本地_rsa.pub中的SSH key</span></div><div class=\"line\">$ cat /home/llgreen/.ssh/id_rsa.pub</div><div class=\"line\">ssh-rsa [a-zA-Zd]* 460051518@qq.com</div><div class=\"line\"><span class=\"comment\">#利用xclip复制到clipboard，在添加到GitHub - SSH key</span></div><div class=\"line\">$ sudo apt-get install xclip</div><div class=\"line\"><span class=\"variable\">$xclip</span> -sel clip &lt; ~/.ssh/id_rsa.pub</div><div class=\"line\"><span class=\"comment\"># Copies the contents of the id_rsa.pub file to your clipboard</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Step 4: Test everything out</span></div><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi liqing215! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure>\n<p>##4. 修改/推送本地内容到远程库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:liqing215/note-blog.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> note-blog/</div><div class=\"line\">$ nano README.md </div><div class=\"line\"><span class=\"comment\">#添加文件 add -&gt; commit -&gt; push</span></div><div class=\"line\">$ git add README.md </div><div class=\"line\">$ git commit -m <span class=\"string\">'learngit commit'</span></div><div class=\"line\"><span class=\"comment\">#查看文件在那个分支，选择推送到gh-pages分支（这是GitHub的pages分支，项目在master上）</span></div><div class=\"line\">$ git status</div><div class=\"line\">On branch gh-pages</div><div class=\"line\">Your branch is ahead of <span class=\"string\">'origin/gh-pages'</span> by 1 commit.</div><div class=\"line\">$ git push -u origin gh-pages</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000\" target=\"_blank\" rel=\"external\">廖雪峰-Git教程-添加远程库</a></p>\n<blockquote>\n<ul>\n<li>要关联一个远程库：<br><code>git remote add origin git@server-name:path/repo-name.git</code></li>\n<li>关联后，第一次推送master分支的所有内容：<br><code>git push -u origin master</code></li>\n<li>此后，每次本地提交后，推送最新修改：<br><code>git push origin master</code></li>\n<li>提交默认的对应分支：<br><code>git push</code></li>\n</ul>\n</blockquote>\n<p>##5. Git命令大全</p>\n<p><img src=\"/public/img/tech/cheat-sheet-large01.png\" alt=\"cheat-sheet-large01\"></p>\n","excerpt":"","more":"<p>##1. 安装/设置Git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#下载</span></div><div class=\"line\">$ sudo apt-get install git</div><div class=\"line\"><span class=\"comment\">#设置</span></div><div class=\"line\">$ git config --global user.name <span class=\"string\">\"llgreen\"</span></div><div class=\"line\">$ git config --global user.email <span class=\"string\">\"460051518@qq.com\"</span></div><div class=\"line\"><span class=\"comment\">#常用的命令都设置alias，尽量少敲键盘</span></div><div class=\"line\">git config --global alias.br branch</div><div class=\"line\">git config --global alias.ci commit</div><div class=\"line\">git config --global alias.co checkout</div><div class=\"line\">git config --global alias.st status</div></pre></td></tr></table></figure>\n<p>##2. 初始化本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#第一次链接远程库，忘记初始化本地仓库了</span></div><div class=\"line\">$ git remote add origin git@github.com:liqing215/note-blog.git</div><div class=\"line\">fatal: Not a git repository (or any of the parent directories): .git</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#建立本地仓库</span></div><div class=\"line\">$ mkdir Documents/Git_repository</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /Documents/Git_repository</div><div class=\"line\">$ git init</div><div class=\"line\">Initialized empty Git repository <span class=\"keyword\">in</span> /home/llgreen/Documents/Git_repository/.git/</div></pre></td></tr></table></figure>\n<p>##3. 连接/克隆远程仓库Github<br><a href=\"https://help.github.com/articles/generating-ssh-keys\">Permission denied: 怎样生成SSH Keys?</a></p>\n<p><a href=\"https://github.com/settings/ssh\">如何添加SSH key到GitHub?</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#第二次连接远程仓库，忘记添加密匙，权限拒绝</span></div><div class=\"line\">$ git remote add origin git@github.com:liqing215/note-blog.git</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:liqing215/note-blog.git</div><div class=\"line\">Permission denied (publickey).</div><div class=\"line\">fatal: Could not <span class=\"built_in\">read</span> from remote repository.</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#添加本地_rsa.pub到GitHub上</span></div><div class=\"line\"><span class=\"comment\">#Step 1: Check for SSH keys</span></div><div class=\"line\">$ ls -al ~/.ssh</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Step 2: Generate a new SSH key</span></div><div class=\"line\">$ ssh-keygen -t rsa -C <span class=\"string\">\"460051518@qq.com\"</span></div><div class=\"line\">Your identification has been saved <span class=\"keyword\">in</span> /home/llgreen/.ssh/id_rsa.</div><div class=\"line\">Your public key has been saved <span class=\"keyword\">in</span> /home/llgreen/.ssh/id_rsa.pub.</div><div class=\"line\"><span class=\"comment\">#add your new key to the ssh-agent:</span></div><div class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></div><div class=\"line\">Agent pid 7359</div><div class=\"line\">$ ssh-add ~/.ssh/id_rsa</div><div class=\"line\">Enter passphrase <span class=\"keyword\">for</span> /home/llgreen/.ssh/id_rsa: </div><div class=\"line\">Identity added: /home/llgreen/.ssh/id_rsa (/home/llgreen/.ssh/id_rsa)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Step 3: Add your SSH key to GitHub</span></div><div class=\"line\"><span class=\"comment\">#查看本地_rsa.pub中的SSH key</span></div><div class=\"line\">$ cat /home/llgreen/.ssh/id_rsa.pub</div><div class=\"line\">ssh-rsa [a-zA-Zd]* 460051518@qq.com</div><div class=\"line\"><span class=\"comment\">#利用xclip复制到clipboard，在添加到GitHub - SSH key</span></div><div class=\"line\">$ sudo apt-get install xclip</div><div class=\"line\"><span class=\"variable\">$xclip</span> -sel clip &lt; ~/.ssh/id_rsa.pub</div><div class=\"line\"><span class=\"comment\"># Copies the contents of the id_rsa.pub file to your clipboard</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#Step 4: Test everything out</span></div><div class=\"line\">$ ssh -T git@github.com</div><div class=\"line\">Hi liqing215! You<span class=\"string\">'ve successfully authenticated, but GitHub does not provide shell access.</span></div></pre></td></tr></table></figure>\n<p>##4. 修改/推送本地内容到远程库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:liqing215/note-blog.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> note-blog/</div><div class=\"line\">$ nano README.md </div><div class=\"line\"><span class=\"comment\">#添加文件 add -&gt; commit -&gt; push</span></div><div class=\"line\">$ git add README.md </div><div class=\"line\">$ git commit -m <span class=\"string\">'learngit commit'</span></div><div class=\"line\"><span class=\"comment\">#查看文件在那个分支，选择推送到gh-pages分支（这是GitHub的pages分支，项目在master上）</span></div><div class=\"line\">$ git status</div><div class=\"line\">On branch gh-pages</div><div class=\"line\">Your branch is ahead of <span class=\"string\">'origin/gh-pages'</span> by 1 commit.</div><div class=\"line\">$ git push -u origin gh-pages</div></pre></td></tr></table></figure>\n<p><a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000\">廖雪峰-Git教程-添加远程库</a></p>\n<blockquote>\n<ul>\n<li>要关联一个远程库：<br><code>git remote add origin git@server-name:path/repo-name.git</code></li>\n<li>关联后，第一次推送master分支的所有内容：<br><code>git push -u origin master</code></li>\n<li>此后，每次本地提交后，推送最新修改：<br><code>git push origin master</code></li>\n<li>提交默认的对应分支：<br><code>git push</code></li>\n</ul>\n</blockquote>\n<p>##5. Git命令大全</p>\n<p><img src=\"/public/img/tech/cheat-sheet-large01.png\" alt=\"cheat-sheet-large01\"></p>\n"},{"layout":"post","title":"写作环境的搭建（Jekyll+GitHub+Markdown）","published":1,"_content":"\n##搭建Jekyll环境\n\n[官方文档](http://jekyllcn.com/docs/installation/)\n\n###1. 安装RubyGems\n\n`apt-get install rubygems`\n\n###2. 安装[「Jekyll」](http://jekyllcn.com/)\n\n```sh\n$ gem install jekyll\nFetching: liquid-2.6.1.gem (100%)\nERROR:  While executing gem ... (Errno::EACCES)\n    Permission denied - /var/lib/gems\n$ sudo gem install jekyll\nERROR:  Error installing jekyll:\n\tERROR: Failed to build gem native extension.\n$ gem update --system\nERROR:  While executing gem ... (RuntimeError)\n$ sudo gem update\nUpdating installed gems\nUpdating rdoc\n......\n27 gems installed\n$ gem install jekyll\n......\nSuccessfully installed jekyll-2.4.0\n26 gems installed\n$ jekyll -v\nCould not find a JavaScript runtime.\n$ sudo apt-get install nodejs\n$ jekyll -v\njekyll 2.4.0\n```\n\n###3. 测试Jekyll\n\n```sh\n$ jekyll new my-awesome-site\n$ cd my-awesome-site\n~/my-awesome-site $ jekyll serve\n# => Now browse to http://localhost:4000\n```\n\n打开浏览器可以看到：\n![3](/public/img/tech/0926-3.png)\n\n\n##使用[「JekyllBootstrap」](http://jekyllbootstrap.com/)\n\n> The Quickest Way to Blog on GitHub Pages.\n> Jekyll Generates Static Websites\n\n###1. 使用Jekyll + GitHub Pages快速生成博客\n\n- JekyllBootstrap提供了一个界面：[Host on GitHub in 3 Minutes](http://jekyllbootstrap.com/usage/jekyll-quick-start.html)\n\n> 1. Create a New Repository\n\n> 2. Install Jekyll-Bootstrap\n\n> 3. Profit\n\n###2. 利用Jekyll进行本地调试\n\n- 直接下载jekyll-bootstrap模板\n\n```sh\n$ git clone https://github.com/plusjade/jekyll-bootstrap.git\n$ cd jekyll-bootstrap\n$ jekyll serve\n```\n\n> Your blog is now available at: [http://localhost:4000/](http://localhost:4000/)\n\n- 下载/运行别人已经做好的模板\n\n```sh\n$ git clone git@github.com:liqing215/note-blog.git\n$ cd note-blog\n$ jekyll serve\nError:  Address already in use - bind(2)\n```\n\n这个错误是因为在另外一个在和终端里面也运行了jekyll serve，关掉之后在打开就可以看到自己的博客了。\n\n![4](/public/img/tech/0926-4.png)\n\n```sh\n$ jekyll serve\nCNAME already taken: ......\n```\n\n这个错误是因为CNAME文件的原因，是用来指定自定义域名的，和本地调试地址冲突。如果你没有自定义域名，那就不需要删除。\n\n\n###3. Markdown写作\n\n> [Markdown: Basics （快速入门）](http://wowubuntu.com/markdown/basic.html)\n\n> [阳志平：Markdown写作浅谈](http://www.yangzhiping.com/tech/r-markdown-knitr.html)\n\n1) **本地写作**\n\n- [UberWriter](http://jonathanmh.com/uberwriter-a-markdown-editor-for-linux/): a MarkDown Editor for Linux\n\n```sh\nsudo add-apt-repository ppa:w-vollprecht/ppa\nsudo apt-get update\nsudo apt-get install uberwriter\n```\n\n- 只需要在_posts文件夹下添加相应博文的.md文件即可。\n\n> 注意命名格式一定要是yy-mm-dd-title.md，title是你文章的标题。（也可以卸载.md文件开头）\n\n- 每篇文章的开头都要指定一定的格式，如本文：\n\n```\nlayout: post\ntitle: \"Ubuntu开发之旅[4]：写作环境的搭建（Jekyll+GitHub+Markdown）\"\ncategory: 技术\ntags: Ubuntu\nkeywords: Ubuntu，Jekyll，GitHub，Markdown\ndescription: null\npublished: true\n```\n\nlayout: post指的是博文格式要按照_layouts文件夹下的\n\npost.html指定的格式来显示。\n\ncategories: 指定博文分类技术。\n\ntags: 指定博文标签。\n\npublished: 表示发布与否\n\n2) **线上写作**\n\n- 在线Md编辑器：\n\n> 1.[马克飞象](http://maxiang.info)- 专为印象笔记打造的Markdown\n\n> 2.[StackEdit](https://stackedit.io/) – In-browser markdown editor\n\n> 3.[Cmd Markdown](https://www.zybuluo.com/mdeditor) 编辑阅读器 - 作业部落出品\n\n- [Prose · A Content Editor for GitHubProse](http://prose.io)\n\n> Prose is a content editor for GitHub designed for managing websites. Learn more. Authorize on GitHub.\n\n最终就选择了Prose.io直接在线编辑修改GitHub上的文章，无比方便。\n\n![5](/public/img/tech/0926-5.png)\n\n\n##其他的快速「博客」方案\n\n###1. [Postach.io](http://postach.io)\n\nCollect and share content from your favourite apps.\n\nConnect and post using Evernote, Dropbox and Pocket.\n\n> When you add or change an HTML, Markdown, or Image file in the folder for your Postach.io site in Dropbox, that change will be reflected on your Postach.io site after Dropbox is finished syncing. It’s that easy.\n\n###2. [Farbox](https://www.farbox.com/)\n\nThe Best Blog Platform on Cloud\n \n> Realtime and dynamic, Folder is a database, FarBox is a webserver. Simple is Everything. \n\n###3. [Medium](https://medium.com/about/welcome-to-medium-9e53ca408c48)\n\n> Medium is a new place on the Internet where people share ideas and stories that are longer than 140 characters and not just for friends. \n\n###4. [简书](http://www.jianshu.com/)\n\n> 找回文字的力量 在这里更好地写作和阅读","source":"_posts/技术/2014-09-26-write-article-use-jekyll-github-markdown.md","raw":"---\nlayout: post\ntitle: \"写作环境的搭建（Jekyll+GitHub+Markdown）\"\ncategory: 技术\ntags: Jekyll Markdown\npublished: true\n---\n\n##搭建Jekyll环境\n\n[官方文档](http://jekyllcn.com/docs/installation/)\n\n###1. 安装RubyGems\n\n`apt-get install rubygems`\n\n###2. 安装[「Jekyll」](http://jekyllcn.com/)\n\n```sh\n$ gem install jekyll\nFetching: liquid-2.6.1.gem (100%)\nERROR:  While executing gem ... (Errno::EACCES)\n    Permission denied - /var/lib/gems\n$ sudo gem install jekyll\nERROR:  Error installing jekyll:\n\tERROR: Failed to build gem native extension.\n$ gem update --system\nERROR:  While executing gem ... (RuntimeError)\n$ sudo gem update\nUpdating installed gems\nUpdating rdoc\n......\n27 gems installed\n$ gem install jekyll\n......\nSuccessfully installed jekyll-2.4.0\n26 gems installed\n$ jekyll -v\nCould not find a JavaScript runtime.\n$ sudo apt-get install nodejs\n$ jekyll -v\njekyll 2.4.0\n```\n\n###3. 测试Jekyll\n\n```sh\n$ jekyll new my-awesome-site\n$ cd my-awesome-site\n~/my-awesome-site $ jekyll serve\n# => Now browse to http://localhost:4000\n```\n\n打开浏览器可以看到：\n![3](/public/img/tech/0926-3.png)\n\n\n##使用[「JekyllBootstrap」](http://jekyllbootstrap.com/)\n\n> The Quickest Way to Blog on GitHub Pages.\n> Jekyll Generates Static Websites\n\n###1. 使用Jekyll + GitHub Pages快速生成博客\n\n- JekyllBootstrap提供了一个界面：[Host on GitHub in 3 Minutes](http://jekyllbootstrap.com/usage/jekyll-quick-start.html)\n\n> 1. Create a New Repository\n\n> 2. Install Jekyll-Bootstrap\n\n> 3. Profit\n\n###2. 利用Jekyll进行本地调试\n\n- 直接下载jekyll-bootstrap模板\n\n```sh\n$ git clone https://github.com/plusjade/jekyll-bootstrap.git\n$ cd jekyll-bootstrap\n$ jekyll serve\n```\n\n> Your blog is now available at: [http://localhost:4000/](http://localhost:4000/)\n\n- 下载/运行别人已经做好的模板\n\n```sh\n$ git clone git@github.com:liqing215/note-blog.git\n$ cd note-blog\n$ jekyll serve\nError:  Address already in use - bind(2)\n```\n\n这个错误是因为在另外一个在和终端里面也运行了jekyll serve，关掉之后在打开就可以看到自己的博客了。\n\n![4](/public/img/tech/0926-4.png)\n\n```sh\n$ jekyll serve\nCNAME already taken: ......\n```\n\n这个错误是因为CNAME文件的原因，是用来指定自定义域名的，和本地调试地址冲突。如果你没有自定义域名，那就不需要删除。\n\n\n###3. Markdown写作\n\n> [Markdown: Basics （快速入门）](http://wowubuntu.com/markdown/basic.html)\n\n> [阳志平：Markdown写作浅谈](http://www.yangzhiping.com/tech/r-markdown-knitr.html)\n\n1) **本地写作**\n\n- [UberWriter](http://jonathanmh.com/uberwriter-a-markdown-editor-for-linux/): a MarkDown Editor for Linux\n\n```sh\nsudo add-apt-repository ppa:w-vollprecht/ppa\nsudo apt-get update\nsudo apt-get install uberwriter\n```\n\n- 只需要在_posts文件夹下添加相应博文的.md文件即可。\n\n> 注意命名格式一定要是yy-mm-dd-title.md，title是你文章的标题。（也可以卸载.md文件开头）\n\n- 每篇文章的开头都要指定一定的格式，如本文：\n\n```\nlayout: post\ntitle: \"Ubuntu开发之旅[4]：写作环境的搭建（Jekyll+GitHub+Markdown）\"\ncategory: 技术\ntags: Ubuntu\nkeywords: Ubuntu，Jekyll，GitHub，Markdown\ndescription: null\npublished: true\n```\n\nlayout: post指的是博文格式要按照_layouts文件夹下的\n\npost.html指定的格式来显示。\n\ncategories: 指定博文分类技术。\n\ntags: 指定博文标签。\n\npublished: 表示发布与否\n\n2) **线上写作**\n\n- 在线Md编辑器：\n\n> 1.[马克飞象](http://maxiang.info)- 专为印象笔记打造的Markdown\n\n> 2.[StackEdit](https://stackedit.io/) – In-browser markdown editor\n\n> 3.[Cmd Markdown](https://www.zybuluo.com/mdeditor) 编辑阅读器 - 作业部落出品\n\n- [Prose · A Content Editor for GitHubProse](http://prose.io)\n\n> Prose is a content editor for GitHub designed for managing websites. Learn more. Authorize on GitHub.\n\n最终就选择了Prose.io直接在线编辑修改GitHub上的文章，无比方便。\n\n![5](/public/img/tech/0926-5.png)\n\n\n##其他的快速「博客」方案\n\n###1. [Postach.io](http://postach.io)\n\nCollect and share content from your favourite apps.\n\nConnect and post using Evernote, Dropbox and Pocket.\n\n> When you add or change an HTML, Markdown, or Image file in the folder for your Postach.io site in Dropbox, that change will be reflected on your Postach.io site after Dropbox is finished syncing. It’s that easy.\n\n###2. [Farbox](https://www.farbox.com/)\n\nThe Best Blog Platform on Cloud\n \n> Realtime and dynamic, Folder is a database, FarBox is a webserver. Simple is Everything. \n\n###3. [Medium](https://medium.com/about/welcome-to-medium-9e53ca408c48)\n\n> Medium is a new place on the Internet where people share ideas and stories that are longer than 140 characters and not just for friends. \n\n###4. [简书](http://www.jianshu.com/)\n\n> 找回文字的力量 在这里更好地写作和阅读","slug":"技术-2014-09-26-write-article-use-jekyll-github-markdown","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97nt0014tz3a7ies1cfm","content":"<p>##搭建Jekyll环境</p>\n<p><a href=\"http://jekyllcn.com/docs/installation/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<p>###1. 安装RubyGems</p>\n<p><code>apt-get install rubygems</code></p>\n<p>###2. 安装<a href=\"http://jekyllcn.com/\" target=\"_blank\" rel=\"external\">「Jekyll」</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem install jekyll</div><div class=\"line\">Fetching: liquid-2.6.1.gem (100%)</div><div class=\"line\">ERROR:  While executing gem ... (Errno::EACCES)</div><div class=\"line\">    Permission denied - /var/lib/gems</div><div class=\"line\">$ sudo gem install jekyll</div><div class=\"line\">ERROR:  Error installing jekyll:</div><div class=\"line\">\tERROR: Failed to build gem native extension.</div><div class=\"line\">$ gem update --system</div><div class=\"line\">ERROR:  While executing gem ... (RuntimeError)</div><div class=\"line\">$ sudo gem update</div><div class=\"line\">Updating installed gems</div><div class=\"line\">Updating rdoc</div><div class=\"line\">......</div><div class=\"line\">27 gems installed</div><div class=\"line\">$ gem install jekyll</div><div class=\"line\">......</div><div class=\"line\">Successfully installed jekyll-2.4.0</div><div class=\"line\">26 gems installed</div><div class=\"line\">$ jekyll -v</div><div class=\"line\">Could not find a JavaScript runtime.</div><div class=\"line\">$ sudo apt-get install nodejs</div><div class=\"line\">$ jekyll -v</div><div class=\"line\">jekyll 2.4.0</div></pre></td></tr></table></figure>\n<p>###3. 测试Jekyll</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ jekyll new my-awesome-site</div><div class=\"line\">$ <span class=\"built_in\">cd</span> my-awesome-site</div><div class=\"line\">~/my-awesome-site $ jekyll serve</div><div class=\"line\"><span class=\"comment\"># =&gt; Now browse to http://localhost:4000</span></div></pre></td></tr></table></figure>\n<p>打开浏览器可以看到：<br><img src=\"/public/img/tech/0926-3.png\" alt=\"3\"></p>\n<p>##使用<a href=\"http://jekyllbootstrap.com/\" target=\"_blank\" rel=\"external\">「JekyllBootstrap」</a></p>\n<blockquote>\n<p>The Quickest Way to Blog on GitHub Pages.<br>Jekyll Generates Static Websites</p>\n</blockquote>\n<p>###1. 使用Jekyll + GitHub Pages快速生成博客</p>\n<ul>\n<li>JekyllBootstrap提供了一个界面：<a href=\"http://jekyllbootstrap.com/usage/jekyll-quick-start.html\" target=\"_blank\" rel=\"external\">Host on GitHub in 3 Minutes</a></li>\n</ul>\n<blockquote>\n<ol>\n<li><p>Create a New Repository</p>\n</li>\n<li><p>Install Jekyll-Bootstrap</p>\n</li>\n<li><p>Profit</p>\n</li>\n</ol>\n</blockquote>\n<p>###2. 利用Jekyll进行本地调试</p>\n<ul>\n<li>直接下载jekyll-bootstrap模板</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/plusjade/jekyll-bootstrap.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> jekyll-bootstrap</div><div class=\"line\">$ jekyll serve</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Your blog is now available at: <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a></p>\n</blockquote>\n<ul>\n<li>下载/运行别人已经做好的模板</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:liqing215/note-blog.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> note-blog</div><div class=\"line\">$ jekyll serve</div><div class=\"line\">Error:  Address already <span class=\"keyword\">in</span> use - <span class=\"built_in\">bind</span>(2)</div></pre></td></tr></table></figure>\n<p>这个错误是因为在另外一个在和终端里面也运行了jekyll serve，关掉之后在打开就可以看到自己的博客了。</p>\n<p><img src=\"/public/img/tech/0926-4.png\" alt=\"4\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ jekyll serve</div><div class=\"line\">CNAME already taken: ......</div></pre></td></tr></table></figure>\n<p>这个错误是因为CNAME文件的原因，是用来指定自定义域名的，和本地调试地址冲突。如果你没有自定义域名，那就不需要删除。</p>\n<p>###3. Markdown写作</p>\n<blockquote>\n<p><a href=\"http://wowubuntu.com/markdown/basic.html\" target=\"_blank\" rel=\"external\">Markdown: Basics （快速入门）</a></p>\n<p><a href=\"http://www.yangzhiping.com/tech/r-markdown-knitr.html\" target=\"_blank\" rel=\"external\">阳志平：Markdown写作浅谈</a></p>\n</blockquote>\n<p>1) <strong>本地写作</strong></p>\n<ul>\n<li><a href=\"http://jonathanmh.com/uberwriter-a-markdown-editor-for-linux/\" target=\"_blank\" rel=\"external\">UberWriter</a>: a MarkDown Editor for Linux</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:w-vollprecht/ppa</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install uberwriter</div></pre></td></tr></table></figure>\n<ul>\n<li>只需要在_posts文件夹下添加相应博文的.md文件即可。</li>\n</ul>\n<blockquote>\n<p>注意命名格式一定要是yy-mm-dd-title.md，title是你文章的标题。（也可以卸载.md文件开头）</p>\n</blockquote>\n<ul>\n<li>每篇文章的开头都要指定一定的格式，如本文：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: post</div><div class=\"line\">title: &quot;Ubuntu开发之旅[4]：写作环境的搭建（Jekyll+GitHub+Markdown）&quot;</div><div class=\"line\">category: 技术</div><div class=\"line\">tags: Ubuntu</div><div class=\"line\">keywords: Ubuntu，Jekyll，GitHub，Markdown</div><div class=\"line\">description: null</div><div class=\"line\">published: true</div></pre></td></tr></table></figure>\n<p>layout: post指的是博文格式要按照_layouts文件夹下的</p>\n<p>post.html指定的格式来显示。</p>\n<p>categories: 指定博文分类技术。</p>\n<p>tags: 指定博文标签。</p>\n<p>published: 表示发布与否</p>\n<p>2) <strong>线上写作</strong></p>\n<ul>\n<li>在线Md编辑器：</li>\n</ul>\n<blockquote>\n<p>1.<a href=\"http://maxiang.info\" target=\"_blank\" rel=\"external\">马克飞象</a>- 专为印象笔记打造的Markdown</p>\n<p>2.<a href=\"https://stackedit.io/\" target=\"_blank\" rel=\"external\">StackEdit</a> – In-browser markdown editor</p>\n<p>3.<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"external\">Cmd Markdown</a> 编辑阅读器 - 作业部落出品</p>\n</blockquote>\n<ul>\n<li><a href=\"http://prose.io\" target=\"_blank\" rel=\"external\">Prose · A Content Editor for GitHubProse</a></li>\n</ul>\n<blockquote>\n<p>Prose is a content editor for GitHub designed for managing websites. Learn more. Authorize on GitHub.</p>\n</blockquote>\n<p>最终就选择了Prose.io直接在线编辑修改GitHub上的文章，无比方便。</p>\n<p><img src=\"/public/img/tech/0926-5.png\" alt=\"5\"></p>\n<p>##其他的快速「博客」方案</p>\n<p>###1. <a href=\"http://postach.io\" target=\"_blank\" rel=\"external\">Postach.io</a></p>\n<p>Collect and share content from your favourite apps.</p>\n<p>Connect and post using Evernote, Dropbox and Pocket.</p>\n<blockquote>\n<p>When you add or change an HTML, Markdown, or Image file in the folder for your Postach.io site in Dropbox, that change will be reflected on your Postach.io site after Dropbox is finished syncing. It’s that easy.</p>\n</blockquote>\n<p>###2. <a href=\"https://www.farbox.com/\" target=\"_blank\" rel=\"external\">Farbox</a></p>\n<p>The Best Blog Platform on Cloud</p>\n<blockquote>\n<p>Realtime and dynamic, Folder is a database, FarBox is a webserver. Simple is Everything. </p>\n</blockquote>\n<p>###3. <a href=\"https://medium.com/about/welcome-to-medium-9e53ca408c48\" target=\"_blank\" rel=\"external\">Medium</a></p>\n<blockquote>\n<p>Medium is a new place on the Internet where people share ideas and stories that are longer than 140 characters and not just for friends. </p>\n</blockquote>\n<p>###4. <a href=\"http://www.jianshu.com/\" target=\"_blank\" rel=\"external\">简书</a></p>\n<blockquote>\n<p>找回文字的力量 在这里更好地写作和阅读</p>\n</blockquote>\n","excerpt":"","more":"<p>##搭建Jekyll环境</p>\n<p><a href=\"http://jekyllcn.com/docs/installation/\">官方文档</a></p>\n<p>###1. 安装RubyGems</p>\n<p><code>apt-get install rubygems</code></p>\n<p>###2. 安装<a href=\"http://jekyllcn.com/\">「Jekyll」</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gem install jekyll</div><div class=\"line\">Fetching: liquid-2.6.1.gem (100%)</div><div class=\"line\">ERROR:  While executing gem ... (Errno::EACCES)</div><div class=\"line\">    Permission denied - /var/lib/gems</div><div class=\"line\">$ sudo gem install jekyll</div><div class=\"line\">ERROR:  Error installing jekyll:</div><div class=\"line\">\tERROR: Failed to build gem native extension.</div><div class=\"line\">$ gem update --system</div><div class=\"line\">ERROR:  While executing gem ... (RuntimeError)</div><div class=\"line\">$ sudo gem update</div><div class=\"line\">Updating installed gems</div><div class=\"line\">Updating rdoc</div><div class=\"line\">......</div><div class=\"line\">27 gems installed</div><div class=\"line\">$ gem install jekyll</div><div class=\"line\">......</div><div class=\"line\">Successfully installed jekyll-2.4.0</div><div class=\"line\">26 gems installed</div><div class=\"line\">$ jekyll -v</div><div class=\"line\">Could not find a JavaScript runtime.</div><div class=\"line\">$ sudo apt-get install nodejs</div><div class=\"line\">$ jekyll -v</div><div class=\"line\">jekyll 2.4.0</div></pre></td></tr></table></figure>\n<p>###3. 测试Jekyll</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ jekyll new my-awesome-site</div><div class=\"line\">$ <span class=\"built_in\">cd</span> my-awesome-site</div><div class=\"line\">~/my-awesome-site $ jekyll serve</div><div class=\"line\"><span class=\"comment\"># =&gt; Now browse to http://localhost:4000</span></div></pre></td></tr></table></figure>\n<p>打开浏览器可以看到：<br><img src=\"/public/img/tech/0926-3.png\" alt=\"3\"></p>\n<p>##使用<a href=\"http://jekyllbootstrap.com/\">「JekyllBootstrap」</a></p>\n<blockquote>\n<p>The Quickest Way to Blog on GitHub Pages.<br>Jekyll Generates Static Websites</p>\n</blockquote>\n<p>###1. 使用Jekyll + GitHub Pages快速生成博客</p>\n<ul>\n<li>JekyllBootstrap提供了一个界面：<a href=\"http://jekyllbootstrap.com/usage/jekyll-quick-start.html\">Host on GitHub in 3 Minutes</a></li>\n</ul>\n<blockquote>\n<ol>\n<li><p>Create a New Repository</p>\n</li>\n<li><p>Install Jekyll-Bootstrap</p>\n</li>\n<li><p>Profit</p>\n</li>\n</ol>\n</blockquote>\n<p>###2. 利用Jekyll进行本地调试</p>\n<ul>\n<li>直接下载jekyll-bootstrap模板</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/plusjade/jekyll-bootstrap.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> jekyll-bootstrap</div><div class=\"line\">$ jekyll serve</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Your blog is now available at: <a href=\"http://localhost:4000/\">http://localhost:4000/</a></p>\n</blockquote>\n<ul>\n<li>下载/运行别人已经做好的模板</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> git@github.com:liqing215/note-blog.git</div><div class=\"line\">$ <span class=\"built_in\">cd</span> note-blog</div><div class=\"line\">$ jekyll serve</div><div class=\"line\">Error:  Address already <span class=\"keyword\">in</span> use - <span class=\"built_in\">bind</span>(2)</div></pre></td></tr></table></figure>\n<p>这个错误是因为在另外一个在和终端里面也运行了jekyll serve，关掉之后在打开就可以看到自己的博客了。</p>\n<p><img src=\"/public/img/tech/0926-4.png\" alt=\"4\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ jekyll serve</div><div class=\"line\">CNAME already taken: ......</div></pre></td></tr></table></figure>\n<p>这个错误是因为CNAME文件的原因，是用来指定自定义域名的，和本地调试地址冲突。如果你没有自定义域名，那就不需要删除。</p>\n<p>###3. Markdown写作</p>\n<blockquote>\n<p><a href=\"http://wowubuntu.com/markdown/basic.html\">Markdown: Basics （快速入门）</a></p>\n<p><a href=\"http://www.yangzhiping.com/tech/r-markdown-knitr.html\">阳志平：Markdown写作浅谈</a></p>\n</blockquote>\n<p>1) <strong>本地写作</strong></p>\n<ul>\n<li><a href=\"http://jonathanmh.com/uberwriter-a-markdown-editor-for-linux/\">UberWriter</a>: a MarkDown Editor for Linux</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo add-apt-repository ppa:w-vollprecht/ppa</div><div class=\"line\">sudo apt-get update</div><div class=\"line\">sudo apt-get install uberwriter</div></pre></td></tr></table></figure>\n<ul>\n<li>只需要在_posts文件夹下添加相应博文的.md文件即可。</li>\n</ul>\n<blockquote>\n<p>注意命名格式一定要是yy-mm-dd-title.md，title是你文章的标题。（也可以卸载.md文件开头）</p>\n</blockquote>\n<ul>\n<li>每篇文章的开头都要指定一定的格式，如本文：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: post</div><div class=\"line\">title: &quot;Ubuntu开发之旅[4]：写作环境的搭建（Jekyll+GitHub+Markdown）&quot;</div><div class=\"line\">category: 技术</div><div class=\"line\">tags: Ubuntu</div><div class=\"line\">keywords: Ubuntu，Jekyll，GitHub，Markdown</div><div class=\"line\">description: null</div><div class=\"line\">published: true</div></pre></td></tr></table></figure>\n<p>layout: post指的是博文格式要按照_layouts文件夹下的</p>\n<p>post.html指定的格式来显示。</p>\n<p>categories: 指定博文分类技术。</p>\n<p>tags: 指定博文标签。</p>\n<p>published: 表示发布与否</p>\n<p>2) <strong>线上写作</strong></p>\n<ul>\n<li>在线Md编辑器：</li>\n</ul>\n<blockquote>\n<p>1.<a href=\"http://maxiang.info\">马克飞象</a>- 专为印象笔记打造的Markdown</p>\n<p>2.<a href=\"https://stackedit.io/\">StackEdit</a> – In-browser markdown editor</p>\n<p>3.<a href=\"https://www.zybuluo.com/mdeditor\">Cmd Markdown</a> 编辑阅读器 - 作业部落出品</p>\n</blockquote>\n<ul>\n<li><a href=\"http://prose.io\">Prose · A Content Editor for GitHubProse</a></li>\n</ul>\n<blockquote>\n<p>Prose is a content editor for GitHub designed for managing websites. Learn more. Authorize on GitHub.</p>\n</blockquote>\n<p>最终就选择了Prose.io直接在线编辑修改GitHub上的文章，无比方便。</p>\n<p><img src=\"/public/img/tech/0926-5.png\" alt=\"5\"></p>\n<p>##其他的快速「博客」方案</p>\n<p>###1. <a href=\"http://postach.io\">Postach.io</a></p>\n<p>Collect and share content from your favourite apps.</p>\n<p>Connect and post using Evernote, Dropbox and Pocket.</p>\n<blockquote>\n<p>When you add or change an HTML, Markdown, or Image file in the folder for your Postach.io site in Dropbox, that change will be reflected on your Postach.io site after Dropbox is finished syncing. It’s that easy.</p>\n</blockquote>\n<p>###2. <a href=\"https://www.farbox.com/\">Farbox</a></p>\n<p>The Best Blog Platform on Cloud</p>\n<blockquote>\n<p>Realtime and dynamic, Folder is a database, FarBox is a webserver. Simple is Everything. </p>\n</blockquote>\n<p>###3. <a href=\"https://medium.com/about/welcome-to-medium-9e53ca408c48\">Medium</a></p>\n<blockquote>\n<p>Medium is a new place on the Internet where people share ideas and stories that are longer than 140 characters and not just for friends. </p>\n</blockquote>\n<p>###4. <a href=\"http://www.jianshu.com/\">简书</a></p>\n<blockquote>\n<p>找回文字的力量 在这里更好地写作和阅读</p>\n</blockquote>\n"},{"layout":"post","title":"Ubuntu下的程序安装与卸载","description":null,"_content":"\n##程序安装与卸载`apt-get`\n\n###1. 添加PPA源\n\n> PPA，表示 Personal Package Archives，也就是个人软件包集。\n\n> 有很多软件因为种种原因，不能进入官方的 Ubuntu 软件仓库。 为了方便 Ubuntu 用户使用，launchpad.net 提供了 ppa，允许用户建立自己的软件仓库， 自由的上传软件。\n\n```sh\n\n#到[launchpad.net](https://launchpad.net/+search)搜索到ppa:user/ppa-name之后\n\nsudo add-apt-repository ppa:ubuntu-wine/ppa\n\n```\n\n###2. 更新软件以及软件源列表\n\n> 在修改`/etc/apt/sources.list`或者`/etc/apt/preferences`之后运行该命令，此外您需要定期运行`apt-get update`命令以确保您的软件包列表是最新的\n\n```sh\n\n#更新源\n\nsudo apt-get update \n\n#更新已安装的包\n\nsudo apt-get upgrade \n\n```\n\n###4. 安装指定的程序\n\n```sh\n\n#搜索包\n\napt-cache search package \n\n#获取包的相关信息，如说明、大小、版本等\n\napt-cache show package \n\n#安装包\n\nsudo apt-get install package \n\n#重新安装包\n\nsudo apt-get install package - - reinstall \n\n```\n\n###5. 卸载指定的程序\n\n```sh\n\n#卸载已安装的软件包\n\napt-get remove packagename\n\n#卸载一个已安装的软件包（删除配置文件）\n\napt-get --purge remove packagename\n\n#有些软件很难卸载，而且还阻止了别的软件的应用\n\ndpkg --force-all --purge packagename\n\n```\n\n###6. 清理空间\n\n```sh\n\n#清除已经卸载的软件包的.deb文件\n\nsudo apt-get autoclean \n\n#将已安装软件包的.deb文件一并删除\n\nsudo apt-get clean \n\n```\n\n","source":"_posts/技术/2014-09-28-Linux-apt-get.md","raw":"---\nlayout: post\ntitle: Ubuntu下的程序安装与卸载\ncategory: 技术\ntags: Ubuntu\ndescription: \n---\n\n##程序安装与卸载`apt-get`\n\n###1. 添加PPA源\n\n> PPA，表示 Personal Package Archives，也就是个人软件包集。\n\n> 有很多软件因为种种原因，不能进入官方的 Ubuntu 软件仓库。 为了方便 Ubuntu 用户使用，launchpad.net 提供了 ppa，允许用户建立自己的软件仓库， 自由的上传软件。\n\n```sh\n\n#到[launchpad.net](https://launchpad.net/+search)搜索到ppa:user/ppa-name之后\n\nsudo add-apt-repository ppa:ubuntu-wine/ppa\n\n```\n\n###2. 更新软件以及软件源列表\n\n> 在修改`/etc/apt/sources.list`或者`/etc/apt/preferences`之后运行该命令，此外您需要定期运行`apt-get update`命令以确保您的软件包列表是最新的\n\n```sh\n\n#更新源\n\nsudo apt-get update \n\n#更新已安装的包\n\nsudo apt-get upgrade \n\n```\n\n###4. 安装指定的程序\n\n```sh\n\n#搜索包\n\napt-cache search package \n\n#获取包的相关信息，如说明、大小、版本等\n\napt-cache show package \n\n#安装包\n\nsudo apt-get install package \n\n#重新安装包\n\nsudo apt-get install package - - reinstall \n\n```\n\n###5. 卸载指定的程序\n\n```sh\n\n#卸载已安装的软件包\n\napt-get remove packagename\n\n#卸载一个已安装的软件包（删除配置文件）\n\napt-get --purge remove packagename\n\n#有些软件很难卸载，而且还阻止了别的软件的应用\n\ndpkg --force-all --purge packagename\n\n```\n\n###6. 清理空间\n\n```sh\n\n#清除已经卸载的软件包的.deb文件\n\nsudo apt-get autoclean \n\n#将已安装软件包的.deb文件一并删除\n\nsudo apt-get clean \n\n```\n\n","slug":"技术-2014-09-28-Linux-apt-get","published":1,"date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97ny0016tz3aintjaa5r","content":"<p>##程序安装与卸载<code>apt-get</code></p>\n<p>###1. 添加PPA源</p>\n<blockquote>\n<p>PPA，表示 Personal Package Archives，也就是个人软件包集。</p>\n<p>有很多软件因为种种原因，不能进入官方的 Ubuntu 软件仓库。 为了方便 Ubuntu 用户使用，launchpad.net 提供了 ppa，允许用户建立自己的软件仓库， 自由的上传软件。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#到[launchpad.net](https://launchpad.net/+search)搜索到ppa:user/ppa-name之后</span></div><div class=\"line\"></div><div class=\"line\">sudo add-apt-repository ppa:ubuntu-wine/ppa</div></pre></td></tr></table></figure>\n<p>###2. 更新软件以及软件源列表</p>\n<blockquote>\n<p>在修改<code>/etc/apt/sources.list</code>或者<code>/etc/apt/preferences</code>之后运行该命令，此外您需要定期运行<code>apt-get update</code>命令以确保您的软件包列表是最新的</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#更新源</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get update </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#更新已安装的包</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get upgrade</div></pre></td></tr></table></figure>\n<p>###4. 安装指定的程序</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#搜索包</span></div><div class=\"line\"></div><div class=\"line\">apt-cache search package </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#获取包的相关信息，如说明、大小、版本等</span></div><div class=\"line\"></div><div class=\"line\">apt-cache show package </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#安装包</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get install package </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#重新安装包</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get install package - - reinstall</div></pre></td></tr></table></figure>\n<p>###5. 卸载指定的程序</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#卸载已安装的软件包</span></div><div class=\"line\"></div><div class=\"line\">apt-get remove packagename</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#卸载一个已安装的软件包（删除配置文件）</span></div><div class=\"line\"></div><div class=\"line\">apt-get --purge remove packagename</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#有些软件很难卸载，而且还阻止了别的软件的应用</span></div><div class=\"line\"></div><div class=\"line\">dpkg --force-all --purge packagename</div></pre></td></tr></table></figure>\n<p>###6. 清理空间</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#清除已经卸载的软件包的.deb文件</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get autoclean </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#将已安装软件包的.deb文件一并删除</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get clean</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>##程序安装与卸载<code>apt-get</code></p>\n<p>###1. 添加PPA源</p>\n<blockquote>\n<p>PPA，表示 Personal Package Archives，也就是个人软件包集。</p>\n<p>有很多软件因为种种原因，不能进入官方的 Ubuntu 软件仓库。 为了方便 Ubuntu 用户使用，launchpad.net 提供了 ppa，允许用户建立自己的软件仓库， 自由的上传软件。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#到[launchpad.net](https://launchpad.net/+search)搜索到ppa:user/ppa-name之后</span></div><div class=\"line\"></div><div class=\"line\">sudo add-apt-repository ppa:ubuntu-wine/ppa</div></pre></td></tr></table></figure>\n<p>###2. 更新软件以及软件源列表</p>\n<blockquote>\n<p>在修改<code>/etc/apt/sources.list</code>或者<code>/etc/apt/preferences</code>之后运行该命令，此外您需要定期运行<code>apt-get update</code>命令以确保您的软件包列表是最新的</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#更新源</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get update </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#更新已安装的包</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get upgrade</div></pre></td></tr></table></figure>\n<p>###4. 安装指定的程序</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#搜索包</span></div><div class=\"line\"></div><div class=\"line\">apt-cache search package </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#获取包的相关信息，如说明、大小、版本等</span></div><div class=\"line\"></div><div class=\"line\">apt-cache show package </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#安装包</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get install package </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#重新安装包</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get install package - - reinstall</div></pre></td></tr></table></figure>\n<p>###5. 卸载指定的程序</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#卸载已安装的软件包</span></div><div class=\"line\"></div><div class=\"line\">apt-get remove packagename</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#卸载一个已安装的软件包（删除配置文件）</span></div><div class=\"line\"></div><div class=\"line\">apt-get --purge remove packagename</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#有些软件很难卸载，而且还阻止了别的软件的应用</span></div><div class=\"line\"></div><div class=\"line\">dpkg --force-all --purge packagename</div></pre></td></tr></table></figure>\n<p>###6. 清理空间</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#清除已经卸载的软件包的.deb文件</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get autoclean </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#将已安装软件包的.deb文件一并删除</span></div><div class=\"line\"></div><div class=\"line\">sudo apt-get clean</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Ubuntu下的几种命令行编辑器介绍","description":null,"_content":"\n##命令行编辑器\n\n###1. vi\n\n`:w`：Vi保存当前编辑文件，但并不退出\n\n`:w newfile`：此时Vi将把当前文件的内容保存到指定的newfile中，而原有文件保持不变\n\n`File exists (use ! to override)`\n\n`:w! newfile`此时，若用户真的希望用文件的当前内容替换newfile中原有内容，可强行写入\n\n`:q`：系统退出Vi返回到shell\n\n`No write since last change (use ! to overrides)`\n`:q!`：不想保存被修改后的文件而要强行退出Vi时，可放弃所作修改\n\n`:wq`：Vi将先保存文件，然后退出Vi返回到shell。\n\n`:x`：该命令的功能同命令模式下的`ZZ`命令功能相同，若当前编辑的文件曾被修改过，则Vi保存该文件后退出，返回到shell；若当前编辑的文件没被修改过，则Vi直接退出, 返回到shell。\n\n###2. gedit\n\n```sh\n#以gedit打开名为av&gv的文件\nsudo gedit /home/文档/av&gv \n```\n\n###3. nano \n\n`sudo nano /etc/hosts`\n\n完成后按ctrl+x退出，按y保存，回车，OK\n\n###4. sed\n\n> sed是一种非交互式的流编辑器，可动态编辑文件。所谓非交互式是说，sed和传统的文本编辑器不同，并非和使用者直接互动，sed处理的对象是文件的数据流（称为stream/流）。\n\n> 特别注意：sed并不会更改文件内容。sed的工作方式是读取文件内容，经流编辑之后，把结果显示到标准输出。因此，如果想要存储sed的处理结果，得自行运用转向输出将结果存成其他文件。\n\n```sh\n#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，能提高安装速度\n$ sed -i -e 's/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g' ~/.rvm/config/db\n```\n","source":"_posts/技术/2014-11-16-Linux-text-editor.md","raw":"---\nlayout: post\ntitle: Ubuntu下的几种命令行编辑器介绍\ncategory: 技术\ntags: Linux\ndescription: \n---\n\n##命令行编辑器\n\n###1. vi\n\n`:w`：Vi保存当前编辑文件，但并不退出\n\n`:w newfile`：此时Vi将把当前文件的内容保存到指定的newfile中，而原有文件保持不变\n\n`File exists (use ! to override)`\n\n`:w! newfile`此时，若用户真的希望用文件的当前内容替换newfile中原有内容，可强行写入\n\n`:q`：系统退出Vi返回到shell\n\n`No write since last change (use ! to overrides)`\n`:q!`：不想保存被修改后的文件而要强行退出Vi时，可放弃所作修改\n\n`:wq`：Vi将先保存文件，然后退出Vi返回到shell。\n\n`:x`：该命令的功能同命令模式下的`ZZ`命令功能相同，若当前编辑的文件曾被修改过，则Vi保存该文件后退出，返回到shell；若当前编辑的文件没被修改过，则Vi直接退出, 返回到shell。\n\n###2. gedit\n\n```sh\n#以gedit打开名为av&gv的文件\nsudo gedit /home/文档/av&gv \n```\n\n###3. nano \n\n`sudo nano /etc/hosts`\n\n完成后按ctrl+x退出，按y保存，回车，OK\n\n###4. sed\n\n> sed是一种非交互式的流编辑器，可动态编辑文件。所谓非交互式是说，sed和传统的文本编辑器不同，并非和使用者直接互动，sed处理的对象是文件的数据流（称为stream/流）。\n\n> 特别注意：sed并不会更改文件内容。sed的工作方式是读取文件内容，经流编辑之后，把结果显示到标准输出。因此，如果想要存储sed的处理结果，得自行运用转向输出将结果存成其他文件。\n\n```sh\n#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，能提高安装速度\n$ sed -i -e 's/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g' ~/.rvm/config/db\n```\n","slug":"技术-2014-11-16-Linux-text-editor","published":1,"date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97o0001atz3a1yb99lwd","content":"<p>##命令行编辑器</p>\n<p>###1. vi</p>\n<p><code>:w</code>：Vi保存当前编辑文件，但并不退出</p>\n<p><code>:w newfile</code>：此时Vi将把当前文件的内容保存到指定的newfile中，而原有文件保持不变</p>\n<p><code>File exists (use ! to override)</code></p>\n<p><code>:w! newfile</code>此时，若用户真的希望用文件的当前内容替换newfile中原有内容，可强行写入</p>\n<p><code>:q</code>：系统退出Vi返回到shell</p>\n<p><code>No write since last change (use ! to overrides)</code><br><code>:q!</code>：不想保存被修改后的文件而要强行退出Vi时，可放弃所作修改</p>\n<p><code>:wq</code>：Vi将先保存文件，然后退出Vi返回到shell。</p>\n<p><code>:x</code>：该命令的功能同命令模式下的<code>ZZ</code>命令功能相同，若当前编辑的文件曾被修改过，则Vi保存该文件后退出，返回到shell；若当前编辑的文件没被修改过，则Vi直接退出, 返回到shell。</p>\n<p>###2. gedit</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#以gedit打开名为av&amp;gv的文件</span></div><div class=\"line\">sudo gedit /home/文档/av&amp;gv</div></pre></td></tr></table></figure>\n<p>###3. nano </p>\n<p><code>sudo nano /etc/hosts</code></p>\n<p>完成后按ctrl+x退出，按y保存，回车，OK</p>\n<p>###4. sed</p>\n<blockquote>\n<p>sed是一种非交互式的流编辑器，可动态编辑文件。所谓非交互式是说，sed和传统的文本编辑器不同，并非和使用者直接互动，sed处理的对象是文件的数据流（称为stream/流）。</p>\n<p>特别注意：sed并不会更改文件内容。sed的工作方式是读取文件内容，经流编辑之后，把结果显示到标准输出。因此，如果想要存储sed的处理结果，得自行运用转向输出将结果存成其他文件。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，能提高安装速度</span></div><div class=\"line\">$ sed -i <span class=\"_\">-e</span> <span class=\"string\">'s/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g'</span> ~/.rvm/config/db</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>##命令行编辑器</p>\n<p>###1. vi</p>\n<p><code>:w</code>：Vi保存当前编辑文件，但并不退出</p>\n<p><code>:w newfile</code>：此时Vi将把当前文件的内容保存到指定的newfile中，而原有文件保持不变</p>\n<p><code>File exists (use ! to override)</code></p>\n<p><code>:w! newfile</code>此时，若用户真的希望用文件的当前内容替换newfile中原有内容，可强行写入</p>\n<p><code>:q</code>：系统退出Vi返回到shell</p>\n<p><code>No write since last change (use ! to overrides)</code><br><code>:q!</code>：不想保存被修改后的文件而要强行退出Vi时，可放弃所作修改</p>\n<p><code>:wq</code>：Vi将先保存文件，然后退出Vi返回到shell。</p>\n<p><code>:x</code>：该命令的功能同命令模式下的<code>ZZ</code>命令功能相同，若当前编辑的文件曾被修改过，则Vi保存该文件后退出，返回到shell；若当前编辑的文件没被修改过，则Vi直接退出, 返回到shell。</p>\n<p>###2. gedit</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#以gedit打开名为av&amp;gv的文件</span></div><div class=\"line\">sudo gedit /home/文档/av&amp;gv</div></pre></td></tr></table></figure>\n<p>###3. nano </p>\n<p><code>sudo nano /etc/hosts</code></p>\n<p>完成后按ctrl+x退出，按y保存，回车，OK</p>\n<p>###4. sed</p>\n<blockquote>\n<p>sed是一种非交互式的流编辑器，可动态编辑文件。所谓非交互式是说，sed和传统的文本编辑器不同，并非和使用者直接互动，sed处理的对象是文件的数据流（称为stream/流）。</p>\n<p>特别注意：sed并不会更改文件内容。sed的工作方式是读取文件内容，经流编辑之后，把结果显示到标准输出。因此，如果想要存储sed的处理结果，得自行运用转向输出将结果存成其他文件。</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，能提高安装速度</span></div><div class=\"line\">$ sed -i <span class=\"_\">-e</span> <span class=\"string\">'s/ftp\\.ruby-lang\\.org\\/pub\\/ruby/ruby\\.taobao\\.org\\/mirrors\\/ruby/g'</span> ~/.rvm/config/db</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"关于不同翻墙软件：GoAgent和ShadowSocks","description":"","published":1,"_content":"\n## 伟大的HTTPS\n\n他们的实现原理各不相同，区别大致在于走的路径不同，比如GoAgent借助免费的GAE，那是谷歌自己在亚洲拉的光缆，所以说还是有一些可用的Google hosts，可以选择适合自己的、速度最快的Google可用IP段。[快速找到Google可用Hosts的方法 - 月光博客](http://www.williamlong.info/archives/3878.html)、[XX-Net自动搜索可用IP的代码 - GitHub](https://github.com/XX-net/XX-Net)、甚至于[访问Google的神器：Chrome的QUIC协议 - 月光博客](http://www.williamlong.info/archives/3879.html)。而ShadowSocks要自己先搭一个VPS，然后再通过走Socks5的方式走出去，相同的技术点就是使用HTTPS，这是加密的HTTP协议，GFW是没有那个能力知道其中传输的是什么东西。\n\n## 先决条件\n\n使用的先决条件就是是需要不同的账号，GoAgent需要自己去GAE上注册一个appid，这里有教程：[申请 Google App Engine 并创建 appid](https://github.com/goagent/goagent/blob/wiki/InstallGuide.md)。而SS需要自己去Linux系统的VPS上安装配置libev版本的服务端，在这里感谢一下Kimmy给我的ShadowSocks账号。但是用起来的时候都是一样的，可以直接利用源码来修改自己的账号并且部署使用，再者也可以利用GUI客户端简化使用，直接输入相关账号信息就好了。\n\n在使用的时候涉及到一点墙外/墙内服务器与自家Mac/PC的通信知识，两台电脑都是通过IP地址和端口来交流信息的，当然其中会涉及到不同的通信协议/方式（比如HTTP、HTTPS、SOCKS等），所以我们用的时候就需要设置和墙外服务器交互的本机端口。\n\n## 代理方式\n\n在代理的时候有全局/PAC/浏览器插件这么几种方式：\n\n- 全局就是全部使用代理去访问所有网站，可想而知访问一些国内网站会变慢或者根本打不开。\n\n- 而一般的GUI客户端也都集成了PAC代理，自动解析当前访问网站是否需要代理，一般用这个也就够了。\n\n- 当然在浏览器插件里面也可以设置PAC，访问该PAC的本地端口即可，然后浏览器插件就是可以设置自动切换，根据Rule List用不同的代理从而使不同的本机端口走不同的路径到达不同的墙内/墙外服务器。我用的SwitchyOmega插件还可以自己添加一些Rule访问一些不能访问而官方List没有加入的网站。\n\n![image](/public/img/tech/fight-with-gfw/Auto-Switch.png)\n\n## HTTPS错误\n\n然后这里有一个从根本上杜绝HTTPS请求错误的方法。原先，一边解决该问题的方法是用GoAgent里面的CA证书替换原有站点的证书，如果你没有导入根证书，你用打开twitter这类强制https的站点就会被浏览器阻止并收到警告。\n\n![image](/public/img/tech/fight-with-gfw/HTTPS-Error.png)\n\n在实际使用中就算导入了证书有时候也还是会出现错误，而且我记得知乎上面有讨论过有人伪造了GoAgent证书，所以说还是有一定风险的。\n\n## 混合代理\n\n所以我们设置一个名为GA&SS Mixed的混合代理，如下图：\n\n![image](/public/img/tech/fight-with-gfw/GA&SS-Mixed.png)\n\n已知GoAgent使用本地端口8103，而Shadowsocks本地端口为1080。从而HTTP、FTP为未加密连接可填入GoAgent的代理端口配置，而在SOCKS代理中填入ShadowSocks的端口号，如此一来，HTTPS就会自动走ShadowSocks，未加密流量就会走GoAgent，从而不用导入GoAgent CA证书。不过使用此方法带来的问题就是HTTPS的降速，除非你有速度良好的国外VPS用来设置ShadowSocks，因为大部分国外服务器代理速度都拼不过GAE的，毕竟Google足够强大啊。\n\n## 公司VPN\n\n其实到头来，目前对我来说最好的翻墙方式就是使用公司的VPN，简直太爽！但是偶尔也连不上北京的服务器，还有不能上Facebook的时候开一个GA&SS代理就行了。","source":"_posts/技术/2015-04-29-fight-with-gfw.md","raw":"---\nlayout: post\ntitle: \"关于不同翻墙软件：GoAgent和ShadowSocks\"\ndescription: \"\"\ncategory: 技术\ntags: [翻墙]\npublished: true\n---\n\n## 伟大的HTTPS\n\n他们的实现原理各不相同，区别大致在于走的路径不同，比如GoAgent借助免费的GAE，那是谷歌自己在亚洲拉的光缆，所以说还是有一些可用的Google hosts，可以选择适合自己的、速度最快的Google可用IP段。[快速找到Google可用Hosts的方法 - 月光博客](http://www.williamlong.info/archives/3878.html)、[XX-Net自动搜索可用IP的代码 - GitHub](https://github.com/XX-net/XX-Net)、甚至于[访问Google的神器：Chrome的QUIC协议 - 月光博客](http://www.williamlong.info/archives/3879.html)。而ShadowSocks要自己先搭一个VPS，然后再通过走Socks5的方式走出去，相同的技术点就是使用HTTPS，这是加密的HTTP协议，GFW是没有那个能力知道其中传输的是什么东西。\n\n## 先决条件\n\n使用的先决条件就是是需要不同的账号，GoAgent需要自己去GAE上注册一个appid，这里有教程：[申请 Google App Engine 并创建 appid](https://github.com/goagent/goagent/blob/wiki/InstallGuide.md)。而SS需要自己去Linux系统的VPS上安装配置libev版本的服务端，在这里感谢一下Kimmy给我的ShadowSocks账号。但是用起来的时候都是一样的，可以直接利用源码来修改自己的账号并且部署使用，再者也可以利用GUI客户端简化使用，直接输入相关账号信息就好了。\n\n在使用的时候涉及到一点墙外/墙内服务器与自家Mac/PC的通信知识，两台电脑都是通过IP地址和端口来交流信息的，当然其中会涉及到不同的通信协议/方式（比如HTTP、HTTPS、SOCKS等），所以我们用的时候就需要设置和墙外服务器交互的本机端口。\n\n## 代理方式\n\n在代理的时候有全局/PAC/浏览器插件这么几种方式：\n\n- 全局就是全部使用代理去访问所有网站，可想而知访问一些国内网站会变慢或者根本打不开。\n\n- 而一般的GUI客户端也都集成了PAC代理，自动解析当前访问网站是否需要代理，一般用这个也就够了。\n\n- 当然在浏览器插件里面也可以设置PAC，访问该PAC的本地端口即可，然后浏览器插件就是可以设置自动切换，根据Rule List用不同的代理从而使不同的本机端口走不同的路径到达不同的墙内/墙外服务器。我用的SwitchyOmega插件还可以自己添加一些Rule访问一些不能访问而官方List没有加入的网站。\n\n![image](/public/img/tech/fight-with-gfw/Auto-Switch.png)\n\n## HTTPS错误\n\n然后这里有一个从根本上杜绝HTTPS请求错误的方法。原先，一边解决该问题的方法是用GoAgent里面的CA证书替换原有站点的证书，如果你没有导入根证书，你用打开twitter这类强制https的站点就会被浏览器阻止并收到警告。\n\n![image](/public/img/tech/fight-with-gfw/HTTPS-Error.png)\n\n在实际使用中就算导入了证书有时候也还是会出现错误，而且我记得知乎上面有讨论过有人伪造了GoAgent证书，所以说还是有一定风险的。\n\n## 混合代理\n\n所以我们设置一个名为GA&SS Mixed的混合代理，如下图：\n\n![image](/public/img/tech/fight-with-gfw/GA&SS-Mixed.png)\n\n已知GoAgent使用本地端口8103，而Shadowsocks本地端口为1080。从而HTTP、FTP为未加密连接可填入GoAgent的代理端口配置，而在SOCKS代理中填入ShadowSocks的端口号，如此一来，HTTPS就会自动走ShadowSocks，未加密流量就会走GoAgent，从而不用导入GoAgent CA证书。不过使用此方法带来的问题就是HTTPS的降速，除非你有速度良好的国外VPS用来设置ShadowSocks，因为大部分国外服务器代理速度都拼不过GAE的，毕竟Google足够强大啊。\n\n## 公司VPN\n\n其实到头来，目前对我来说最好的翻墙方式就是使用公司的VPN，简直太爽！但是偶尔也连不上北京的服务器，还有不能上Facebook的时候开一个GA&SS代理就行了。","slug":"技术-2015-04-29-fight-with-gfw","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97o4001dtz3a2xjr49o8","content":"<h2 id=\"伟大的HTTPS\"><a href=\"#伟大的HTTPS\" class=\"headerlink\" title=\"伟大的HTTPS\"></a>伟大的HTTPS</h2><p>他们的实现原理各不相同，区别大致在于走的路径不同，比如GoAgent借助免费的GAE，那是谷歌自己在亚洲拉的光缆，所以说还是有一些可用的Google hosts，可以选择适合自己的、速度最快的Google可用IP段。<a href=\"http://www.williamlong.info/archives/3878.html\" target=\"_blank\" rel=\"external\">快速找到Google可用Hosts的方法 - 月光博客</a>、<a href=\"https://github.com/XX-net/XX-Net\" target=\"_blank\" rel=\"external\">XX-Net自动搜索可用IP的代码 - GitHub</a>、甚至于<a href=\"http://www.williamlong.info/archives/3879.html\" target=\"_blank\" rel=\"external\">访问Google的神器：Chrome的QUIC协议 - 月光博客</a>。而ShadowSocks要自己先搭一个VPS，然后再通过走Socks5的方式走出去，相同的技术点就是使用HTTPS，这是加密的HTTP协议，GFW是没有那个能力知道其中传输的是什么东西。</p>\n<h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h2><p>使用的先决条件就是是需要不同的账号，GoAgent需要自己去GAE上注册一个appid，这里有教程：<a href=\"https://github.com/goagent/goagent/blob/wiki/InstallGuide.md\" target=\"_blank\" rel=\"external\">申请 Google App Engine 并创建 appid</a>。而SS需要自己去Linux系统的VPS上安装配置libev版本的服务端，在这里感谢一下Kimmy给我的ShadowSocks账号。但是用起来的时候都是一样的，可以直接利用源码来修改自己的账号并且部署使用，再者也可以利用GUI客户端简化使用，直接输入相关账号信息就好了。</p>\n<p>在使用的时候涉及到一点墙外/墙内服务器与自家Mac/PC的通信知识，两台电脑都是通过IP地址和端口来交流信息的，当然其中会涉及到不同的通信协议/方式（比如HTTP、HTTPS、SOCKS等），所以我们用的时候就需要设置和墙外服务器交互的本机端口。</p>\n<h2 id=\"代理方式\"><a href=\"#代理方式\" class=\"headerlink\" title=\"代理方式\"></a>代理方式</h2><p>在代理的时候有全局/PAC/浏览器插件这么几种方式：</p>\n<ul>\n<li><p>全局就是全部使用代理去访问所有网站，可想而知访问一些国内网站会变慢或者根本打不开。</p>\n</li>\n<li><p>而一般的GUI客户端也都集成了PAC代理，自动解析当前访问网站是否需要代理，一般用这个也就够了。</p>\n</li>\n<li><p>当然在浏览器插件里面也可以设置PAC，访问该PAC的本地端口即可，然后浏览器插件就是可以设置自动切换，根据Rule List用不同的代理从而使不同的本机端口走不同的路径到达不同的墙内/墙外服务器。我用的SwitchyOmega插件还可以自己添加一些Rule访问一些不能访问而官方List没有加入的网站。</p>\n</li>\n</ul>\n<p><img src=\"/public/img/tech/fight-with-gfw/Auto-Switch.png\" alt=\"image\"></p>\n<h2 id=\"HTTPS错误\"><a href=\"#HTTPS错误\" class=\"headerlink\" title=\"HTTPS错误\"></a>HTTPS错误</h2><p>然后这里有一个从根本上杜绝HTTPS请求错误的方法。原先，一边解决该问题的方法是用GoAgent里面的CA证书替换原有站点的证书，如果你没有导入根证书，你用打开twitter这类强制https的站点就会被浏览器阻止并收到警告。</p>\n<p><img src=\"/public/img/tech/fight-with-gfw/HTTPS-Error.png\" alt=\"image\"></p>\n<p>在实际使用中就算导入了证书有时候也还是会出现错误，而且我记得知乎上面有讨论过有人伪造了GoAgent证书，所以说还是有一定风险的。</p>\n<h2 id=\"混合代理\"><a href=\"#混合代理\" class=\"headerlink\" title=\"混合代理\"></a>混合代理</h2><p>所以我们设置一个名为GA&amp;SS Mixed的混合代理，如下图：</p>\n<p><img src=\"/public/img/tech/fight-with-gfw/GA&amp;SS-Mixed.png\" alt=\"image\"></p>\n<p>已知GoAgent使用本地端口8103，而Shadowsocks本地端口为1080。从而HTTP、FTP为未加密连接可填入GoAgent的代理端口配置，而在SOCKS代理中填入ShadowSocks的端口号，如此一来，HTTPS就会自动走ShadowSocks，未加密流量就会走GoAgent，从而不用导入GoAgent CA证书。不过使用此方法带来的问题就是HTTPS的降速，除非你有速度良好的国外VPS用来设置ShadowSocks，因为大部分国外服务器代理速度都拼不过GAE的，毕竟Google足够强大啊。</p>\n<h2 id=\"公司VPN\"><a href=\"#公司VPN\" class=\"headerlink\" title=\"公司VPN\"></a>公司VPN</h2><p>其实到头来，目前对我来说最好的翻墙方式就是使用公司的VPN，简直太爽！但是偶尔也连不上北京的服务器，还有不能上Facebook的时候开一个GA&amp;SS代理就行了。</p>\n","excerpt":"","more":"<h2 id=\"伟大的HTTPS\"><a href=\"#伟大的HTTPS\" class=\"headerlink\" title=\"伟大的HTTPS\"></a>伟大的HTTPS</h2><p>他们的实现原理各不相同，区别大致在于走的路径不同，比如GoAgent借助免费的GAE，那是谷歌自己在亚洲拉的光缆，所以说还是有一些可用的Google hosts，可以选择适合自己的、速度最快的Google可用IP段。<a href=\"http://www.williamlong.info/archives/3878.html\">快速找到Google可用Hosts的方法 - 月光博客</a>、<a href=\"https://github.com/XX-net/XX-Net\">XX-Net自动搜索可用IP的代码 - GitHub</a>、甚至于<a href=\"http://www.williamlong.info/archives/3879.html\">访问Google的神器：Chrome的QUIC协议 - 月光博客</a>。而ShadowSocks要自己先搭一个VPS，然后再通过走Socks5的方式走出去，相同的技术点就是使用HTTPS，这是加密的HTTP协议，GFW是没有那个能力知道其中传输的是什么东西。</p>\n<h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h2><p>使用的先决条件就是是需要不同的账号，GoAgent需要自己去GAE上注册一个appid，这里有教程：<a href=\"https://github.com/goagent/goagent/blob/wiki/InstallGuide.md\">申请 Google App Engine 并创建 appid</a>。而SS需要自己去Linux系统的VPS上安装配置libev版本的服务端，在这里感谢一下Kimmy给我的ShadowSocks账号。但是用起来的时候都是一样的，可以直接利用源码来修改自己的账号并且部署使用，再者也可以利用GUI客户端简化使用，直接输入相关账号信息就好了。</p>\n<p>在使用的时候涉及到一点墙外/墙内服务器与自家Mac/PC的通信知识，两台电脑都是通过IP地址和端口来交流信息的，当然其中会涉及到不同的通信协议/方式（比如HTTP、HTTPS、SOCKS等），所以我们用的时候就需要设置和墙外服务器交互的本机端口。</p>\n<h2 id=\"代理方式\"><a href=\"#代理方式\" class=\"headerlink\" title=\"代理方式\"></a>代理方式</h2><p>在代理的时候有全局/PAC/浏览器插件这么几种方式：</p>\n<ul>\n<li><p>全局就是全部使用代理去访问所有网站，可想而知访问一些国内网站会变慢或者根本打不开。</p>\n</li>\n<li><p>而一般的GUI客户端也都集成了PAC代理，自动解析当前访问网站是否需要代理，一般用这个也就够了。</p>\n</li>\n<li><p>当然在浏览器插件里面也可以设置PAC，访问该PAC的本地端口即可，然后浏览器插件就是可以设置自动切换，根据Rule List用不同的代理从而使不同的本机端口走不同的路径到达不同的墙内/墙外服务器。我用的SwitchyOmega插件还可以自己添加一些Rule访问一些不能访问而官方List没有加入的网站。</p>\n</li>\n</ul>\n<p><img src=\"/public/img/tech/fight-with-gfw/Auto-Switch.png\" alt=\"image\"></p>\n<h2 id=\"HTTPS错误\"><a href=\"#HTTPS错误\" class=\"headerlink\" title=\"HTTPS错误\"></a>HTTPS错误</h2><p>然后这里有一个从根本上杜绝HTTPS请求错误的方法。原先，一边解决该问题的方法是用GoAgent里面的CA证书替换原有站点的证书，如果你没有导入根证书，你用打开twitter这类强制https的站点就会被浏览器阻止并收到警告。</p>\n<p><img src=\"/public/img/tech/fight-with-gfw/HTTPS-Error.png\" alt=\"image\"></p>\n<p>在实际使用中就算导入了证书有时候也还是会出现错误，而且我记得知乎上面有讨论过有人伪造了GoAgent证书，所以说还是有一定风险的。</p>\n<h2 id=\"混合代理\"><a href=\"#混合代理\" class=\"headerlink\" title=\"混合代理\"></a>混合代理</h2><p>所以我们设置一个名为GA&amp;SS Mixed的混合代理，如下图：</p>\n<p><img src=\"/public/img/tech/fight-with-gfw/GA&amp;SS-Mixed.png\" alt=\"image\"></p>\n<p>已知GoAgent使用本地端口8103，而Shadowsocks本地端口为1080。从而HTTP、FTP为未加密连接可填入GoAgent的代理端口配置，而在SOCKS代理中填入ShadowSocks的端口号，如此一来，HTTPS就会自动走ShadowSocks，未加密流量就会走GoAgent，从而不用导入GoAgent CA证书。不过使用此方法带来的问题就是HTTPS的降速，除非你有速度良好的国外VPS用来设置ShadowSocks，因为大部分国外服务器代理速度都拼不过GAE的，毕竟Google足够强大啊。</p>\n<h2 id=\"公司VPN\"><a href=\"#公司VPN\" class=\"headerlink\" title=\"公司VPN\"></a>公司VPN</h2><p>其实到头来，目前对我来说最好的翻墙方式就是使用公司的VPN，简直太爽！但是偶尔也连不上北京的服务器，还有不能上Facebook的时候开一个GA&amp;SS代理就行了。</p>\n"},{"layout":"post","title":"Ubuntu系统快捷键和文件处理命令","published":1,"_content":"\n##重要的快捷键\n\n###1. 桌面\n\n- ALT + F1: 聚焦到桌面左侧任务导航栏，可按上下键导航。\n- ALT + F2: 运行命令\n- ALT + F4: 关闭窗口\n- ALT + TAB: 切换程序窗口\n- ALT + 空格: 打开窗口菜单\n- PRINT: 桌面截图\n- ALT + PRINT：窗口截图\n\n###2. Dash面板\n\n在Dash面板中按CTRL + TAB: 切换到下一个子面板（可搜索不同类型项目，如程序、文件、音乐）\n\n- WIN + A: 搜索或浏览程序（Application）\n- WIN + F: 搜索或浏览文件（File）\n- WIN + M: 搜索或浏览音乐文件（Music）\n\n###3. Terminal终端\n\n- CTRL + ALT + T: 打开终端\n- TAB: 自动补全命令或文件名\n- CTRL + SHIFT + V: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）\n- CTRL + SHIFT + T: 新建标签页\n- CTRL + D: 关闭标签页\n- CTRL + L: 清楚屏幕\n- CTRL + R + 文本: 在输入历史中搜索\n- CTRL + A: 移动到行首\n- CTRL + E: 移动到行末\n- CTRL + C: 终止当前任务\n- CTRL + Z: 把当前任务放到后台运行（相当于运行命令时后面加&）\n\n##文件与目录管理\n\n###1. 目录表示\n```\n.         #代表此层目录\n..        #代表上一层目录\n-         #代表前一个工作目录\n~         #代表『目前使用者身份』所在的家目录\n~account  #代表 account 这个使用者的家目录(account是个帐号名称)\n```\n\n###2. 常见的文件目录处理命令\n\n1) 目录处理\n\n- cd：变换目录，cd是Change Directory的缩写\n- pwd：显示目前的目录，pwd是Print Working Directory的缩写\n- mkdir：创建一个新的目录\n- rmdir：删除一个空的目录\n\n```\npwd -P                 #-P：代表显示正确的完整路径，而不是连接路径\nmkdir -m 目录名称       #-m：直接配置文件的权限\nmkdir -p test1/test2   #-p：直接将所需要的目录(包含上一级目录)递回创建起来！\nPATH=\"$PATH\":/root     #将/root路径加入PATH环境变量中\n```\n\n2) 文件处理\n\n- mv：移走目录或者改文件名\n- cp：拷贝文件\n- rm：删除文件和目录\n- cat：显示文件内容\n- grep：文本内容搜索\n- find：文件或者目录名以及权限属主等匹配搜索\n- tar：解压命令\n- clear：清屏，相当与DOS下的cls\n- date：显示当前时间\n\n\n##文件权限与目录配置\n\n> Linux最优秀的地方之一，就在于它的多用户、多任务环境。Linux一般将文件可存取访问的身份分为3个类别，分别是owner（用户）、group（用户组）、others（其他人），且3种身份都各自有自己的read，write，execute等权限。\n\n###1. 文件权限概念\n当屏幕前面出现“Permission deny”的时候，肯定是权限设置错误。\n\n```sh\nls -al          #ls:list，列出所有文件的详细信息\nls -l           #显示文件，属性的第一个字段是文件的权限，共10位，比如-rwxr-xr--，表示owner具有rwx权限，group具有rx权限，others只具有r权限\n```\n\n###2. 文件种类与扩展名\n\n使用`ls -l`查看到的十个字符中，第一个字符为文件的类型：\n\n- -: 普通文件（regular file）\n- d: 目录文件（directory）\n- l: 连接文件，类似于windows的快捷方式（link）\n- b: 块设备文件（block）\n- c: 字符设备文件（character）\n- s: 套接字（sockets）\n- p: 管道（FIFO, pipe）\n\n###3. 改变文件属性与权限\n\n```\nchgrp       #改变文件所属用户组，具体句法记得使用 man page 查询\nchown       #改变文件所有者\nchmod       #改变文件的权限\n```\n其中，chmod修改权限的方法有两种，分别是符号法与数字法，数字法中r，w，x的数值分别是4，2，1。\n\n要开放“目录”（注意不是“文件”）给任何人看，应该至少同时给予r和x权限，但w权限不可随便给予。\n\n###4. 一个例子\n\n将install.log文件复制成为LAYtest.log，并且要给linanya这个人读写权限，可以这样做：\n\n```\n[root@localhost ~]# cp install.log LAYtest.log     #若复制文件夹，用cp -r\n[root@localhost ~]# ls -al LAYtest.log \n-rw-r--r-- 1 root root 62826 9月  17 15:19 LAYtest.log     #虽然完成了复制，但仍然是root的文件\n[root@localhost ~]# chown linanya LAYtest.log \n[root@localhost ~]# ls -al LAYtest.log       \n-rw-r--r-- 1 linanya root 62826 9月  17 15:19 LAYtest.log  #文件变成linanya的\n[root@localhost ~]# \n```\n\n##其他有用的种种\n\n###1. 查询命令功能 \n\n```\nman command  #command是要查询的命令名称\n```\n\n进入man命令后，可按`空格`往下翻页，按`q`键离开。\n\n在man page中，可以在任何时候输入`/keyword`来查询关键字，比如/date.\n\n###2. 正确的关机方法\n\n惯用的关机命令：\n\n```\nshutdown -h now     #立刻关机\nshutdown -h 20:25   #晚上8点25分关机\nshutdown -h +10     #过十分钟后关机\nshutdown -r now     #立刻重启\nshutdown -r +30 ‘The system will be reboot’    #再过30分钟关机，并显示后面的消息给所有在线用户\nshutdown -k now ‘The system will be reboot’    #仅发出警告，系统并不会真正关机\n```\n","source":"_posts/技术/2014-09-27-Linux-file-and-dir.md","raw":"---\nlayout: post\ntitle: Ubuntu系统快捷键和文件处理命令\ncategory: 技术\ntags: Ubuntu\npublished: true\n---\n\n##重要的快捷键\n\n###1. 桌面\n\n- ALT + F1: 聚焦到桌面左侧任务导航栏，可按上下键导航。\n- ALT + F2: 运行命令\n- ALT + F4: 关闭窗口\n- ALT + TAB: 切换程序窗口\n- ALT + 空格: 打开窗口菜单\n- PRINT: 桌面截图\n- ALT + PRINT：窗口截图\n\n###2. Dash面板\n\n在Dash面板中按CTRL + TAB: 切换到下一个子面板（可搜索不同类型项目，如程序、文件、音乐）\n\n- WIN + A: 搜索或浏览程序（Application）\n- WIN + F: 搜索或浏览文件（File）\n- WIN + M: 搜索或浏览音乐文件（Music）\n\n###3. Terminal终端\n\n- CTRL + ALT + T: 打开终端\n- TAB: 自动补全命令或文件名\n- CTRL + SHIFT + V: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）\n- CTRL + SHIFT + T: 新建标签页\n- CTRL + D: 关闭标签页\n- CTRL + L: 清楚屏幕\n- CTRL + R + 文本: 在输入历史中搜索\n- CTRL + A: 移动到行首\n- CTRL + E: 移动到行末\n- CTRL + C: 终止当前任务\n- CTRL + Z: 把当前任务放到后台运行（相当于运行命令时后面加&）\n\n##文件与目录管理\n\n###1. 目录表示\n```\n.         #代表此层目录\n..        #代表上一层目录\n-         #代表前一个工作目录\n~         #代表『目前使用者身份』所在的家目录\n~account  #代表 account 这个使用者的家目录(account是个帐号名称)\n```\n\n###2. 常见的文件目录处理命令\n\n1) 目录处理\n\n- cd：变换目录，cd是Change Directory的缩写\n- pwd：显示目前的目录，pwd是Print Working Directory的缩写\n- mkdir：创建一个新的目录\n- rmdir：删除一个空的目录\n\n```\npwd -P                 #-P：代表显示正确的完整路径，而不是连接路径\nmkdir -m 目录名称       #-m：直接配置文件的权限\nmkdir -p test1/test2   #-p：直接将所需要的目录(包含上一级目录)递回创建起来！\nPATH=\"$PATH\":/root     #将/root路径加入PATH环境变量中\n```\n\n2) 文件处理\n\n- mv：移走目录或者改文件名\n- cp：拷贝文件\n- rm：删除文件和目录\n- cat：显示文件内容\n- grep：文本内容搜索\n- find：文件或者目录名以及权限属主等匹配搜索\n- tar：解压命令\n- clear：清屏，相当与DOS下的cls\n- date：显示当前时间\n\n\n##文件权限与目录配置\n\n> Linux最优秀的地方之一，就在于它的多用户、多任务环境。Linux一般将文件可存取访问的身份分为3个类别，分别是owner（用户）、group（用户组）、others（其他人），且3种身份都各自有自己的read，write，execute等权限。\n\n###1. 文件权限概念\n当屏幕前面出现“Permission deny”的时候，肯定是权限设置错误。\n\n```sh\nls -al          #ls:list，列出所有文件的详细信息\nls -l           #显示文件，属性的第一个字段是文件的权限，共10位，比如-rwxr-xr--，表示owner具有rwx权限，group具有rx权限，others只具有r权限\n```\n\n###2. 文件种类与扩展名\n\n使用`ls -l`查看到的十个字符中，第一个字符为文件的类型：\n\n- -: 普通文件（regular file）\n- d: 目录文件（directory）\n- l: 连接文件，类似于windows的快捷方式（link）\n- b: 块设备文件（block）\n- c: 字符设备文件（character）\n- s: 套接字（sockets）\n- p: 管道（FIFO, pipe）\n\n###3. 改变文件属性与权限\n\n```\nchgrp       #改变文件所属用户组，具体句法记得使用 man page 查询\nchown       #改变文件所有者\nchmod       #改变文件的权限\n```\n其中，chmod修改权限的方法有两种，分别是符号法与数字法，数字法中r，w，x的数值分别是4，2，1。\n\n要开放“目录”（注意不是“文件”）给任何人看，应该至少同时给予r和x权限，但w权限不可随便给予。\n\n###4. 一个例子\n\n将install.log文件复制成为LAYtest.log，并且要给linanya这个人读写权限，可以这样做：\n\n```\n[root@localhost ~]# cp install.log LAYtest.log     #若复制文件夹，用cp -r\n[root@localhost ~]# ls -al LAYtest.log \n-rw-r--r-- 1 root root 62826 9月  17 15:19 LAYtest.log     #虽然完成了复制，但仍然是root的文件\n[root@localhost ~]# chown linanya LAYtest.log \n[root@localhost ~]# ls -al LAYtest.log       \n-rw-r--r-- 1 linanya root 62826 9月  17 15:19 LAYtest.log  #文件变成linanya的\n[root@localhost ~]# \n```\n\n##其他有用的种种\n\n###1. 查询命令功能 \n\n```\nman command  #command是要查询的命令名称\n```\n\n进入man命令后，可按`空格`往下翻页，按`q`键离开。\n\n在man page中，可以在任何时候输入`/keyword`来查询关键字，比如/date.\n\n###2. 正确的关机方法\n\n惯用的关机命令：\n\n```\nshutdown -h now     #立刻关机\nshutdown -h 20:25   #晚上8点25分关机\nshutdown -h +10     #过十分钟后关机\nshutdown -r now     #立刻重启\nshutdown -r +30 ‘The system will be reboot’    #再过30分钟关机，并显示后面的消息给所有在线用户\nshutdown -k now ‘The system will be reboot’    #仅发出警告，系统并不会真正关机\n```\n","slug":"技术-2014-09-27-Linux-file-and-dir","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97o8001gtz3awq4gk1cl","content":"<p>##重要的快捷键</p>\n<p>###1. 桌面</p>\n<ul>\n<li>ALT + F1: 聚焦到桌面左侧任务导航栏，可按上下键导航。</li>\n<li>ALT + F2: 运行命令</li>\n<li>ALT + F4: 关闭窗口</li>\n<li>ALT + TAB: 切换程序窗口</li>\n<li>ALT + 空格: 打开窗口菜单</li>\n<li>PRINT: 桌面截图</li>\n<li>ALT + PRINT：窗口截图</li>\n</ul>\n<p>###2. Dash面板</p>\n<p>在Dash面板中按CTRL + TAB: 切换到下一个子面板（可搜索不同类型项目，如程序、文件、音乐）</p>\n<ul>\n<li>WIN + A: 搜索或浏览程序（Application）</li>\n<li>WIN + F: 搜索或浏览文件（File）</li>\n<li>WIN + M: 搜索或浏览音乐文件（Music）</li>\n</ul>\n<p>###3. Terminal终端</p>\n<ul>\n<li>CTRL + ALT + T: 打开终端</li>\n<li>TAB: 自动补全命令或文件名</li>\n<li>CTRL + SHIFT + V: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）</li>\n<li>CTRL + SHIFT + T: 新建标签页</li>\n<li>CTRL + D: 关闭标签页</li>\n<li>CTRL + L: 清楚屏幕</li>\n<li>CTRL + R + 文本: 在输入历史中搜索</li>\n<li>CTRL + A: 移动到行首</li>\n<li>CTRL + E: 移动到行末</li>\n<li>CTRL + C: 终止当前任务</li>\n<li>CTRL + Z: 把当前任务放到后台运行（相当于运行命令时后面加&amp;）</li>\n</ul>\n<p>##文件与目录管理</p>\n<p>###1. 目录表示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.         #代表此层目录</div><div class=\"line\">..        #代表上一层目录</div><div class=\"line\">-         #代表前一个工作目录</div><div class=\"line\">~         #代表『目前使用者身份』所在的家目录</div><div class=\"line\">~account  #代表 account 这个使用者的家目录(account是个帐号名称)</div></pre></td></tr></table></figure></p>\n<p>###2. 常见的文件目录处理命令</p>\n<p>1) 目录处理</p>\n<ul>\n<li>cd：变换目录，cd是Change Directory的缩写</li>\n<li>pwd：显示目前的目录，pwd是Print Working Directory的缩写</li>\n<li>mkdir：创建一个新的目录</li>\n<li>rmdir：删除一个空的目录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwd -P                 #-P：代表显示正确的完整路径，而不是连接路径</div><div class=\"line\">mkdir -m 目录名称       #-m：直接配置文件的权限</div><div class=\"line\">mkdir -p test1/test2   #-p：直接将所需要的目录(包含上一级目录)递回创建起来！</div><div class=\"line\">PATH=&quot;$PATH&quot;:/root     #将/root路径加入PATH环境变量中</div></pre></td></tr></table></figure>\n<p>2) 文件处理</p>\n<ul>\n<li>mv：移走目录或者改文件名</li>\n<li>cp：拷贝文件</li>\n<li>rm：删除文件和目录</li>\n<li>cat：显示文件内容</li>\n<li>grep：文本内容搜索</li>\n<li>find：文件或者目录名以及权限属主等匹配搜索</li>\n<li>tar：解压命令</li>\n<li>clear：清屏，相当与DOS下的cls</li>\n<li>date：显示当前时间</li>\n</ul>\n<p>##文件权限与目录配置</p>\n<blockquote>\n<p>Linux最优秀的地方之一，就在于它的多用户、多任务环境。Linux一般将文件可存取访问的身份分为3个类别，分别是owner（用户）、group（用户组）、others（其他人），且3种身份都各自有自己的read，write，execute等权限。</p>\n</blockquote>\n<p>###1. 文件权限概念<br>当屏幕前面出现“Permission deny”的时候，肯定是权限设置错误。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -al          <span class=\"comment\">#ls:list，列出所有文件的详细信息</span></div><div class=\"line\">ls <span class=\"_\">-l</span>           <span class=\"comment\">#显示文件，属性的第一个字段是文件的权限，共10位，比如-rwxr-xr--，表示owner具有rwx权限，group具有rx权限，others只具有r权限</span></div></pre></td></tr></table></figure>\n<p>###2. 文件种类与扩展名</p>\n<p>使用<code>ls -l</code>查看到的十个字符中，第一个字符为文件的类型：</p>\n<ul>\n<li>-: 普通文件（regular file）</li>\n<li>d: 目录文件（directory）</li>\n<li>l: 连接文件，类似于windows的快捷方式（link）</li>\n<li>b: 块设备文件（block）</li>\n<li>c: 字符设备文件（character）</li>\n<li>s: 套接字（sockets）</li>\n<li>p: 管道（FIFO, pipe）</li>\n</ul>\n<p>###3. 改变文件属性与权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">chgrp       #改变文件所属用户组，具体句法记得使用 man page 查询</div><div class=\"line\">chown       #改变文件所有者</div><div class=\"line\">chmod       #改变文件的权限</div></pre></td></tr></table></figure>\n<p>其中，chmod修改权限的方法有两种，分别是符号法与数字法，数字法中r，w，x的数值分别是4，2，1。</p>\n<p>要开放“目录”（注意不是“文件”）给任何人看，应该至少同时给予r和x权限，但w权限不可随便给予。</p>\n<p>###4. 一个例子</p>\n<p>将install.log文件复制成为LAYtest.log，并且要给linanya这个人读写权限，可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# cp install.log LAYtest.log     #若复制文件夹，用cp -r</div><div class=\"line\">[root@localhost ~]# ls -al LAYtest.log </div><div class=\"line\">-rw-r--r-- 1 root root 62826 9月  17 15:19 LAYtest.log     #虽然完成了复制，但仍然是root的文件</div><div class=\"line\">[root@localhost ~]# chown linanya LAYtest.log </div><div class=\"line\">[root@localhost ~]# ls -al LAYtest.log       </div><div class=\"line\">-rw-r--r-- 1 linanya root 62826 9月  17 15:19 LAYtest.log  #文件变成linanya的</div><div class=\"line\">[root@localhost ~]#</div></pre></td></tr></table></figure>\n<p>##其他有用的种种</p>\n<p>###1. 查询命令功能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man command  #command是要查询的命令名称</div></pre></td></tr></table></figure>\n<p>进入man命令后，可按<code>空格</code>往下翻页，按<code>q</code>键离开。</p>\n<p>在man page中，可以在任何时候输入<code>/keyword</code>来查询关键字，比如/date.</p>\n<p>###2. 正确的关机方法</p>\n<p>惯用的关机命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -h now     #立刻关机</div><div class=\"line\">shutdown -h 20:25   #晚上8点25分关机</div><div class=\"line\">shutdown -h +10     #过十分钟后关机</div><div class=\"line\">shutdown -r now     #立刻重启</div><div class=\"line\">shutdown -r +30 ‘The system will be reboot’    #再过30分钟关机，并显示后面的消息给所有在线用户</div><div class=\"line\">shutdown -k now ‘The system will be reboot’    #仅发出警告，系统并不会真正关机</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>##重要的快捷键</p>\n<p>###1. 桌面</p>\n<ul>\n<li>ALT + F1: 聚焦到桌面左侧任务导航栏，可按上下键导航。</li>\n<li>ALT + F2: 运行命令</li>\n<li>ALT + F4: 关闭窗口</li>\n<li>ALT + TAB: 切换程序窗口</li>\n<li>ALT + 空格: 打开窗口菜单</li>\n<li>PRINT: 桌面截图</li>\n<li>ALT + PRINT：窗口截图</li>\n</ul>\n<p>###2. Dash面板</p>\n<p>在Dash面板中按CTRL + TAB: 切换到下一个子面板（可搜索不同类型项目，如程序、文件、音乐）</p>\n<ul>\n<li>WIN + A: 搜索或浏览程序（Application）</li>\n<li>WIN + F: 搜索或浏览文件（File）</li>\n<li>WIN + M: 搜索或浏览音乐文件（Music）</li>\n</ul>\n<p>###3. Terminal终端</p>\n<ul>\n<li>CTRL + ALT + T: 打开终端</li>\n<li>TAB: 自动补全命令或文件名</li>\n<li>CTRL + SHIFT + V: 粘贴（Linux中不需要复制的动作，文本被选择就自动被复制）</li>\n<li>CTRL + SHIFT + T: 新建标签页</li>\n<li>CTRL + D: 关闭标签页</li>\n<li>CTRL + L: 清楚屏幕</li>\n<li>CTRL + R + 文本: 在输入历史中搜索</li>\n<li>CTRL + A: 移动到行首</li>\n<li>CTRL + E: 移动到行末</li>\n<li>CTRL + C: 终止当前任务</li>\n<li>CTRL + Z: 把当前任务放到后台运行（相当于运行命令时后面加&amp;）</li>\n</ul>\n<p>##文件与目录管理</p>\n<p>###1. 目录表示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">.         #代表此层目录</div><div class=\"line\">..        #代表上一层目录</div><div class=\"line\">-         #代表前一个工作目录</div><div class=\"line\">~         #代表『目前使用者身份』所在的家目录</div><div class=\"line\">~account  #代表 account 这个使用者的家目录(account是个帐号名称)</div></pre></td></tr></table></figure></p>\n<p>###2. 常见的文件目录处理命令</p>\n<p>1) 目录处理</p>\n<ul>\n<li>cd：变换目录，cd是Change Directory的缩写</li>\n<li>pwd：显示目前的目录，pwd是Print Working Directory的缩写</li>\n<li>mkdir：创建一个新的目录</li>\n<li>rmdir：删除一个空的目录</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pwd -P                 #-P：代表显示正确的完整路径，而不是连接路径</div><div class=\"line\">mkdir -m 目录名称       #-m：直接配置文件的权限</div><div class=\"line\">mkdir -p test1/test2   #-p：直接将所需要的目录(包含上一级目录)递回创建起来！</div><div class=\"line\">PATH=&quot;$PATH&quot;:/root     #将/root路径加入PATH环境变量中</div></pre></td></tr></table></figure>\n<p>2) 文件处理</p>\n<ul>\n<li>mv：移走目录或者改文件名</li>\n<li>cp：拷贝文件</li>\n<li>rm：删除文件和目录</li>\n<li>cat：显示文件内容</li>\n<li>grep：文本内容搜索</li>\n<li>find：文件或者目录名以及权限属主等匹配搜索</li>\n<li>tar：解压命令</li>\n<li>clear：清屏，相当与DOS下的cls</li>\n<li>date：显示当前时间</li>\n</ul>\n<p>##文件权限与目录配置</p>\n<blockquote>\n<p>Linux最优秀的地方之一，就在于它的多用户、多任务环境。Linux一般将文件可存取访问的身份分为3个类别，分别是owner（用户）、group（用户组）、others（其他人），且3种身份都各自有自己的read，write，execute等权限。</p>\n</blockquote>\n<p>###1. 文件权限概念<br>当屏幕前面出现“Permission deny”的时候，肯定是权限设置错误。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ls -al          <span class=\"comment\">#ls:list，列出所有文件的详细信息</span></div><div class=\"line\">ls <span class=\"_\">-l</span>           <span class=\"comment\">#显示文件，属性的第一个字段是文件的权限，共10位，比如-rwxr-xr--，表示owner具有rwx权限，group具有rx权限，others只具有r权限</span></div></pre></td></tr></table></figure>\n<p>###2. 文件种类与扩展名</p>\n<p>使用<code>ls -l</code>查看到的十个字符中，第一个字符为文件的类型：</p>\n<ul>\n<li>-: 普通文件（regular file）</li>\n<li>d: 目录文件（directory）</li>\n<li>l: 连接文件，类似于windows的快捷方式（link）</li>\n<li>b: 块设备文件（block）</li>\n<li>c: 字符设备文件（character）</li>\n<li>s: 套接字（sockets）</li>\n<li>p: 管道（FIFO, pipe）</li>\n</ul>\n<p>###3. 改变文件属性与权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">chgrp       #改变文件所属用户组，具体句法记得使用 man page 查询</div><div class=\"line\">chown       #改变文件所有者</div><div class=\"line\">chmod       #改变文件的权限</div></pre></td></tr></table></figure>\n<p>其中，chmod修改权限的方法有两种，分别是符号法与数字法，数字法中r，w，x的数值分别是4，2，1。</p>\n<p>要开放“目录”（注意不是“文件”）给任何人看，应该至少同时给予r和x权限，但w权限不可随便给予。</p>\n<p>###4. 一个例子</p>\n<p>将install.log文件复制成为LAYtest.log，并且要给linanya这个人读写权限，可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@localhost ~]# cp install.log LAYtest.log     #若复制文件夹，用cp -r</div><div class=\"line\">[root@localhost ~]# ls -al LAYtest.log </div><div class=\"line\">-rw-r--r-- 1 root root 62826 9月  17 15:19 LAYtest.log     #虽然完成了复制，但仍然是root的文件</div><div class=\"line\">[root@localhost ~]# chown linanya LAYtest.log </div><div class=\"line\">[root@localhost ~]# ls -al LAYtest.log       </div><div class=\"line\">-rw-r--r-- 1 linanya root 62826 9月  17 15:19 LAYtest.log  #文件变成linanya的</div><div class=\"line\">[root@localhost ~]#</div></pre></td></tr></table></figure>\n<p>##其他有用的种种</p>\n<p>###1. 查询命令功能 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">man command  #command是要查询的命令名称</div></pre></td></tr></table></figure>\n<p>进入man命令后，可按<code>空格</code>往下翻页，按<code>q</code>键离开。</p>\n<p>在man page中，可以在任何时候输入<code>/keyword</code>来查询关键字，比如/date.</p>\n<p>###2. 正确的关机方法</p>\n<p>惯用的关机命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">shutdown -h now     #立刻关机</div><div class=\"line\">shutdown -h 20:25   #晚上8点25分关机</div><div class=\"line\">shutdown -h +10     #过十分钟后关机</div><div class=\"line\">shutdown -r now     #立刻重启</div><div class=\"line\">shutdown -r +30 ‘The system will be reboot’    #再过30分钟关机，并显示后面的消息给所有在线用户</div><div class=\"line\">shutdown -k now ‘The system will be reboot’    #仅发出警告，系统并不会真正关机</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"西南交大摄影集【一】","keywords":"校园","description":null,"_content":"\n![1](/public/img/photos/1.jpg)\n![2](/public/img/photos/2.jpg)\n![3](/public/img/photos/3.jpg)\n![4](/public/img/photos/4.jpg)\n![5](/public/img/photos/5.jpg)\n![6](/public/img/photos/6.jpg)\n![7](/public/img/photos/7.jpg)\n\n","source":"_posts/摄影/2013-09-21-SWJTU-photos.md","raw":"---\nlayout: post\ntitle: 西南交大摄影集【一】\ncategory: 摄影\ntags: 摄影\nkeywords: 校园\ndescription: \n---\n\n![1](/public/img/photos/1.jpg)\n![2](/public/img/photos/2.jpg)\n![3](/public/img/photos/3.jpg)\n![4](/public/img/photos/4.jpg)\n![5](/public/img/photos/5.jpg)\n![6](/public/img/photos/6.jpg)\n![7](/public/img/photos/7.jpg)\n\n","slug":"摄影-2013-09-21-SWJTU-photos","published":1,"date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97o9001itz3a3zz54yyf","content":"<p><img src=\"/public/img/photos/1.jpg\" alt=\"1\"><br><img src=\"/public/img/photos/2.jpg\" alt=\"2\"><br><img src=\"/public/img/photos/3.jpg\" alt=\"3\"><br><img src=\"/public/img/photos/4.jpg\" alt=\"4\"><br><img src=\"/public/img/photos/5.jpg\" alt=\"5\"><br><img src=\"/public/img/photos/6.jpg\" alt=\"6\"><br><img src=\"/public/img/photos/7.jpg\" alt=\"7\"></p>\n","excerpt":"","more":"<p><img src=\"/public/img/photos/1.jpg\" alt=\"1\"><br><img src=\"/public/img/photos/2.jpg\" alt=\"2\"><br><img src=\"/public/img/photos/3.jpg\" alt=\"3\"><br><img src=\"/public/img/photos/4.jpg\" alt=\"4\"><br><img src=\"/public/img/photos/5.jpg\" alt=\"5\"><br><img src=\"/public/img/photos/6.jpg\" alt=\"6\"><br><img src=\"/public/img/photos/7.jpg\" alt=\"7\"></p>\n"},{"layout":"post","title":"Node.js的正确安装与相关工具（Mac OS X）","published":1,"_content":"\n# Node.js的安装与相关工具的使用\n\n## 版本分裂\n\n- [node.js](https://nodejs.org/)\n- [io.js](https://io.js.org/en/index.html)\n\n## nvm\n\nnode version manager: 版本管理工具，可以同时安装不同的node版本包括io.js，并且随意切换相应的版本，甚至于特意使用某一版本的node来运行某个js文件。\n\n```bash\nnvm ls/ls-remote #列出已经安装的/远程仓库中的所有版本\nnvm install/uninstall [version] #安装/卸载某个版本\nnvm current #显示现在使用的版本，与node -v功能一样\nnvm use [version] #切换版本\nnvm which [version] #显示该版本所安装的位置\nnvm alias default [version] #在所有的shell都使用这个默认版本\n```\n\n## npm\n\nnode package manager: 包管理工具，安装和管理其他依赖库。\n\n```bash\nnpm install -g [package] #全局安装（如mocha）\nnpm install [package] #安装到当前文件夹（如chai）\nnpm install #按照package.json安装相关依赖\nnpm install [package] --save #自动把模块和版本号添加到dependencies部分\nnpm install [package] --save--dev #自动把模块和版本号添加到devdependencies部分\n```\n\n用于区别开发依赖模块和产品依赖模块，devDepandencies主要是配置测试框架， 例如jshint、mocha。\n\n## 坑：安装包\n\n如果从官方网站直接下载安装包安装的话会有一个问题：我安装io.js之后，它会在io.js和node的目录之间直接建立软链接（symlinks），从而导致了nvm怎么也不能把io.js切换到原来node.js版本\n\n```bash\n$ ll /usr/local/bin/{node,io.js}\n16864 -rwxrwxr-x. 1 root root 17268324 Jan 14 08:29 /usr/local/bin/iojs\n    0 lrwxrwxrwx. 1 root root        4 Jan 14 08:29 /usr/local/bin/node -> iojs\n```\n\n## Mac OS X下如何正确安装node\n\n### 通过brew安装nvm\n\n先使用brew安装好nvm（此时你还没有node呢，怎么`npm install nvm -g`）:\n\n```bash\nbrew update #更新软件源（就像sudo apt-get update）\nbrew install nvm \n```\n\n在安装完毕之后需要根据terminal里的提示做一下操作：\n\n```bash\nmkdir ~/.nvm #建立一个nvm版本库，之后安装的node版本都会在这里\ncp $(brew --prefix nvm)/nvm-exec ~/.nvm/ #拷贝brew目录中的nvm-exec执行文件到新建的目录\n```\n\n然后把以下的内容添加到`~/.bashrc`和`~/.zshrc`中，这样就可以在终端中使用bash和zsh命令行工具啦，不然会显示`command not found`。\n\n```bash\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh #实际上的目录是/usr/local/opt/nvm/nvm.sh\n```\n\n### 通过nvm安装node\n\n```bash\nnvm install 0.12.3 #首先安装好想要的版本\nnvm alias default 0.12.3 #然后设置默认的node版本以便于在所有shell中使用\n```\n\n通过`npm config get prefix`命令可以看到安装的路径是`/Users/Thoughtworks/.nvm/versions/node/v0.12.3`，所以nvm是直接把不同的node版本安装在先前所建立的.nvm文件夹中，易于管理。\n\n\n### 通过npm安装依赖库\n\n```bash\nnpm install -g npm@latest #首先更新一下npm到最新版\n```\n\n最好不要使用sudo安装全局库，所以需要更改一下npm工具的权限，就不用每次都需要输入密码啦\n\n```bash\nsudo chown -R $USER ~/.npm\n```\n\n### 切换软件源\n\n由于墙的问题，有时候npm install会在node-gyp rebuild那里卡很久，原因在于node-gyp编译时候需要Node.js源码来提供头文件，所以它会先尝试下载Node.js，但是由于下载速度奇慢所以就卡住不动了。\n\n为了获得更快的库安装速度，我们可以切换到淘宝的软件源，淘宝说与官方的同步频率为10分钟，所以还是相当可靠的。\n\n可以使用我们定制的cnpm命令行工具代替默认的npm:\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm install [package] #使用cnpm来安装对应的库\n```\n\n## 参考资料\n\n- [Mac 下如何删除 卸载 nodejs](http://www.freair.com/bbs/read.php?tid=1039)\n- [Introduction to npm - How To Node - NodeJS](http://howtonode.org/introduction-to-npm)\n- [03 - Fixing npm permissions _ npm Documentation](https://docs.npmjs.com/getting-started/fixing-npm-permissions)\n- [How to use npm global without sudo on OSX](http://www.johnpapa.net/how-to-use-npm-global-without-sudo-on-osx/)\n- [node.js - nvm keeps _forgetting_ node in new terminal session - Stack Overflow](http://stackoverflow.com/questions/24585261/nvm-keeps-forgetting-node-in-new-terminal-session)\n- [osx - What is the suggested way to install brew, node.js, io.js, nvm, npm on OS X_ - Stack Overflow](http://stackoverflow.com/questions/28017374/what-is-the-suggested-way-to-install-brew-node-js-io-js-nvm-npm-on-os-x)\n- [How to uninstall io.js (or io.js and Node.js together)](https://www.binarysludge.com/2015/01/14/how-to-uninstall-io-js-or-io-js-and-node-js-together/)\n- [Install Node.js and io.js Together (safely)](http://blog.modulus.io/install-nodejs-and-iojs-together-safely)\n\n","source":"_posts/技术/2015-05-17-how-to-install-nodejs-correctly.md","raw":"---\nlayout: post\ntitle: Node.js的正确安装与相关工具（Mac OS X）\ncategories: [技术]\ntags: [JavaScript]\npublished: True\n\n---\n\n# Node.js的安装与相关工具的使用\n\n## 版本分裂\n\n- [node.js](https://nodejs.org/)\n- [io.js](https://io.js.org/en/index.html)\n\n## nvm\n\nnode version manager: 版本管理工具，可以同时安装不同的node版本包括io.js，并且随意切换相应的版本，甚至于特意使用某一版本的node来运行某个js文件。\n\n```bash\nnvm ls/ls-remote #列出已经安装的/远程仓库中的所有版本\nnvm install/uninstall [version] #安装/卸载某个版本\nnvm current #显示现在使用的版本，与node -v功能一样\nnvm use [version] #切换版本\nnvm which [version] #显示该版本所安装的位置\nnvm alias default [version] #在所有的shell都使用这个默认版本\n```\n\n## npm\n\nnode package manager: 包管理工具，安装和管理其他依赖库。\n\n```bash\nnpm install -g [package] #全局安装（如mocha）\nnpm install [package] #安装到当前文件夹（如chai）\nnpm install #按照package.json安装相关依赖\nnpm install [package] --save #自动把模块和版本号添加到dependencies部分\nnpm install [package] --save--dev #自动把模块和版本号添加到devdependencies部分\n```\n\n用于区别开发依赖模块和产品依赖模块，devDepandencies主要是配置测试框架， 例如jshint、mocha。\n\n## 坑：安装包\n\n如果从官方网站直接下载安装包安装的话会有一个问题：我安装io.js之后，它会在io.js和node的目录之间直接建立软链接（symlinks），从而导致了nvm怎么也不能把io.js切换到原来node.js版本\n\n```bash\n$ ll /usr/local/bin/{node,io.js}\n16864 -rwxrwxr-x. 1 root root 17268324 Jan 14 08:29 /usr/local/bin/iojs\n    0 lrwxrwxrwx. 1 root root        4 Jan 14 08:29 /usr/local/bin/node -> iojs\n```\n\n## Mac OS X下如何正确安装node\n\n### 通过brew安装nvm\n\n先使用brew安装好nvm（此时你还没有node呢，怎么`npm install nvm -g`）:\n\n```bash\nbrew update #更新软件源（就像sudo apt-get update）\nbrew install nvm \n```\n\n在安装完毕之后需要根据terminal里的提示做一下操作：\n\n```bash\nmkdir ~/.nvm #建立一个nvm版本库，之后安装的node版本都会在这里\ncp $(brew --prefix nvm)/nvm-exec ~/.nvm/ #拷贝brew目录中的nvm-exec执行文件到新建的目录\n```\n\n然后把以下的内容添加到`~/.bashrc`和`~/.zshrc`中，这样就可以在终端中使用bash和zsh命令行工具啦，不然会显示`command not found`。\n\n```bash\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh #实际上的目录是/usr/local/opt/nvm/nvm.sh\n```\n\n### 通过nvm安装node\n\n```bash\nnvm install 0.12.3 #首先安装好想要的版本\nnvm alias default 0.12.3 #然后设置默认的node版本以便于在所有shell中使用\n```\n\n通过`npm config get prefix`命令可以看到安装的路径是`/Users/Thoughtworks/.nvm/versions/node/v0.12.3`，所以nvm是直接把不同的node版本安装在先前所建立的.nvm文件夹中，易于管理。\n\n\n### 通过npm安装依赖库\n\n```bash\nnpm install -g npm@latest #首先更新一下npm到最新版\n```\n\n最好不要使用sudo安装全局库，所以需要更改一下npm工具的权限，就不用每次都需要输入密码啦\n\n```bash\nsudo chown -R $USER ~/.npm\n```\n\n### 切换软件源\n\n由于墙的问题，有时候npm install会在node-gyp rebuild那里卡很久，原因在于node-gyp编译时候需要Node.js源码来提供头文件，所以它会先尝试下载Node.js，但是由于下载速度奇慢所以就卡住不动了。\n\n为了获得更快的库安装速度，我们可以切换到淘宝的软件源，淘宝说与官方的同步频率为10分钟，所以还是相当可靠的。\n\n可以使用我们定制的cnpm命令行工具代替默认的npm:\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\ncnpm install [package] #使用cnpm来安装对应的库\n```\n\n## 参考资料\n\n- [Mac 下如何删除 卸载 nodejs](http://www.freair.com/bbs/read.php?tid=1039)\n- [Introduction to npm - How To Node - NodeJS](http://howtonode.org/introduction-to-npm)\n- [03 - Fixing npm permissions _ npm Documentation](https://docs.npmjs.com/getting-started/fixing-npm-permissions)\n- [How to use npm global without sudo on OSX](http://www.johnpapa.net/how-to-use-npm-global-without-sudo-on-osx/)\n- [node.js - nvm keeps _forgetting_ node in new terminal session - Stack Overflow](http://stackoverflow.com/questions/24585261/nvm-keeps-forgetting-node-in-new-terminal-session)\n- [osx - What is the suggested way to install brew, node.js, io.js, nvm, npm on OS X_ - Stack Overflow](http://stackoverflow.com/questions/28017374/what-is-the-suggested-way-to-install-brew-node-js-io-js-nvm-npm-on-os-x)\n- [How to uninstall io.js (or io.js and Node.js together)](https://www.binarysludge.com/2015/01/14/how-to-uninstall-io-js-or-io-js-and-node-js-together/)\n- [Install Node.js and io.js Together (safely)](http://blog.modulus.io/install-nodejs-and-iojs-together-safely)\n\n","slug":"技术-2015-05-17-how-to-install-nodejs-correctly","date":"2015-05-18T04:57:41.000Z","updated":"2015-05-18T04:57:41.000Z","comments":1,"photos":[],"link":"","_id":"civpk97oa001mtz3apnb0n17d","content":"<h1 id=\"Node-js的安装与相关工具的使用\"><a href=\"#Node-js的安装与相关工具的使用\" class=\"headerlink\" title=\"Node.js的安装与相关工具的使用\"></a>Node.js的安装与相关工具的使用</h1><h2 id=\"版本分裂\"><a href=\"#版本分裂\" class=\"headerlink\" title=\"版本分裂\"></a>版本分裂</h2><ul>\n<li><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">node.js</a></li>\n<li><a href=\"https://io.js.org/en/index.html\" target=\"_blank\" rel=\"external\">io.js</a></li>\n</ul>\n<h2 id=\"nvm\"><a href=\"#nvm\" class=\"headerlink\" title=\"nvm\"></a>nvm</h2><p>node version manager: 版本管理工具，可以同时安装不同的node版本包括io.js，并且随意切换相应的版本，甚至于特意使用某一版本的node来运行某个js文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm ls/ls-remote <span class=\"comment\">#列出已经安装的/远程仓库中的所有版本</span></div><div class=\"line\">nvm install/uninstall [version] <span class=\"comment\">#安装/卸载某个版本</span></div><div class=\"line\">nvm current <span class=\"comment\">#显示现在使用的版本，与node -v功能一样</span></div><div class=\"line\">nvm use [version] <span class=\"comment\">#切换版本</span></div><div class=\"line\">nvm <span class=\"built_in\">which</span> [version] <span class=\"comment\">#显示该版本所安装的位置</span></div><div class=\"line\">nvm <span class=\"built_in\">alias</span> default [version] <span class=\"comment\">#在所有的shell都使用这个默认版本</span></div></pre></td></tr></table></figure>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>node package manager: 包管理工具，安装和管理其他依赖库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g [package] <span class=\"comment\">#全局安装（如mocha）</span></div><div class=\"line\">npm install [package] <span class=\"comment\">#安装到当前文件夹（如chai）</span></div><div class=\"line\">npm install <span class=\"comment\">#按照package.json安装相关依赖</span></div><div class=\"line\">npm install [package] --save <span class=\"comment\">#自动把模块和版本号添加到dependencies部分</span></div><div class=\"line\">npm install [package] --save--dev <span class=\"comment\">#自动把模块和版本号添加到devdependencies部分</span></div></pre></td></tr></table></figure>\n<p>用于区别开发依赖模块和产品依赖模块，devDepandencies主要是配置测试框架， 例如jshint、mocha。</p>\n<h2 id=\"坑：安装包\"><a href=\"#坑：安装包\" class=\"headerlink\" title=\"坑：安装包\"></a>坑：安装包</h2><p>如果从官方网站直接下载安装包安装的话会有一个问题：我安装io.js之后，它会在io.js和node的目录之间直接建立软链接（symlinks），从而导致了nvm怎么也不能把io.js切换到原来node.js版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/&#123;node,io.js&#125;</div><div class=\"line\">16864 -rwxrwxr-x. 1 root root 17268324 Jan 14 08:29 /usr/<span class=\"built_in\">local</span>/bin/iojs</div><div class=\"line\">    0 lrwxrwxrwx. 1 root root        4 Jan 14 08:29 /usr/<span class=\"built_in\">local</span>/bin/node -&gt; iojs</div></pre></td></tr></table></figure>\n<h2 id=\"Mac-OS-X下如何正确安装node\"><a href=\"#Mac-OS-X下如何正确安装node\" class=\"headerlink\" title=\"Mac OS X下如何正确安装node\"></a>Mac OS X下如何正确安装node</h2><h3 id=\"通过brew安装nvm\"><a href=\"#通过brew安装nvm\" class=\"headerlink\" title=\"通过brew安装nvm\"></a>通过brew安装nvm</h3><p>先使用brew安装好nvm（此时你还没有node呢，怎么<code>npm install nvm -g</code>）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update <span class=\"comment\">#更新软件源（就像sudo apt-get update）</span></div><div class=\"line\">brew install nvm</div></pre></td></tr></table></figure>\n<p>在安装完毕之后需要根据terminal里的提示做一下操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir ~/.nvm <span class=\"comment\">#建立一个nvm版本库，之后安装的node版本都会在这里</span></div><div class=\"line\">cp $(brew --prefix nvm)/nvm-exec ~/.nvm/ <span class=\"comment\">#拷贝brew目录中的nvm-exec执行文件到新建的目录</span></div></pre></td></tr></table></figure>\n<p>然后把以下的内容添加到<code>~/.bashrc</code>和<code>~/.zshrc</code>中，这样就可以在终端中使用bash和zsh命令行工具啦，不然会显示<code>command not found</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=~/.nvm</div><div class=\"line\"><span class=\"built_in\">source</span> $(brew --prefix nvm)/nvm.sh <span class=\"comment\">#实际上的目录是/usr/local/opt/nvm/nvm.sh</span></div></pre></td></tr></table></figure>\n<h3 id=\"通过nvm安装node\"><a href=\"#通过nvm安装node\" class=\"headerlink\" title=\"通过nvm安装node\"></a>通过nvm安装node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 0.12.3 <span class=\"comment\">#首先安装好想要的版本</span></div><div class=\"line\">nvm <span class=\"built_in\">alias</span> default 0.12.3 <span class=\"comment\">#然后设置默认的node版本以便于在所有shell中使用</span></div></pre></td></tr></table></figure>\n<p>通过<code>npm config get prefix</code>命令可以看到安装的路径是<code>/Users/Thoughtworks/.nvm/versions/node/v0.12.3</code>，所以nvm是直接把不同的node版本安装在先前所建立的.nvm文件夹中，易于管理。</p>\n<h3 id=\"通过npm安装依赖库\"><a href=\"#通过npm安装依赖库\" class=\"headerlink\" title=\"通过npm安装依赖库\"></a>通过npm安装依赖库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g npm@latest <span class=\"comment\">#首先更新一下npm到最新版</span></div></pre></td></tr></table></figure>\n<p>最好不要使用sudo安装全局库，所以需要更改一下npm工具的权限，就不用每次都需要输入密码啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chown -R <span class=\"variable\">$USER</span> ~/.npm</div></pre></td></tr></table></figure>\n<h3 id=\"切换软件源\"><a href=\"#切换软件源\" class=\"headerlink\" title=\"切换软件源\"></a>切换软件源</h3><p>由于墙的问题，有时候npm install会在node-gyp rebuild那里卡很久，原因在于node-gyp编译时候需要Node.js源码来提供头文件，所以它会先尝试下载Node.js，但是由于下载速度奇慢所以就卡住不动了。</p>\n<p>为了获得更快的库安装速度，我们可以切换到淘宝的软件源，淘宝说与官方的同步频率为10分钟，所以还是相当可靠的。</p>\n<p>可以使用我们定制的cnpm命令行工具代替默认的npm:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\">cnpm install [package] <span class=\"comment\">#使用cnpm来安装对应的库</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.freair.com/bbs/read.php?tid=1039\" target=\"_blank\" rel=\"external\">Mac 下如何删除 卸载 nodejs</a></li>\n<li><a href=\"http://howtonode.org/introduction-to-npm\" target=\"_blank\" rel=\"external\">Introduction to npm - How To Node - NodeJS</a></li>\n<li><a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\" target=\"_blank\" rel=\"external\">03 - Fixing npm permissions _ npm Documentation</a></li>\n<li><a href=\"http://www.johnpapa.net/how-to-use-npm-global-without-sudo-on-osx/\" target=\"_blank\" rel=\"external\">How to use npm global without sudo on OSX</a></li>\n<li><a href=\"http://stackoverflow.com/questions/24585261/nvm-keeps-forgetting-node-in-new-terminal-session\" target=\"_blank\" rel=\"external\">node.js - nvm keeps <em>forgetting</em> node in new terminal session - Stack Overflow</a></li>\n<li><a href=\"http://stackoverflow.com/questions/28017374/what-is-the-suggested-way-to-install-brew-node-js-io-js-nvm-npm-on-os-x\" target=\"_blank\" rel=\"external\">osx - What is the suggested way to install brew, node.js, io.js, nvm, npm on OS X_ - Stack Overflow</a></li>\n<li><a href=\"https://www.binarysludge.com/2015/01/14/how-to-uninstall-io-js-or-io-js-and-node-js-together/\" target=\"_blank\" rel=\"external\">How to uninstall io.js (or io.js and Node.js together)</a></li>\n<li><a href=\"http://blog.modulus.io/install-nodejs-and-iojs-together-safely\" target=\"_blank\" rel=\"external\">Install Node.js and io.js Together (safely)</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Node-js的安装与相关工具的使用\"><a href=\"#Node-js的安装与相关工具的使用\" class=\"headerlink\" title=\"Node.js的安装与相关工具的使用\"></a>Node.js的安装与相关工具的使用</h1><h2 id=\"版本分裂\"><a href=\"#版本分裂\" class=\"headerlink\" title=\"版本分裂\"></a>版本分裂</h2><ul>\n<li><a href=\"https://nodejs.org/\">node.js</a></li>\n<li><a href=\"https://io.js.org/en/index.html\">io.js</a></li>\n</ul>\n<h2 id=\"nvm\"><a href=\"#nvm\" class=\"headerlink\" title=\"nvm\"></a>nvm</h2><p>node version manager: 版本管理工具，可以同时安装不同的node版本包括io.js，并且随意切换相应的版本，甚至于特意使用某一版本的node来运行某个js文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm ls/ls-remote <span class=\"comment\">#列出已经安装的/远程仓库中的所有版本</span></div><div class=\"line\">nvm install/uninstall [version] <span class=\"comment\">#安装/卸载某个版本</span></div><div class=\"line\">nvm current <span class=\"comment\">#显示现在使用的版本，与node -v功能一样</span></div><div class=\"line\">nvm use [version] <span class=\"comment\">#切换版本</span></div><div class=\"line\">nvm <span class=\"built_in\">which</span> [version] <span class=\"comment\">#显示该版本所安装的位置</span></div><div class=\"line\">nvm <span class=\"built_in\">alias</span> default [version] <span class=\"comment\">#在所有的shell都使用这个默认版本</span></div></pre></td></tr></table></figure>\n<h2 id=\"npm\"><a href=\"#npm\" class=\"headerlink\" title=\"npm\"></a>npm</h2><p>node package manager: 包管理工具，安装和管理其他依赖库。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g [package] <span class=\"comment\">#全局安装（如mocha）</span></div><div class=\"line\">npm install [package] <span class=\"comment\">#安装到当前文件夹（如chai）</span></div><div class=\"line\">npm install <span class=\"comment\">#按照package.json安装相关依赖</span></div><div class=\"line\">npm install [package] --save <span class=\"comment\">#自动把模块和版本号添加到dependencies部分</span></div><div class=\"line\">npm install [package] --save--dev <span class=\"comment\">#自动把模块和版本号添加到devdependencies部分</span></div></pre></td></tr></table></figure>\n<p>用于区别开发依赖模块和产品依赖模块，devDepandencies主要是配置测试框架， 例如jshint、mocha。</p>\n<h2 id=\"坑：安装包\"><a href=\"#坑：安装包\" class=\"headerlink\" title=\"坑：安装包\"></a>坑：安装包</h2><p>如果从官方网站直接下载安装包安装的话会有一个问题：我安装io.js之后，它会在io.js和node的目录之间直接建立软链接（symlinks），从而导致了nvm怎么也不能把io.js切换到原来node.js版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ll /usr/<span class=\"built_in\">local</span>/bin/&#123;node,io.js&#125;</div><div class=\"line\">16864 -rwxrwxr-x. 1 root root 17268324 Jan 14 08:29 /usr/<span class=\"built_in\">local</span>/bin/iojs</div><div class=\"line\">    0 lrwxrwxrwx. 1 root root        4 Jan 14 08:29 /usr/<span class=\"built_in\">local</span>/bin/node -&gt; iojs</div></pre></td></tr></table></figure>\n<h2 id=\"Mac-OS-X下如何正确安装node\"><a href=\"#Mac-OS-X下如何正确安装node\" class=\"headerlink\" title=\"Mac OS X下如何正确安装node\"></a>Mac OS X下如何正确安装node</h2><h3 id=\"通过brew安装nvm\"><a href=\"#通过brew安装nvm\" class=\"headerlink\" title=\"通过brew安装nvm\"></a>通过brew安装nvm</h3><p>先使用brew安装好nvm（此时你还没有node呢，怎么<code>npm install nvm -g</code>）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update <span class=\"comment\">#更新软件源（就像sudo apt-get update）</span></div><div class=\"line\">brew install nvm</div></pre></td></tr></table></figure>\n<p>在安装完毕之后需要根据terminal里的提示做一下操作：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir ~/.nvm <span class=\"comment\">#建立一个nvm版本库，之后安装的node版本都会在这里</span></div><div class=\"line\">cp $(brew --prefix nvm)/nvm-exec ~/.nvm/ <span class=\"comment\">#拷贝brew目录中的nvm-exec执行文件到新建的目录</span></div></pre></td></tr></table></figure>\n<p>然后把以下的内容添加到<code>~/.bashrc</code>和<code>~/.zshrc</code>中，这样就可以在终端中使用bash和zsh命令行工具啦，不然会显示<code>command not found</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> NVM_DIR=~/.nvm</div><div class=\"line\"><span class=\"built_in\">source</span> $(brew --prefix nvm)/nvm.sh <span class=\"comment\">#实际上的目录是/usr/local/opt/nvm/nvm.sh</span></div></pre></td></tr></table></figure>\n<h3 id=\"通过nvm安装node\"><a href=\"#通过nvm安装node\" class=\"headerlink\" title=\"通过nvm安装node\"></a>通过nvm安装node</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">nvm install 0.12.3 <span class=\"comment\">#首先安装好想要的版本</span></div><div class=\"line\">nvm <span class=\"built_in\">alias</span> default 0.12.3 <span class=\"comment\">#然后设置默认的node版本以便于在所有shell中使用</span></div></pre></td></tr></table></figure>\n<p>通过<code>npm config get prefix</code>命令可以看到安装的路径是<code>/Users/Thoughtworks/.nvm/versions/node/v0.12.3</code>，所以nvm是直接把不同的node版本安装在先前所建立的.nvm文件夹中，易于管理。</p>\n<h3 id=\"通过npm安装依赖库\"><a href=\"#通过npm安装依赖库\" class=\"headerlink\" title=\"通过npm安装依赖库\"></a>通过npm安装依赖库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g npm@latest <span class=\"comment\">#首先更新一下npm到最新版</span></div></pre></td></tr></table></figure>\n<p>最好不要使用sudo安装全局库，所以需要更改一下npm工具的权限，就不用每次都需要输入密码啦</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chown -R <span class=\"variable\">$USER</span> ~/.npm</div></pre></td></tr></table></figure>\n<h3 id=\"切换软件源\"><a href=\"#切换软件源\" class=\"headerlink\" title=\"切换软件源\"></a>切换软件源</h3><p>由于墙的问题，有时候npm install会在node-gyp rebuild那里卡很久，原因在于node-gyp编译时候需要Node.js源码来提供头文件，所以它会先尝试下载Node.js，但是由于下载速度奇慢所以就卡住不动了。</p>\n<p>为了获得更快的库安装速度，我们可以切换到淘宝的软件源，淘宝说与官方的同步频率为10分钟，所以还是相当可靠的。</p>\n<p>可以使用我们定制的cnpm命令行工具代替默认的npm:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</div><div class=\"line\">cnpm install [package] <span class=\"comment\">#使用cnpm来安装对应的库</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.freair.com/bbs/read.php?tid=1039\">Mac 下如何删除 卸载 nodejs</a></li>\n<li><a href=\"http://howtonode.org/introduction-to-npm\">Introduction to npm - How To Node - NodeJS</a></li>\n<li><a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\">03 - Fixing npm permissions _ npm Documentation</a></li>\n<li><a href=\"http://www.johnpapa.net/how-to-use-npm-global-without-sudo-on-osx/\">How to use npm global without sudo on OSX</a></li>\n<li><a href=\"http://stackoverflow.com/questions/24585261/nvm-keeps-forgetting-node-in-new-terminal-session\">node.js - nvm keeps <em>forgetting</em> node in new terminal session - Stack Overflow</a></li>\n<li><a href=\"http://stackoverflow.com/questions/28017374/what-is-the-suggested-way-to-install-brew-node-js-io-js-nvm-npm-on-os-x\">osx - What is the suggested way to install brew, node.js, io.js, nvm, npm on OS X_ - Stack Overflow</a></li>\n<li><a href=\"https://www.binarysludge.com/2015/01/14/how-to-uninstall-io-js-or-io-js-and-node-js-together/\">How to uninstall io.js (or io.js and Node.js together)</a></li>\n<li><a href=\"http://blog.modulus.io/install-nodejs-and-iojs-together-safely\">Install Node.js and io.js Together (safely)</a></li>\n</ul>\n"},{"layout":"post","title":"React.js 复习笔记：组件组合与复用","published":1,"_content":"\n\n## Why React?\n\nReact的创建是为了数据的频繁交互：通过组件化轻松展现数据；数据改变时，自动更新UI，并且只更新有改变的部分。\n\n## 组件入门\n\n### 创建组件\n`var component = React.createClass()`用来创建一个组件类，组件类似于函数，可以把它看作有着props和state状态并且可以返回（`render()`）HTML结构的函数。\n\n`React.render()`将React的模板转化为HTML，并插入到相应的DOM结构中，`React.render`方法可以渲染HTML结构，也可以渲染React组件。\n\n### 渲染HTML标签\n\n声明变量采用首字母小写\n\n```js\nvar myDivElement = <div className=\"foo\" />;\nReact.render(myDivElement, document.body);\n```\n\n### 渲染React组件\n\n声明变量采用首字母大写\n\n```js\nvar MyComponent = React.createClass({/*...*/});\nvar myElement = <MyComponent someProperty={true} />;\nReact.render(myElement, document.body);\n```\n\n## 关于JSX\n\n### 目的\n\n组件应该关注分离，而不是模板和展现逻辑分离。结构化标记和生成结构化标记的代码是紧密关联的，此外，展现逻辑一般都很复杂，使用模板语言会使展现变得笨重。\n\n### 语法说明\n\n标签的属性class和for，需要写成className和htmlFor，因为两个属性是JavaScript的保留字和关键字，无论你是否使用JSX。\n\nJSX是HTML和JavaScript混写的语法，当遇到`<`，JSX就当HTML解析，遇到`{`就当JavaScript解析。\n\n\n### 虚拟DOM\nReact使用了内部的虚拟DOM，当数据发生改变，先在虚拟DOM中计算变化，最后将变动的部分反应到真实的DOM中。\n\n```js\n#app.js\nvar HelloWorld = React.createClass({\n    render: function () {\n        return (\n            <p>\n            Hello,<input type=\"text\" placeholder=\"Your name here\" value={this.props.date.toTimeString()}/>!\n            It is {this.props.date.toTimeString()}\n            </p>\n        );\n    }\n});\n\nsetInterval(function () {\n    React.render(\n        <HelloWorld date={new Date()} />,\n        document.getElementById('example')\n    );\n}, 500);\n```\n\ninput相对于这个组件来说，是它的属性，并且没有嵌入动态的数据。而在React的设定中，属性是不可变的。\n\n## 组件属性\n\n### 属性延伸\n\n例如component组件有两个动态的属性foo和bar：\n\n`var component = <Component foo={x} bar={y} />;`\n\n而实际上，有些属性可能是后续添加的，当需要拓展我们的属性的时候，定义个一个属性对象，并通过`{...props}`的方式引入，React会帮我们拷贝到组件的props属性中。\n\n可以使用属性延伸覆盖原来的属性值：\n\n```js\nvar Component = React.createClass({\n    render: function () {\n        return <div {...this.props} title=\"zzz\">this is a div</div>\n    }\n});\n\nReact.render(\n    <Component name=\"xxx\" title=\"yyy\"/>,\n    document.body\n);\n```\n\n### style属性\n\n在React中写行内样式时，要这样写，不能采用引号的书写方式\n\n```js\nReact.render(\n    <div style={{color:'red'}}>\n        xxxxx\n    </div>,\n    document.body\n);\n```\n\n## UI交互\n\n### this.props\n\n```js\nvar HelloWorld = React.createClass({\n    render: function () {\n        return (\n            <div data-title={this.props.title}>{this.props.content}</div>\n        )\n    }\n});\n\nReact.render(\n    <HelloWorld title=\"this is title\" content=\"this is content\"/>,\n    document.body\n);\n```\n\n通过`this.props`我们可以拿到组件被使用时的属性，this.props就是组件的属性集合。React将组件的子节点封装到了children属性中，当子节点只有一个的时候直接通过`this.props.children`获取子节点的内容。当子节点的个数大于1时，`this.props.children`返回的是一个数组。\n\n### this.state\n\n`this.state`是同UI交互最重要的属性，this指向组件的实例。React将UI简单的看作状态机，拥有各种各样的状态，并在各种状态间切换，这样很容易保持UI的一致性。在React中，你只要改变组件的状态，就会重新渲染UI，React会在最有效的方式下更新DOM。通过调用`setState(data, callback)`方法，改变状态，就会触发React更新UI。\n\n```js\nvar ColorButton = React.createClass({\n    getInitialState: function () {\n        return {bColor: 'green'};\n    },\n    render: function () {\n        return (\n            <button onClick={this.handleClick} style={{backgroundColor: this.state.bColor}}>click</button>\n        )\n    },\n    // 点击按钮，切换按钮的颜色：\n    handleClick: function (event) {\n        this.setState({bColor: this.state.bColor === 'green' ? 'red' : 'green'});\n    }\n});\n\nReact.render(\n    <ColorButton />,\n    document.body\n);\n```\n\n`getInitialState`是用来初始化state，`handleClick`是用来处理我们点击事件的，如果想要拿到当前操作的DOM，通过参数event获取。\n\n### 两种属性的运用\n\n大部分的组件应该从props属性中获取数据并渲染。但有的时候组件得相应用户输入，同服务器交互，这些情况下会用到state。React的官方说法是：尽可能的保持你的组件无状态化。为了实现这个目标，得保持你的状态同业务逻辑分离，并减少冗余信息，尽可能保持组件的单一职责。\n\nReact官方推荐的一种模式就是：构建几个无状态的组件用来渲染数据，在这些之上构建一个有状态的组件同用户和服务交互，数据通过props传递给无状态的组件。\n\n```js\nvar RenderComponent = React.createClass({\n    render: function () {\n        return (\n            <ul>\n                {\n                    this.props['data-list'].map(function (item) {\n                        return (<li>{item}</li>)\n                    })\n                }\n            </ul>\n        )\n    }\n});\n\nvar StateComponent = React.createClass({\n    getInitialState: function () {\n        return {list: ['xxx', 'yyy']};\n    },\n    render: function () {\n        return (\n            <div>\n                <button onClick={this.handleClick}>click</button>\n                <RenderComponent data-list={this.state.list}/>\n            </div>\n\n        )\n    },\n    handleClick: function () {\n        this.setState({list: [1, 2, 3]});\n    }\n});\n\nReact.render(\n    <StateComponent />,\n    document.body\n);\n```\n\nReact还允许我们下面的方式自定义属性的默认值：\n\n```js\nvar ComponentWithDefaultProps = React.createClass({\n  getDefaultProps: function() {\n    return {\n      value: 'default value'\n    };\n  }\n  /* ... */\n});\n```\n\n`getDefaultProps()`的值将会被缓存，当`this.props.value`的值没有被父组件指定时，将会使用这个默认值。\n\n\n## 组件组合\n\n官方示例：\n\n```js\nvar Avatar = React.createClass({\n  render: function() {\n    return (\n      <div>\n        <ProfilePic username={this.props.username} />\n        <ProfileLink username={this.props.username} />\n      </div>\n    );\n  }\n});\n\nvar ProfilePic = React.createClass({\n  render: function() {\n    return (\n      <img src={'http://graph.facebook.com/' + this.props.username + '/picture'} />\n    );\n  }\n});\n\nvar ProfileLink = React.createClass({\n  render: function() {\n    return (\n      <a href={'http://www.facebook.com/' + this.props.username}>\n        {this.props.username}\n      </a>\n    );\n  }\n});\n\nReact.render(\n  <Avatar username=\"pwh\" />,\n  document.getElementById('example')\n);\n```\n\n上面的例子中，组件Avatar包含了组件ProfilePic和ProfileLink。在React当中，**所有者就是可以设置其他组件props的组件**。说的通俗点：如果组件X出现在了组件Y的render()方法中，那么组件Y就是所有者。正如我们之前所讨论的，组件不能改变props—props应同所有者初始化它们时保持一致。\n\n### 父子节点的关系\n\n一定要弄清所有者和被所有关系，父子关系的区别。所有者和被所有者关系是针对React组件的，父子关系是针对DOM结构的。来上面的例子来说，Avatar是所有者，拥有div、ProfilePic、ProfileLink，而div和ProfilePic、ProfileLink则是父子关系。\n\n`<Parent><Child /></Parent>`创建实例，Parent可以通过this.props.children获取到它的子内容。\n\n### 动态子节点\n\n在React更新DOM的过程中，子节点是根据它们渲染的顺序调节的。实际上，React改变第一个子节点的内容，然后删除最后一个节点。所以当数据来自于搜索结果或者新的组件被添加到数据流里，在这种情况下，每个子节点都需要保持唯一的标识，此时可以给每个子节点添加key属性。\n\n```js\nvar Component = React.createClass({\n    render: function() {\n        var results = this.props.results;\n        return (\n            <ol>\n                {results.map(function(result) {\n                    return <li key={result.id}>{result.text}</li>;\n                })}\n            </ol>\n        );\n    }\n});\n```\n\n### 单向数据流\n\n在React当中，数据通过props从所有者向子节点传递，这就是所谓的单向数据绑定了。所有者将它拥有的组件props绑定到它的props或者state，这个过程将会递归进行。数据改变就会通过组件到子组件再到子节点即所有的DOM节点，最终反映到UI层。\n\n\n","source":"_posts/技术/2015-05-14-learning-reactjs.md","raw":"---\nlayout: post\ntitle: React.js 复习笔记：组件组合与复用\ncategories: [技术]\ntags: []\npublished: True\n\n---\n\n\n## Why React?\n\nReact的创建是为了数据的频繁交互：通过组件化轻松展现数据；数据改变时，自动更新UI，并且只更新有改变的部分。\n\n## 组件入门\n\n### 创建组件\n`var component = React.createClass()`用来创建一个组件类，组件类似于函数，可以把它看作有着props和state状态并且可以返回（`render()`）HTML结构的函数。\n\n`React.render()`将React的模板转化为HTML，并插入到相应的DOM结构中，`React.render`方法可以渲染HTML结构，也可以渲染React组件。\n\n### 渲染HTML标签\n\n声明变量采用首字母小写\n\n```js\nvar myDivElement = <div className=\"foo\" />;\nReact.render(myDivElement, document.body);\n```\n\n### 渲染React组件\n\n声明变量采用首字母大写\n\n```js\nvar MyComponent = React.createClass({/*...*/});\nvar myElement = <MyComponent someProperty={true} />;\nReact.render(myElement, document.body);\n```\n\n## 关于JSX\n\n### 目的\n\n组件应该关注分离，而不是模板和展现逻辑分离。结构化标记和生成结构化标记的代码是紧密关联的，此外，展现逻辑一般都很复杂，使用模板语言会使展现变得笨重。\n\n### 语法说明\n\n标签的属性class和for，需要写成className和htmlFor，因为两个属性是JavaScript的保留字和关键字，无论你是否使用JSX。\n\nJSX是HTML和JavaScript混写的语法，当遇到`<`，JSX就当HTML解析，遇到`{`就当JavaScript解析。\n\n\n### 虚拟DOM\nReact使用了内部的虚拟DOM，当数据发生改变，先在虚拟DOM中计算变化，最后将变动的部分反应到真实的DOM中。\n\n```js\n#app.js\nvar HelloWorld = React.createClass({\n    render: function () {\n        return (\n            <p>\n            Hello,<input type=\"text\" placeholder=\"Your name here\" value={this.props.date.toTimeString()}/>!\n            It is {this.props.date.toTimeString()}\n            </p>\n        );\n    }\n});\n\nsetInterval(function () {\n    React.render(\n        <HelloWorld date={new Date()} />,\n        document.getElementById('example')\n    );\n}, 500);\n```\n\ninput相对于这个组件来说，是它的属性，并且没有嵌入动态的数据。而在React的设定中，属性是不可变的。\n\n## 组件属性\n\n### 属性延伸\n\n例如component组件有两个动态的属性foo和bar：\n\n`var component = <Component foo={x} bar={y} />;`\n\n而实际上，有些属性可能是后续添加的，当需要拓展我们的属性的时候，定义个一个属性对象，并通过`{...props}`的方式引入，React会帮我们拷贝到组件的props属性中。\n\n可以使用属性延伸覆盖原来的属性值：\n\n```js\nvar Component = React.createClass({\n    render: function () {\n        return <div {...this.props} title=\"zzz\">this is a div</div>\n    }\n});\n\nReact.render(\n    <Component name=\"xxx\" title=\"yyy\"/>,\n    document.body\n);\n```\n\n### style属性\n\n在React中写行内样式时，要这样写，不能采用引号的书写方式\n\n```js\nReact.render(\n    <div style={{color:'red'}}>\n        xxxxx\n    </div>,\n    document.body\n);\n```\n\n## UI交互\n\n### this.props\n\n```js\nvar HelloWorld = React.createClass({\n    render: function () {\n        return (\n            <div data-title={this.props.title}>{this.props.content}</div>\n        )\n    }\n});\n\nReact.render(\n    <HelloWorld title=\"this is title\" content=\"this is content\"/>,\n    document.body\n);\n```\n\n通过`this.props`我们可以拿到组件被使用时的属性，this.props就是组件的属性集合。React将组件的子节点封装到了children属性中，当子节点只有一个的时候直接通过`this.props.children`获取子节点的内容。当子节点的个数大于1时，`this.props.children`返回的是一个数组。\n\n### this.state\n\n`this.state`是同UI交互最重要的属性，this指向组件的实例。React将UI简单的看作状态机，拥有各种各样的状态，并在各种状态间切换，这样很容易保持UI的一致性。在React中，你只要改变组件的状态，就会重新渲染UI，React会在最有效的方式下更新DOM。通过调用`setState(data, callback)`方法，改变状态，就会触发React更新UI。\n\n```js\nvar ColorButton = React.createClass({\n    getInitialState: function () {\n        return {bColor: 'green'};\n    },\n    render: function () {\n        return (\n            <button onClick={this.handleClick} style={{backgroundColor: this.state.bColor}}>click</button>\n        )\n    },\n    // 点击按钮，切换按钮的颜色：\n    handleClick: function (event) {\n        this.setState({bColor: this.state.bColor === 'green' ? 'red' : 'green'});\n    }\n});\n\nReact.render(\n    <ColorButton />,\n    document.body\n);\n```\n\n`getInitialState`是用来初始化state，`handleClick`是用来处理我们点击事件的，如果想要拿到当前操作的DOM，通过参数event获取。\n\n### 两种属性的运用\n\n大部分的组件应该从props属性中获取数据并渲染。但有的时候组件得相应用户输入，同服务器交互，这些情况下会用到state。React的官方说法是：尽可能的保持你的组件无状态化。为了实现这个目标，得保持你的状态同业务逻辑分离，并减少冗余信息，尽可能保持组件的单一职责。\n\nReact官方推荐的一种模式就是：构建几个无状态的组件用来渲染数据，在这些之上构建一个有状态的组件同用户和服务交互，数据通过props传递给无状态的组件。\n\n```js\nvar RenderComponent = React.createClass({\n    render: function () {\n        return (\n            <ul>\n                {\n                    this.props['data-list'].map(function (item) {\n                        return (<li>{item}</li>)\n                    })\n                }\n            </ul>\n        )\n    }\n});\n\nvar StateComponent = React.createClass({\n    getInitialState: function () {\n        return {list: ['xxx', 'yyy']};\n    },\n    render: function () {\n        return (\n            <div>\n                <button onClick={this.handleClick}>click</button>\n                <RenderComponent data-list={this.state.list}/>\n            </div>\n\n        )\n    },\n    handleClick: function () {\n        this.setState({list: [1, 2, 3]});\n    }\n});\n\nReact.render(\n    <StateComponent />,\n    document.body\n);\n```\n\nReact还允许我们下面的方式自定义属性的默认值：\n\n```js\nvar ComponentWithDefaultProps = React.createClass({\n  getDefaultProps: function() {\n    return {\n      value: 'default value'\n    };\n  }\n  /* ... */\n});\n```\n\n`getDefaultProps()`的值将会被缓存，当`this.props.value`的值没有被父组件指定时，将会使用这个默认值。\n\n\n## 组件组合\n\n官方示例：\n\n```js\nvar Avatar = React.createClass({\n  render: function() {\n    return (\n      <div>\n        <ProfilePic username={this.props.username} />\n        <ProfileLink username={this.props.username} />\n      </div>\n    );\n  }\n});\n\nvar ProfilePic = React.createClass({\n  render: function() {\n    return (\n      <img src={'http://graph.facebook.com/' + this.props.username + '/picture'} />\n    );\n  }\n});\n\nvar ProfileLink = React.createClass({\n  render: function() {\n    return (\n      <a href={'http://www.facebook.com/' + this.props.username}>\n        {this.props.username}\n      </a>\n    );\n  }\n});\n\nReact.render(\n  <Avatar username=\"pwh\" />,\n  document.getElementById('example')\n);\n```\n\n上面的例子中，组件Avatar包含了组件ProfilePic和ProfileLink。在React当中，**所有者就是可以设置其他组件props的组件**。说的通俗点：如果组件X出现在了组件Y的render()方法中，那么组件Y就是所有者。正如我们之前所讨论的，组件不能改变props—props应同所有者初始化它们时保持一致。\n\n### 父子节点的关系\n\n一定要弄清所有者和被所有关系，父子关系的区别。所有者和被所有者关系是针对React组件的，父子关系是针对DOM结构的。来上面的例子来说，Avatar是所有者，拥有div、ProfilePic、ProfileLink，而div和ProfilePic、ProfileLink则是父子关系。\n\n`<Parent><Child /></Parent>`创建实例，Parent可以通过this.props.children获取到它的子内容。\n\n### 动态子节点\n\n在React更新DOM的过程中，子节点是根据它们渲染的顺序调节的。实际上，React改变第一个子节点的内容，然后删除最后一个节点。所以当数据来自于搜索结果或者新的组件被添加到数据流里，在这种情况下，每个子节点都需要保持唯一的标识，此时可以给每个子节点添加key属性。\n\n```js\nvar Component = React.createClass({\n    render: function() {\n        var results = this.props.results;\n        return (\n            <ol>\n                {results.map(function(result) {\n                    return <li key={result.id}>{result.text}</li>;\n                })}\n            </ol>\n        );\n    }\n});\n```\n\n### 单向数据流\n\n在React当中，数据通过props从所有者向子节点传递，这就是所谓的单向数据绑定了。所有者将它拥有的组件props绑定到它的props或者state，这个过程将会递归进行。数据改变就会通过组件到子组件再到子节点即所有的DOM节点，最终反映到UI层。\n\n\n","slug":"技术-2015-05-14-learning-reactjs","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97ob001qtz3a2gl5dofl","content":"<h2 id=\"Why-React\"><a href=\"#Why-React\" class=\"headerlink\" title=\"Why React?\"></a>Why React?</h2><p>React的创建是为了数据的频繁交互：通过组件化轻松展现数据；数据改变时，自动更新UI，并且只更新有改变的部分。</p>\n<h2 id=\"组件入门\"><a href=\"#组件入门\" class=\"headerlink\" title=\"组件入门\"></a>组件入门</h2><h3 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h3><p><code>var component = React.createClass()</code>用来创建一个组件类，组件类似于函数，可以把它看作有着props和state状态并且可以返回（<code>render()</code>）HTML结构的函数。</p>\n<p><code>React.render()</code>将React的模板转化为HTML，并插入到相应的DOM结构中，<code>React.render</code>方法可以渲染HTML结构，也可以渲染React组件。</p>\n<h3 id=\"渲染HTML标签\"><a href=\"#渲染HTML标签\" class=\"headerlink\" title=\"渲染HTML标签\"></a>渲染HTML标签</h3><p>声明变量采用首字母小写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDivElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"foo\"</span> /&gt;</span>;</span></div><div class=\"line\">React.render(myDivElement, document.body);</div></pre></td></tr></table></figure>\n<h3 id=\"渲染React组件\"><a href=\"#渲染React组件\" class=\"headerlink\" title=\"渲染React组件\"></a>渲染React组件</h3><p>声明变量采用首字母大写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = React.createClass(&#123;<span class=\"comment\">/*...*/</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> myElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">someProperty</span>=<span class=\"string\">&#123;true&#125;</span> /&gt;</span>;</span></div><div class=\"line\">React.render(myElement, document.body);</div></pre></td></tr></table></figure>\n<h2 id=\"关于JSX\"><a href=\"#关于JSX\" class=\"headerlink\" title=\"关于JSX\"></a>关于JSX</h2><h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>组件应该关注分离，而不是模板和展现逻辑分离。结构化标记和生成结构化标记的代码是紧密关联的，此外，展现逻辑一般都很复杂，使用模板语言会使展现变得笨重。</p>\n<h3 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h3><p>标签的属性class和for，需要写成className和htmlFor，因为两个属性是JavaScript的保留字和关键字，无论你是否使用JSX。</p>\n<p>JSX是HTML和JavaScript混写的语法，当遇到<code>&lt;</code>，JSX就当HTML解析，遇到<code>{</code>就当JavaScript解析。</p>\n<h3 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h3><p>React使用了内部的虚拟DOM，当数据发生改变，先在虚拟DOM中计算变化，最后将变动的部分反应到真实的DOM中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">#app.js</div><div class=\"line\">var HelloWorld = React.createClass(&#123;</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;p&gt;</div><div class=\"line\">            Hello,&lt;input type=\"text\" placeholder=\"Your name here\" value=&#123;this.props.date.toTimeString()&#125;/&gt;!</div><div class=\"line\">            It is &#123;this.props.date.toTimeString()&#125;</div><div class=\"line\">            &lt;/p&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setInterval(function () &#123;</div><div class=\"line\">    React.render(</div><div class=\"line\">        &lt;HelloWorld date=&#123;new Date()&#125; /&gt;,</div><div class=\"line\">        document.getElementById('example')</div><div class=\"line\">    );</div><div class=\"line\">&#125;, 500);</div></pre></td></tr></table></figure>\n<p>input相对于这个组件来说，是它的属性，并且没有嵌入动态的数据。而在React的设定中，属性是不可变的。</p>\n<h2 id=\"组件属性\"><a href=\"#组件属性\" class=\"headerlink\" title=\"组件属性\"></a>组件属性</h2><h3 id=\"属性延伸\"><a href=\"#属性延伸\" class=\"headerlink\" title=\"属性延伸\"></a>属性延伸</h3><p>例如component组件有两个动态的属性foo和bar：</p>\n<p><code>var component = &lt;Component foo={x} bar={y} /&gt;;</code></p>\n<p>而实际上，有些属性可能是后续添加的，当需要拓展我们的属性的时候，定义个一个属性对象，并通过<code>{...props}</code>的方式引入，React会帮我们拷贝到组件的props属性中。</p>\n<p>可以使用属性延伸覆盖原来的属性值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Component = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> &#123;<span class=\"attr\">...this.props</span>&#125; <span class=\"attr\">title</span>=<span class=\"string\">\"zzz\"</span>&gt;</span>this is a div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">name</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"yyy\"</span>/&gt;</span>,</span></div><div class=\"line\">    document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h3 id=\"style属性\"><a href=\"#style属性\" class=\"headerlink\" title=\"style属性\"></a>style属性</h3><p>在React中写行内样式时，要这样写，不能采用引号的书写方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125;&gt;</span></span></div><div class=\"line\">        xxxxx</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"UI交互\"><a href=\"#UI交互\" class=\"headerlink\" title=\"UI交互\"></a>UI交互</h2><h3 id=\"this-props\"><a href=\"#this-props\" class=\"headerlink\" title=\"this.props\"></a>this.props</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HelloWorld = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-title</span>=<span class=\"string\">&#123;this.props.title&#125;</span>&gt;</span>&#123;this.props.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HelloWorld</span> <span class=\"attr\">title</span>=<span class=\"string\">\"this is title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"this is content\"</span>/&gt;</span>,</span></div><div class=\"line\">    document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>通过<code>this.props</code>我们可以拿到组件被使用时的属性，this.props就是组件的属性集合。React将组件的子节点封装到了children属性中，当子节点只有一个的时候直接通过<code>this.props.children</code>获取子节点的内容。当子节点的个数大于1时，<code>this.props.children</code>返回的是一个数组。</p>\n<h3 id=\"this-state\"><a href=\"#this-state\" class=\"headerlink\" title=\"this.state\"></a>this.state</h3><p><code>this.state</code>是同UI交互最重要的属性，this指向组件的实例。React将UI简单的看作状态机，拥有各种各样的状态，并在各种状态间切换，这样很容易保持UI的一致性。在React中，你只要改变组件的状态，就会重新渲染UI，React会在最有效的方式下更新DOM。通过调用<code>setState(data, callback)</code>方法，改变状态，就会触发React更新UI。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ColorButton = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">bColor</span>: <span class=\"string\">'green'</span>&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;backgroundColor:</span> <span class=\"attr\">this.state.bColor</span>&#125;&#125;&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 点击按钮，切换按钮的颜色：</span></div><div class=\"line\">    handleClick: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">bColor</span>: <span class=\"keyword\">this</span>.state.bColor === <span class=\"string\">'green'</span> ? <span class=\"string\">'red'</span> : <span class=\"string\">'green'</span>&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ColorButton</span> /&gt;</span>,</span></div><div class=\"line\">    document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p><code>getInitialState</code>是用来初始化state，<code>handleClick</code>是用来处理我们点击事件的，如果想要拿到当前操作的DOM，通过参数event获取。</p>\n<h3 id=\"两种属性的运用\"><a href=\"#两种属性的运用\" class=\"headerlink\" title=\"两种属性的运用\"></a>两种属性的运用</h3><p>大部分的组件应该从props属性中获取数据并渲染。但有的时候组件得相应用户输入，同服务器交互，这些情况下会用到state。React的官方说法是：尽可能的保持你的组件无状态化。为了实现这个目标，得保持你的状态同业务逻辑分离，并减少冗余信息，尽可能保持组件的单一职责。</p>\n<p>React官方推荐的一种模式就是：构建几个无状态的组件用来渲染数据，在这些之上构建一个有状态的组件同用户和服务交互，数据通过props传递给无状态的组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> RenderComponent = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    this.props['data-list'].map(function (item) &#123;</div><div class=\"line\">                        return (<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> StateComponent = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">list</span>: [<span class=\"string\">'xxx'</span>, <span class=\"string\">'yyy'</span>]&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">RenderComponent</span> <span class=\"attr\">data-list</span>=<span class=\"string\">&#123;this.state.list&#125;/</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        )</div><div class=\"line\">    &#125;,</div><div class=\"line\">    handleClick: function () &#123;</div><div class=\"line\">        this.setState(&#123;list: [1, 2, 3]&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StateComponent</span> /&gt;</span>,</div><div class=\"line\">    document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>React还允许我们下面的方式自定义属性的默认值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ComponentWithDefaultProps = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getDefaultProps</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">value</span>: <span class=\"string\">'default value'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/* ... */</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>getDefaultProps()</code>的值将会被缓存，当<code>this.props.value</code>的值没有被父组件指定时，将会使用这个默认值。</p>\n<h2 id=\"组件组合\"><a href=\"#组件组合\" class=\"headerlink\" title=\"组件组合\"></a>组件组合</h2><p>官方示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Avatar = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;ProfilePic username=&#123;this.props.username&#125; /&gt;</div><div class=\"line\">        &lt;ProfileLink username=&#123;this.props.username&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var ProfilePic = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;img src=&#123;'http://graph.facebook.com/' + this.props.username + '/picture'&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var ProfileLink = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;a href=&#123;'http://www.facebook.com/' + this.props.username&#125;&gt;</div><div class=\"line\">        &#123;this.props.username&#125;</div><div class=\"line\">      &lt;/a&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">  &lt;Avatar username=\"pwh\" /&gt;,</div><div class=\"line\">  document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>上面的例子中，组件Avatar包含了组件ProfilePic和ProfileLink。在React当中，<strong>所有者就是可以设置其他组件props的组件</strong>。说的通俗点：如果组件X出现在了组件Y的render()方法中，那么组件Y就是所有者。正如我们之前所讨论的，组件不能改变props—props应同所有者初始化它们时保持一致。</p>\n<h3 id=\"父子节点的关系\"><a href=\"#父子节点的关系\" class=\"headerlink\" title=\"父子节点的关系\"></a>父子节点的关系</h3><p>一定要弄清所有者和被所有关系，父子关系的区别。所有者和被所有者关系是针对React组件的，父子关系是针对DOM结构的。来上面的例子来说，Avatar是所有者，拥有div、ProfilePic、ProfileLink，而div和ProfilePic、ProfileLink则是父子关系。</p>\n<p><code>&lt;Parent&gt;&lt;Child /&gt;&lt;/Parent&gt;</code>创建实例，Parent可以通过this.props.children获取到它的子内容。</p>\n<h3 id=\"动态子节点\"><a href=\"#动态子节点\" class=\"headerlink\" title=\"动态子节点\"></a>动态子节点</h3><p>在React更新DOM的过程中，子节点是根据它们渲染的顺序调节的。实际上，React改变第一个子节点的内容，然后删除最后一个节点。所以当数据来自于搜索结果或者新的组件被添加到数据流里，在这种情况下，每个子节点都需要保持唯一的标识，此时可以给每个子节点添加key属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Component = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> results = <span class=\"keyword\">this</span>.props.results;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span></div><div class=\"line\">                &#123;results.map(function(result) &#123;</div><div class=\"line\">                    return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;result.id&#125;</span>&gt;</span>&#123;result.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>;</div><div class=\"line\">                &#125;)&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>在React当中，数据通过props从所有者向子节点传递，这就是所谓的单向数据绑定了。所有者将它拥有的组件props绑定到它的props或者state，这个过程将会递归进行。数据改变就会通过组件到子组件再到子节点即所有的DOM节点，最终反映到UI层。</p>\n","excerpt":"","more":"<h2 id=\"Why-React\"><a href=\"#Why-React\" class=\"headerlink\" title=\"Why React?\"></a>Why React?</h2><p>React的创建是为了数据的频繁交互：通过组件化轻松展现数据；数据改变时，自动更新UI，并且只更新有改变的部分。</p>\n<h2 id=\"组件入门\"><a href=\"#组件入门\" class=\"headerlink\" title=\"组件入门\"></a>组件入门</h2><h3 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h3><p><code>var component = React.createClass()</code>用来创建一个组件类，组件类似于函数，可以把它看作有着props和state状态并且可以返回（<code>render()</code>）HTML结构的函数。</p>\n<p><code>React.render()</code>将React的模板转化为HTML，并插入到相应的DOM结构中，<code>React.render</code>方法可以渲染HTML结构，也可以渲染React组件。</p>\n<h3 id=\"渲染HTML标签\"><a href=\"#渲染HTML标签\" class=\"headerlink\" title=\"渲染HTML标签\"></a>渲染HTML标签</h3><p>声明变量采用首字母小写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myDivElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"foo\"</span> /&gt;</span>;</div><div class=\"line\">React.render(myDivElement, document.body);</span></div></pre></td></tr></table></figure>\n<h3 id=\"渲染React组件\"><a href=\"#渲染React组件\" class=\"headerlink\" title=\"渲染React组件\"></a>渲染React组件</h3><p>声明变量采用首字母大写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> MyComponent = React.createClass(&#123;<span class=\"comment\">/*...*/</span>&#125;);</div><div class=\"line\"><span class=\"keyword\">var</span> myElement = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MyComponent</span> <span class=\"attr\">someProperty</span>=<span class=\"string\">&#123;true&#125;</span> /&gt;</span>;</div><div class=\"line\">React.render(myElement, document.body);</span></div></pre></td></tr></table></figure>\n<h2 id=\"关于JSX\"><a href=\"#关于JSX\" class=\"headerlink\" title=\"关于JSX\"></a>关于JSX</h2><h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>组件应该关注分离，而不是模板和展现逻辑分离。结构化标记和生成结构化标记的代码是紧密关联的，此外，展现逻辑一般都很复杂，使用模板语言会使展现变得笨重。</p>\n<h3 id=\"语法说明\"><a href=\"#语法说明\" class=\"headerlink\" title=\"语法说明\"></a>语法说明</h3><p>标签的属性class和for，需要写成className和htmlFor，因为两个属性是JavaScript的保留字和关键字，无论你是否使用JSX。</p>\n<p>JSX是HTML和JavaScript混写的语法，当遇到<code>&lt;</code>，JSX就当HTML解析，遇到<code>{</code>就当JavaScript解析。</p>\n<h3 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h3><p>React使用了内部的虚拟DOM，当数据发生改变，先在虚拟DOM中计算变化，最后将变动的部分反应到真实的DOM中。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">#app.js</div><div class=\"line\">var HelloWorld = React.createClass(&#123;</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        return (</div><div class=\"line\">            &lt;p&gt;</div><div class=\"line\">            Hello,&lt;input type=\"text\" placeholder=\"Your name here\" value=&#123;this.props.date.toTimeString()&#125;/&gt;!</div><div class=\"line\">            It is &#123;this.props.date.toTimeString()&#125;</div><div class=\"line\">            &lt;/p&gt;</div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">setInterval(function () &#123;</div><div class=\"line\">    React.render(</div><div class=\"line\">        &lt;HelloWorld date=&#123;new Date()&#125; /&gt;,</div><div class=\"line\">        document.getElementById('example')</div><div class=\"line\">    );</div><div class=\"line\">&#125;, 500);</div></pre></td></tr></table></figure>\n<p>input相对于这个组件来说，是它的属性，并且没有嵌入动态的数据。而在React的设定中，属性是不可变的。</p>\n<h2 id=\"组件属性\"><a href=\"#组件属性\" class=\"headerlink\" title=\"组件属性\"></a>组件属性</h2><h3 id=\"属性延伸\"><a href=\"#属性延伸\" class=\"headerlink\" title=\"属性延伸\"></a>属性延伸</h3><p>例如component组件有两个动态的属性foo和bar：</p>\n<p><code>var component = &lt;Component foo={x} bar={y} /&gt;;</code></p>\n<p>而实际上，有些属性可能是后续添加的，当需要拓展我们的属性的时候，定义个一个属性对象，并通过<code>{...props}</code>的方式引入，React会帮我们拷贝到组件的props属性中。</p>\n<p>可以使用属性延伸覆盖原来的属性值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Component = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> &#123;<span class=\"attr\">...this.props</span>&#125; <span class=\"attr\">title</span>=<span class=\"string\">\"zzz\"</span>&gt;</span>this is a div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Component</span> <span class=\"attr\">name</span>=<span class=\"string\">\"xxx\"</span> <span class=\"attr\">title</span>=<span class=\"string\">\"yyy\"</span>/&gt;</span>,</div><div class=\"line\">    document.body</div><div class=\"line\">);</span></div></pre></td></tr></table></figure>\n<h3 id=\"style属性\"><a href=\"#style属性\" class=\"headerlink\" title=\"style属性\"></a>style属性</h3><p>在React中写行内样式时，要这样写，不能采用引号的书写方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;color:</span>'<span class=\"attr\">red</span>'&#125;&#125;&gt;</span></div><div class=\"line\">        xxxxx</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>,</div><div class=\"line\">    <span class=\"built_in\">document</span>.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h2 id=\"UI交互\"><a href=\"#UI交互\" class=\"headerlink\" title=\"UI交互\"></a>UI交互</h2><h3 id=\"this-props\"><a href=\"#this-props\" class=\"headerlink\" title=\"this.props\"></a>this.props</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> HelloWorld = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">data-title</span>=<span class=\"string\">&#123;this.props.title&#125;</span>&gt;</span>&#123;this.props.content&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">HelloWorld</span> <span class=\"attr\">title</span>=<span class=\"string\">\"this is title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"this is content\"</span>/&gt;</span>,</div><div class=\"line\">    document.body</div><div class=\"line\">);</span></div></pre></td></tr></table></figure>\n<p>通过<code>this.props</code>我们可以拿到组件被使用时的属性，this.props就是组件的属性集合。React将组件的子节点封装到了children属性中，当子节点只有一个的时候直接通过<code>this.props.children</code>获取子节点的内容。当子节点的个数大于1时，<code>this.props.children</code>返回的是一个数组。</p>\n<h3 id=\"this-state\"><a href=\"#this-state\" class=\"headerlink\" title=\"this.state\"></a>this.state</h3><p><code>this.state</code>是同UI交互最重要的属性，this指向组件的实例。React将UI简单的看作状态机，拥有各种各样的状态，并在各种状态间切换，这样很容易保持UI的一致性。在React中，你只要改变组件的状态，就会重新渲染UI，React会在最有效的方式下更新DOM。通过调用<code>setState(data, callback)</code>方法，改变状态，就会触发React更新UI。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ColorButton = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">bColor</span>: <span class=\"string\">'green'</span>&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;backgroundColor:</span> <span class=\"attr\">this.state.bColor</span>&#125;&#125;&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"comment\">// 点击按钮，切换按钮的颜色：</span></div><div class=\"line\">    handleClick: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;<span class=\"attr\">bColor</span>: <span class=\"keyword\">this</span>.state.bColor === <span class=\"string\">'green'</span> ? <span class=\"string\">'red'</span> : <span class=\"string\">'green'</span>&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ColorButton</span> /&gt;</span>,</div><div class=\"line\">    document.body</div><div class=\"line\">);</span></div></pre></td></tr></table></figure>\n<p><code>getInitialState</code>是用来初始化state，<code>handleClick</code>是用来处理我们点击事件的，如果想要拿到当前操作的DOM，通过参数event获取。</p>\n<h3 id=\"两种属性的运用\"><a href=\"#两种属性的运用\" class=\"headerlink\" title=\"两种属性的运用\"></a>两种属性的运用</h3><p>大部分的组件应该从props属性中获取数据并渲染。但有的时候组件得相应用户输入，同服务器交互，这些情况下会用到state。React的官方说法是：尽可能的保持你的组件无状态化。为了实现这个目标，得保持你的状态同业务逻辑分离，并减少冗余信息，尽可能保持组件的单一职责。</p>\n<p>React官方推荐的一种模式就是：构建几个无状态的组件用来渲染数据，在这些之上构建一个有状态的组件同用户和服务交互，数据通过props传递给无状态的组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> RenderComponent = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    this.props['data-list'].map(function (item) &#123;</div><div class=\"line\">                        return (<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;item&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>)</div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> StateComponent = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">getInitialState</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"attr\">list</span>: [<span class=\"string\">'xxx'</span>, <span class=\"string\">'yyy'</span>]&#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.handleClick&#125;</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">RenderComponent</span> <span class=\"attr\">data-list</span>=<span class=\"string\">&#123;this.state.list&#125;/</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">        )</div><div class=\"line\">    &#125;,</div><div class=\"line\">    handleClick: function () &#123;</div><div class=\"line\">        this.setState(&#123;list: [1, 2, 3]&#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">StateComponent</span> /&gt;</span>,</div><div class=\"line\">    document.body</div><div class=\"line\">);</span></div></pre></td></tr></table></figure>\n<p>React还允许我们下面的方式自定义属性的默认值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ComponentWithDefaultProps = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">getDefaultProps</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">value</span>: <span class=\"string\">'default value'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">/* ... */</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>getDefaultProps()</code>的值将会被缓存，当<code>this.props.value</code>的值没有被父组件指定时，将会使用这个默认值。</p>\n<h2 id=\"组件组合\"><a href=\"#组件组合\" class=\"headerlink\" title=\"组件组合\"></a>组件组合</h2><p>官方示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Avatar = React.createClass(&#123;</div><div class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;ProfilePic username=&#123;this.props.username&#125; /&gt;</div><div class=\"line\">        &lt;ProfileLink username=&#123;this.props.username&#125; /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var ProfilePic = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;img src=&#123;'http://graph.facebook.com/' + this.props.username + '/picture'&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">var ProfileLink = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;a href=&#123;'http://www.facebook.com/' + this.props.username&#125;&gt;</div><div class=\"line\">        &#123;this.props.username&#125;</div><div class=\"line\">      &lt;/a&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">React.render(</div><div class=\"line\">  &lt;Avatar username=\"pwh\" /&gt;,</div><div class=\"line\">  document.getElementById('example')</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>上面的例子中，组件Avatar包含了组件ProfilePic和ProfileLink。在React当中，<strong>所有者就是可以设置其他组件props的组件</strong>。说的通俗点：如果组件X出现在了组件Y的render()方法中，那么组件Y就是所有者。正如我们之前所讨论的，组件不能改变props—props应同所有者初始化它们时保持一致。</p>\n<h3 id=\"父子节点的关系\"><a href=\"#父子节点的关系\" class=\"headerlink\" title=\"父子节点的关系\"></a>父子节点的关系</h3><p>一定要弄清所有者和被所有关系，父子关系的区别。所有者和被所有者关系是针对React组件的，父子关系是针对DOM结构的。来上面的例子来说，Avatar是所有者，拥有div、ProfilePic、ProfileLink，而div和ProfilePic、ProfileLink则是父子关系。</p>\n<p><code>&lt;Parent&gt;&lt;Child /&gt;&lt;/Parent&gt;</code>创建实例，Parent可以通过this.props.children获取到它的子内容。</p>\n<h3 id=\"动态子节点\"><a href=\"#动态子节点\" class=\"headerlink\" title=\"动态子节点\"></a>动态子节点</h3><p>在React更新DOM的过程中，子节点是根据它们渲染的顺序调节的。实际上，React改变第一个子节点的内容，然后删除最后一个节点。所以当数据来自于搜索结果或者新的组件被添加到数据流里，在这种情况下，每个子节点都需要保持唯一的标识，此时可以给每个子节点添加key属性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> Component = React.createClass(&#123;</div><div class=\"line\">    <span class=\"attr\">render</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> results = <span class=\"keyword\">this</span>.props.results;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">                &#123;results.map(function(result) &#123;</div><div class=\"line\">                    return <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;result.id&#125;</span>&gt;</span>&#123;result.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>;</div><div class=\"line\">                &#125;)&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span></div><div class=\"line\">        );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>在React当中，数据通过props从所有者向子节点传递，这就是所谓的单向数据绑定了。所有者将它拥有的组件props绑定到它的props或者state，这个过程将会递归进行。数据改变就会通过组件到子组件再到子节点即所有的DOM节点，最终反映到UI层。</p>\n"},{"layout":"post","title":"西南交大摄影集【二】","keywords":"校园","description":null,"_content":"\n![8](/public/img/photos/8.jpg)\n![9](/public/img/photos/9.jpg)\n![10](/public/img/photos/10.JPG)\n![11](/public/img/photos/11.jpg)\n![12](/public/img/photos/12.JPG)\n![13](/public/img/photos/13.JPG)","source":"_posts/摄影/2014-11-17-SWJTU-photos-02.md","raw":"---\nlayout: post\ntitle: 西南交大摄影集【二】\ncategory: 摄影\ntags: 摄影\nkeywords: 校园\ndescription: \n---\n\n![8](/public/img/photos/8.jpg)\n![9](/public/img/photos/9.jpg)\n![10](/public/img/photos/10.JPG)\n![11](/public/img/photos/11.jpg)\n![12](/public/img/photos/12.JPG)\n![13](/public/img/photos/13.JPG)","slug":"摄影-2014-11-17-SWJTU-photos-02","published":1,"date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","comments":1,"photos":[],"link":"","_id":"civpk97oe001ttz3a6cf5eeup","content":"<p><img src=\"/public/img/photos/8.jpg\" alt=\"8\"><br><img src=\"/public/img/photos/9.jpg\" alt=\"9\"><br><img src=\"/public/img/photos/10.JPG\" alt=\"10\"><br><img src=\"/public/img/photos/11.jpg\" alt=\"11\"><br><img src=\"/public/img/photos/12.JPG\" alt=\"12\"><br><img src=\"/public/img/photos/13.JPG\" alt=\"13\"></p>\n","excerpt":"","more":"<p><img src=\"/public/img/photos/8.jpg\" alt=\"8\"><br><img src=\"/public/img/photos/9.jpg\" alt=\"9\"><br><img src=\"/public/img/photos/10.JPG\" alt=\"10\"><br><img src=\"/public/img/photos/11.jpg\" alt=\"11\"><br><img src=\"/public/img/photos/12.JPG\" alt=\"12\"><br><img src=\"/public/img/photos/13.JPG\" alt=\"13\"></p>\n"},{"published":1,"layout":"post","title":"The Hitchhiker’s Guide to Python! 中英对照译本","keywords":"Python，翻译","description":null,"_content":"\nGitBook地址：[http://jimmylv.gitbooks.io/python-guide-zh/](http://jimmylv.gitbooks.io/python-guide-zh/)\n\n## 译本信息：\n\n> 这是我的第一份e2c翻译，借此熟悉整个Python最佳实践，也可以提高英语水平。\n\n> Information:\n\n> - Author: Kenneth Reitz\n- Translator: 吕立青\n- Begin: 2015/01/17\n- End:\n\n> Collection：\n\n> - 翻译途中的感想、技巧\n- 对Python、编程的理解\n\n> Contact me:\n\n> - E-mail: 460051518@qq.com\n- WeiBo: @立青开根号\n- WeChat: liqing215\n\n## 正式翻译：\n\n> Welcome to The Hitchhiker’s Guide to Python.\n\n欢迎来到Hitchhiker的Python指南。\n\n> **This guide is currently under heavy active development. **If you’d like to help, [fork us on GitHub](https://github.com/kennethreitz/python-guide)!\n\n本指南目前正在积极开发。如果你想帮助，欢迎来[Github](https://github.com/kennethreitz/python-guide)上fork我们。\n\n> This *opinionated* guide exists to provide both novice and expert Python developers a best-practice handbook to the installation, configuration, and usage of Python on a daily basis.\n\n这份自以为是的指南的目的是为了给Python初学者或者专业开发者提供一份关于Python安装、配置和日常使用基础的最佳实践手册。","source":"_posts/编程/2015-01-17-python-guide-e2c-plan.md","raw":"---\npublished: true\nlayout: post\ntitle: \"The Hitchhiker’s Guide to Python! 中英对照译本\"\ncategory: 编程\ntags: Python\nkeywords: Python，翻译\ndescription: null\n---\n\nGitBook地址：[http://jimmylv.gitbooks.io/python-guide-zh/](http://jimmylv.gitbooks.io/python-guide-zh/)\n\n## 译本信息：\n\n> 这是我的第一份e2c翻译，借此熟悉整个Python最佳实践，也可以提高英语水平。\n\n> Information:\n\n> - Author: Kenneth Reitz\n- Translator: 吕立青\n- Begin: 2015/01/17\n- End:\n\n> Collection：\n\n> - 翻译途中的感想、技巧\n- 对Python、编程的理解\n\n> Contact me:\n\n> - E-mail: 460051518@qq.com\n- WeiBo: @立青开根号\n- WeChat: liqing215\n\n## 正式翻译：\n\n> Welcome to The Hitchhiker’s Guide to Python.\n\n欢迎来到Hitchhiker的Python指南。\n\n> **This guide is currently under heavy active development. **If you’d like to help, [fork us on GitHub](https://github.com/kennethreitz/python-guide)!\n\n本指南目前正在积极开发。如果你想帮助，欢迎来[Github](https://github.com/kennethreitz/python-guide)上fork我们。\n\n> This *opinionated* guide exists to provide both novice and expert Python developers a best-practice handbook to the installation, configuration, and usage of Python on a daily basis.\n\n这份自以为是的指南的目的是为了给Python初学者或者专业开发者提供一份关于Python安装、配置和日常使用基础的最佳实践手册。","slug":"编程-2015-01-17-python-guide-e2c-plan","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","_id":"civpk97oy002btz3az6gkt3bq","comments":1,"photos":[],"link":"","content":"<p>GitBook地址：<a href=\"http://jimmylv.gitbooks.io/python-guide-zh/\" target=\"_blank\" rel=\"external\">http://jimmylv.gitbooks.io/python-guide-zh/</a></p>\n<h2 id=\"译本信息：\"><a href=\"#译本信息：\" class=\"headerlink\" title=\"译本信息：\"></a>译本信息：</h2><blockquote>\n<p>这是我的第一份e2c翻译，借此熟悉整个Python最佳实践，也可以提高英语水平。</p>\n<p>Information:</p>\n<ul>\n<li>Author: Kenneth Reitz</li>\n<li>Translator: 吕立青</li>\n<li>Begin: 2015/01/17</li>\n<li>End:</li>\n</ul>\n<p>Collection：</p>\n<ul>\n<li>翻译途中的感想、技巧</li>\n<li>对Python、编程的理解</li>\n</ul>\n<p>Contact me:</p>\n<ul>\n<li>E-mail: 460051518@qq.com</li>\n<li>WeiBo: @立青开根号</li>\n<li>WeChat: liqing215</li>\n</ul>\n</blockquote>\n<h2 id=\"正式翻译：\"><a href=\"#正式翻译：\" class=\"headerlink\" title=\"正式翻译：\"></a>正式翻译：</h2><blockquote>\n<p>Welcome to The Hitchhiker’s Guide to Python.</p>\n</blockquote>\n<p>欢迎来到Hitchhiker的Python指南。</p>\n<blockquote>\n<p><strong>This guide is currently under heavy active development. </strong>If you’d like to help, <a href=\"https://github.com/kennethreitz/python-guide\" target=\"_blank\" rel=\"external\">fork us on GitHub</a>!</p>\n</blockquote>\n<p>本指南目前正在积极开发。如果你想帮助，欢迎来<a href=\"https://github.com/kennethreitz/python-guide\" target=\"_blank\" rel=\"external\">Github</a>上fork我们。</p>\n<blockquote>\n<p>This <em>opinionated</em> guide exists to provide both novice and expert Python developers a best-practice handbook to the installation, configuration, and usage of Python on a daily basis.</p>\n</blockquote>\n<p>这份自以为是的指南的目的是为了给Python初学者或者专业开发者提供一份关于Python安装、配置和日常使用基础的最佳实践手册。</p>\n","excerpt":"","more":"<p>GitBook地址：<a href=\"http://jimmylv.gitbooks.io/python-guide-zh/\">http://jimmylv.gitbooks.io/python-guide-zh/</a></p>\n<h2 id=\"译本信息：\"><a href=\"#译本信息：\" class=\"headerlink\" title=\"译本信息：\"></a>译本信息：</h2><blockquote>\n<p>这是我的第一份e2c翻译，借此熟悉整个Python最佳实践，也可以提高英语水平。</p>\n<p>Information:</p>\n<ul>\n<li>Author: Kenneth Reitz</li>\n<li>Translator: 吕立青</li>\n<li>Begin: 2015/01/17</li>\n<li>End:</li>\n</ul>\n<p>Collection：</p>\n<ul>\n<li>翻译途中的感想、技巧</li>\n<li>对Python、编程的理解</li>\n</ul>\n<p>Contact me:</p>\n<ul>\n<li>E-mail: 460051518@qq.com</li>\n<li>WeiBo: @立青开根号</li>\n<li>WeChat: liqing215</li>\n</ul>\n</blockquote>\n<h2 id=\"正式翻译：\"><a href=\"#正式翻译：\" class=\"headerlink\" title=\"正式翻译：\"></a>正式翻译：</h2><blockquote>\n<p>Welcome to The Hitchhiker’s Guide to Python.</p>\n</blockquote>\n<p>欢迎来到Hitchhiker的Python指南。</p>\n<blockquote>\n<p><strong>This guide is currently under heavy active development. </strong>If you’d like to help, <a href=\"https://github.com/kennethreitz/python-guide\">fork us on GitHub</a>!</p>\n</blockquote>\n<p>本指南目前正在积极开发。如果你想帮助，欢迎来<a href=\"https://github.com/kennethreitz/python-guide\">Github</a>上fork我们。</p>\n<blockquote>\n<p>This <em>opinionated</em> guide exists to provide both novice and expert Python developers a best-practice handbook to the installation, configuration, and usage of Python on a daily basis.</p>\n</blockquote>\n<p>这份自以为是的指南的目的是为了给Python初学者或者专业开发者提供一份关于Python安装、配置和日常使用基础的最佳实践手册。</p>\n"},{"layout":"post","title":"The Zen of Python：Python之禅","keywords":"Python","description":null,"published":1,"_content":"\n##The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\n\nExplicit is better than implicit.\n\nSimple is better than complex.\n\nComplex is better than complicated.\n\nFlat is better than nested.\n\nSparse is better than dense.\n\nReadability counts.\n\nSpecial cases aren't special enough to break the rules.\n\nAlthough practicality beats purity.\n\nErrors should never pass silently.\n\nUnless explicitly silenced.\n\nIn the face of ambiguity, refuse the temptation to guess.\n\nThere should be one-- and preferably only one --obvious way to do it.\n\nAlthough that way may not be obvious at first unless you're Dutch.\n\nNow is better than never.\n\nAlthough never is often better than *right* now.\n\nIf the implementation is hard to explain, it's a bad idea.\n\nIf the implementation is easy to explain, it may be a good idea.\n\nNamespaces are one honking great idea -- let's do more of those!\n\n## Python之禅 by Tim Peters\n \n优美胜于丑陋（Python 以编写优美的代码为目标）\n\n明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）\n\n简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）\n\n复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）\n\n扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）\n\n间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）\n\n可读性很重要（优美的代码是可读的）\n\n即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）\n \n不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）\n \n当存在多种可能，不要尝试去猜测\n\n而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）\n\n虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）\n \n做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）\n \n如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）\n \n命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）","source":"_posts/编程/2014-11-15-pythonic-zen.md","raw":"---\nlayout: post\ntitle: The Zen of Python：Python之禅\ncategory: 编程\ntags: Python\nkeywords: Python\ndescription: \npublished: true\n---\n\n##The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\n\nExplicit is better than implicit.\n\nSimple is better than complex.\n\nComplex is better than complicated.\n\nFlat is better than nested.\n\nSparse is better than dense.\n\nReadability counts.\n\nSpecial cases aren't special enough to break the rules.\n\nAlthough practicality beats purity.\n\nErrors should never pass silently.\n\nUnless explicitly silenced.\n\nIn the face of ambiguity, refuse the temptation to guess.\n\nThere should be one-- and preferably only one --obvious way to do it.\n\nAlthough that way may not be obvious at first unless you're Dutch.\n\nNow is better than never.\n\nAlthough never is often better than *right* now.\n\nIf the implementation is hard to explain, it's a bad idea.\n\nIf the implementation is easy to explain, it may be a good idea.\n\nNamespaces are one honking great idea -- let's do more of those!\n\n## Python之禅 by Tim Peters\n \n优美胜于丑陋（Python 以编写优美的代码为目标）\n\n明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）\n\n简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）\n\n复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）\n\n扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）\n\n间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）\n\n可读性很重要（优美的代码是可读的）\n\n即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）\n \n不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）\n \n当存在多种可能，不要尝试去猜测\n\n而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）\n\n虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）\n \n做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）\n \n如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）\n \n命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）","slug":"编程-2014-11-15-pythonic-zen","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","_id":"civpk97p1002ctz3aokhe3wzu","comments":1,"photos":[],"link":"","content":"<p>##The Zen of Python, by Tim Peters</p>\n<p>Beautiful is better than ugly.</p>\n<p>Explicit is better than implicit.</p>\n<p>Simple is better than complex.</p>\n<p>Complex is better than complicated.</p>\n<p>Flat is better than nested.</p>\n<p>Sparse is better than dense.</p>\n<p>Readability counts.</p>\n<p>Special cases aren’t special enough to break the rules.</p>\n<p>Although practicality beats purity.</p>\n<p>Errors should never pass silently.</p>\n<p>Unless explicitly silenced.</p>\n<p>In the face of ambiguity, refuse the temptation to guess.</p>\n<p>There should be one– and preferably only one –obvious way to do it.</p>\n<p>Although that way may not be obvious at first unless you’re Dutch.</p>\n<p>Now is better than never.</p>\n<p>Although never is often better than <em>right</em> now.</p>\n<p>If the implementation is hard to explain, it’s a bad idea.</p>\n<p>If the implementation is easy to explain, it may be a good idea.</p>\n<p>Namespaces are one honking great idea – let’s do more of those!</p>\n<h2 id=\"Python之禅-by-Tim-Peters\"><a href=\"#Python之禅-by-Tim-Peters\" class=\"headerlink\" title=\"Python之禅 by Tim Peters\"></a>Python之禅 by Tim Peters</h2><p>优美胜于丑陋（Python 以编写优美的代码为目标）</p>\n<p>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</p>\n<p>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</p>\n<p>复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</p>\n<p>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</p>\n<p>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</p>\n<p>可读性很重要（优美的代码是可读的）</p>\n<p>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</p>\n<p>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）</p>\n<p>当存在多种可能，不要尝试去猜测</p>\n<p>而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</p>\n<p>虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</p>\n<p>做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</p>\n<p>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</p>\n<p>命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</p>\n","excerpt":"","more":"<p>##The Zen of Python, by Tim Peters</p>\n<p>Beautiful is better than ugly.</p>\n<p>Explicit is better than implicit.</p>\n<p>Simple is better than complex.</p>\n<p>Complex is better than complicated.</p>\n<p>Flat is better than nested.</p>\n<p>Sparse is better than dense.</p>\n<p>Readability counts.</p>\n<p>Special cases aren’t special enough to break the rules.</p>\n<p>Although practicality beats purity.</p>\n<p>Errors should never pass silently.</p>\n<p>Unless explicitly silenced.</p>\n<p>In the face of ambiguity, refuse the temptation to guess.</p>\n<p>There should be one– and preferably only one –obvious way to do it.</p>\n<p>Although that way may not be obvious at first unless you’re Dutch.</p>\n<p>Now is better than never.</p>\n<p>Although never is often better than <em>right</em> now.</p>\n<p>If the implementation is hard to explain, it’s a bad idea.</p>\n<p>If the implementation is easy to explain, it may be a good idea.</p>\n<p>Namespaces are one honking great idea – let’s do more of those!</p>\n<h2 id=\"Python之禅-by-Tim-Peters\"><a href=\"#Python之禅-by-Tim-Peters\" class=\"headerlink\" title=\"Python之禅 by Tim Peters\"></a>Python之禅 by Tim Peters</h2><p>优美胜于丑陋（Python 以编写优美的代码为目标）</p>\n<p>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</p>\n<p>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</p>\n<p>复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</p>\n<p>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</p>\n<p>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</p>\n<p>可读性很重要（优美的代码是可读的）</p>\n<p>即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</p>\n<p>不要包容所有错误，除非你确定需要这样做（精准地捕获异常，不写 except:pass 风格的代码）</p>\n<p>当存在多种可能，不要尝试去猜测</p>\n<p>而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</p>\n<p>虽然这并不容易，因为你不是 Python 之父（这里的 Dutch 是指 Guido ）</p>\n<p>做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</p>\n<p>如果你无法向人描述你的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</p>\n<p>命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</p>\n"},{"layout":"post","title":"Python基础如何学习Java：如何开始学习一门新语言","keywords":"Python","description":null,"published":1,"_content":"\n##浅谈Java：消除对Java的歧视\n\n其实语言本来就没有好坏之分，虽然现在大家对Java的意见都不太好，不管是语言的本身还是其发展前景。但是要去思考Java在二十几年前的时候出现的时候为什么会快速流行起来，它的优势又在哪里？\n\n那么我们就可以看到Java最大的一个优点就是一次编译，到处运行。这里就有一个面试题是这样的，「Java到底是编译性语言还是解释性语言」，正确的回答应该是「**一半编译，一半解释**」，因为Java在编译的时候其实是生成了class文件，而在这之后还是需要在JVM上解释执行class文件的。\n\n那说到这里，随着其他语言的发展，这个优势变得越来越不明显，因为其他语言也可以做到或者说更容易做到快速部署快速开发软件。这里可以举一个PHP的例子，大家都不喜欢PHP但是它为什么会火起来呢，就是因为web开发在近几年来说越来越火，随着HTML5的完善开发人员也会越来越偏向这个概念的。可以看到的是LAMP (Linux, Apache, MySQL, PHP)这一整套系统的快速部署是非常利于开发的，而与此同时Ruby on Rails也是另外一个很好的选择。\n\n但是我们也要看到Java现在还有一个用途是在写Android，虽然在服务器端软件上面有了其他的选择，就比如在近期，微软宣布为C#系的.NET开发环境进行了开源和跨平台，可以想象的是将来可以在Linux服务器上写C#了，这对Java的冲击实在太大。但是Android上native app的优势还会持续很久，虽然HTML5又会带来web app这样的神器进行另一波冲击。\n\n了解了这么多，那对于个人来说，这门即将被取代的语言该不该学习呢？首先可以先回想一下自己为什么会「讨厌」Java这门语言。\n\n其实最开始我是很想学习Java的，因为我想开发一个手机app，而在学习Android之前是肯定需要学习Java的，但是随着后来我遇到Python之后就对Python这门语言欲罢不能了，学习门槛很低而且能够快速开发出东西，这不得不让刚入门的编程新手兴奋起来。\n\n而在学习Python的同时，微信公众帐号成了那时最热门的话题，我发现一个更容易在手机上实现功能和进行交互的方式，那就是开发一个微信公众号。其实Java就不得不羡慕一下Python快速开发的优势，如果当初的我选用Java去开发微信的话，恐怕遇到的问题会很多然后根本就做不出来，说不定从此与编程这条路无缘了呢。哈哈，别忘记**我的初心是做一名会技术的产品经理，快速开发创造出新的产品才是我的第一目的。**\n\n那说完了曾经的经历，就会发现**我至始至终都没有非常深入得去学习和理解Java这门语言**，虽然它有缺点但是它也一定有很大的优点才会让那么多的程序员写出了那么多伟大的产品。那我就需要在真正深入了解Java之后再从自身出发对其进行一个全面的评价，而不是人云亦云说什么「Java正在走向死亡」。\n\nJava系列的其他语言可以说都是在修正Java的一些问题，比如Scala是采用「函数式」思想设计的一门「纯面向对象」语言，保留Java最大的优势（可以运行在Java虚拟机上）的同时加入了很多高级语法特性。这也是我期望学习Scala的一个理由，作为Java的后继者当然不得忽视，并且它在大数据领域还有更大的用途。所以重点是**我想在哪个领域有所作为，而在该领域中什么东西是最有用的，为了想实现的目标而去选择适当的工具**，而不是局限于一门语言，以语言用途为导向。\n\n##步入正轨：如何开始学习Java\n\n我总是比较喜欢讨论一些关于学习的方法论，在学习一门新语言的时候也总有一个比较好的入门方式。最开始学习编程的时候是在大学课堂上，最先接触到和使用的都是C语言，而且由于专业原因C语言在应用上也是偏向于跟硬件打交道的，而在纯软件环境下的程序编写根本就没有，最多也就是在「数据结构」这门巨难巨坑的课程中简单得用C++实现了一些基本算法而已，在那个时候，我应该还是没有对编程这个东西有多大兴趣吧。\n\n最好的编程入门语言绝对是Python，Python相对于C系列语言来说更高级，更符合人的直觉也更接近人类的表达习惯。当**一个初学者能够很快得按照自己的想法去实现一些东西**的时候，不会遇到一些莫名其妙的语言层面的时候，这对最开始学习编程的人来说是再好不过的了。而离机器更近的C语言的优势其实是在运行速度上，而今计算机的运算速度越来越快，运行速度并不再是开发的性能瓶颈的时候，更快速的学习，开发，部署才是王道。\n\n虽然我也不敢说我对Python有多熟悉，毕竟还有那么多的高级特性值得我去进一步探索，实际情况中对一门语言「科学」有进一步的了解，倒不如去学习和实现这门语言的相关「技术」，Python有着太多的框架和库值得我去学习和使用，能够快速得投入生产和创造才是王道。这也是我很喜欢Python的原因，**总有现成的「轮子」让我能够更快得实现我想达到的目标。**\n\n但是我现在至少是对编程有了一个入门吧，在ThoughtWorks的培训上有谈到一门**编程语言的「三要素」：抽象值/组合方式/基本表达式**，这也符合我之前的一些感触。我会根据这个思路来对比Python和Java，通过这样的方式来学习一门新的语言一定会很有意思。还可能会用不同的语言实现同一个功能，相信Python一定会用更少的代码来实现更多的功能的，哈哈，当然我会总结他们的优劣，Python不一定总是好的。\n\n**任何程序编写在「思考模型」层面上可以分为：Data & Process，**我们从面向过程（P）的语言中进化到了面向对象/类（D），最后发现函数式（P）又回到了过程式的程序思考模型。这一点非常有趣，由此我也会将这个思想时刻嵌入到我对这两门的对比学习当中，分析各自的三种基本「过程结构」：顺序/分支-判断/选择-循环，比较他们的优劣。\n\n##随便了解Ruby\n\n在谈到Python的时候总是会联系到Ruby这个好基友，它们简洁的语法总是让人神往。想在学习Java的同时学习Ruby是出于以下几个原因：\n\n- RoR可以快速开发web应用，这是我想做的一个方向。\n\n- Ruby本身就很讨人喜欢，简洁的语法和有趣的特性（比如block）。\n\n- ThoughtWorks内部很崇尚Ruby，并且有相关的RoR项目。\n\n##其他一些需要做的事情\n\n###练习手速：\n\n[typing.io](typing.io)\n\n[Type Fu](https://chrome.google.com/webstore/detail/type-fu/pofoighmmpljaikjiidkkfhldjndfdbk)\n\n###熟悉IDE（[Intellij IDEA](https://www.jetbrains.com/idea/)）\n\n**1.快捷键**\n\n![](http://img.my.csdn.net/uploads/201207/20/1342778131_9335.png)\n\n**2.集成功能的使用**\n\n[Quick Start](http://confluence.jetbrains.com/display/IntelliJIDEA/Quick+Start)\n\nGitHub/Debug\n\n###Java最佳实践\n\n","source":"_posts/编程/2014-11-17-python-to-java-01.md","raw":"---\nlayout: post\ntitle: \"Python基础如何学习Java：如何开始学习一门新语言\"\ncategory: 编程\ntags: Python\nkeywords: Python\ndescription: null\npublished: true\n---\n\n##浅谈Java：消除对Java的歧视\n\n其实语言本来就没有好坏之分，虽然现在大家对Java的意见都不太好，不管是语言的本身还是其发展前景。但是要去思考Java在二十几年前的时候出现的时候为什么会快速流行起来，它的优势又在哪里？\n\n那么我们就可以看到Java最大的一个优点就是一次编译，到处运行。这里就有一个面试题是这样的，「Java到底是编译性语言还是解释性语言」，正确的回答应该是「**一半编译，一半解释**」，因为Java在编译的时候其实是生成了class文件，而在这之后还是需要在JVM上解释执行class文件的。\n\n那说到这里，随着其他语言的发展，这个优势变得越来越不明显，因为其他语言也可以做到或者说更容易做到快速部署快速开发软件。这里可以举一个PHP的例子，大家都不喜欢PHP但是它为什么会火起来呢，就是因为web开发在近几年来说越来越火，随着HTML5的完善开发人员也会越来越偏向这个概念的。可以看到的是LAMP (Linux, Apache, MySQL, PHP)这一整套系统的快速部署是非常利于开发的，而与此同时Ruby on Rails也是另外一个很好的选择。\n\n但是我们也要看到Java现在还有一个用途是在写Android，虽然在服务器端软件上面有了其他的选择，就比如在近期，微软宣布为C#系的.NET开发环境进行了开源和跨平台，可以想象的是将来可以在Linux服务器上写C#了，这对Java的冲击实在太大。但是Android上native app的优势还会持续很久，虽然HTML5又会带来web app这样的神器进行另一波冲击。\n\n了解了这么多，那对于个人来说，这门即将被取代的语言该不该学习呢？首先可以先回想一下自己为什么会「讨厌」Java这门语言。\n\n其实最开始我是很想学习Java的，因为我想开发一个手机app，而在学习Android之前是肯定需要学习Java的，但是随着后来我遇到Python之后就对Python这门语言欲罢不能了，学习门槛很低而且能够快速开发出东西，这不得不让刚入门的编程新手兴奋起来。\n\n而在学习Python的同时，微信公众帐号成了那时最热门的话题，我发现一个更容易在手机上实现功能和进行交互的方式，那就是开发一个微信公众号。其实Java就不得不羡慕一下Python快速开发的优势，如果当初的我选用Java去开发微信的话，恐怕遇到的问题会很多然后根本就做不出来，说不定从此与编程这条路无缘了呢。哈哈，别忘记**我的初心是做一名会技术的产品经理，快速开发创造出新的产品才是我的第一目的。**\n\n那说完了曾经的经历，就会发现**我至始至终都没有非常深入得去学习和理解Java这门语言**，虽然它有缺点但是它也一定有很大的优点才会让那么多的程序员写出了那么多伟大的产品。那我就需要在真正深入了解Java之后再从自身出发对其进行一个全面的评价，而不是人云亦云说什么「Java正在走向死亡」。\n\nJava系列的其他语言可以说都是在修正Java的一些问题，比如Scala是采用「函数式」思想设计的一门「纯面向对象」语言，保留Java最大的优势（可以运行在Java虚拟机上）的同时加入了很多高级语法特性。这也是我期望学习Scala的一个理由，作为Java的后继者当然不得忽视，并且它在大数据领域还有更大的用途。所以重点是**我想在哪个领域有所作为，而在该领域中什么东西是最有用的，为了想实现的目标而去选择适当的工具**，而不是局限于一门语言，以语言用途为导向。\n\n##步入正轨：如何开始学习Java\n\n我总是比较喜欢讨论一些关于学习的方法论，在学习一门新语言的时候也总有一个比较好的入门方式。最开始学习编程的时候是在大学课堂上，最先接触到和使用的都是C语言，而且由于专业原因C语言在应用上也是偏向于跟硬件打交道的，而在纯软件环境下的程序编写根本就没有，最多也就是在「数据结构」这门巨难巨坑的课程中简单得用C++实现了一些基本算法而已，在那个时候，我应该还是没有对编程这个东西有多大兴趣吧。\n\n最好的编程入门语言绝对是Python，Python相对于C系列语言来说更高级，更符合人的直觉也更接近人类的表达习惯。当**一个初学者能够很快得按照自己的想法去实现一些东西**的时候，不会遇到一些莫名其妙的语言层面的时候，这对最开始学习编程的人来说是再好不过的了。而离机器更近的C语言的优势其实是在运行速度上，而今计算机的运算速度越来越快，运行速度并不再是开发的性能瓶颈的时候，更快速的学习，开发，部署才是王道。\n\n虽然我也不敢说我对Python有多熟悉，毕竟还有那么多的高级特性值得我去进一步探索，实际情况中对一门语言「科学」有进一步的了解，倒不如去学习和实现这门语言的相关「技术」，Python有着太多的框架和库值得我去学习和使用，能够快速得投入生产和创造才是王道。这也是我很喜欢Python的原因，**总有现成的「轮子」让我能够更快得实现我想达到的目标。**\n\n但是我现在至少是对编程有了一个入门吧，在ThoughtWorks的培训上有谈到一门**编程语言的「三要素」：抽象值/组合方式/基本表达式**，这也符合我之前的一些感触。我会根据这个思路来对比Python和Java，通过这样的方式来学习一门新的语言一定会很有意思。还可能会用不同的语言实现同一个功能，相信Python一定会用更少的代码来实现更多的功能的，哈哈，当然我会总结他们的优劣，Python不一定总是好的。\n\n**任何程序编写在「思考模型」层面上可以分为：Data & Process，**我们从面向过程（P）的语言中进化到了面向对象/类（D），最后发现函数式（P）又回到了过程式的程序思考模型。这一点非常有趣，由此我也会将这个思想时刻嵌入到我对这两门的对比学习当中，分析各自的三种基本「过程结构」：顺序/分支-判断/选择-循环，比较他们的优劣。\n\n##随便了解Ruby\n\n在谈到Python的时候总是会联系到Ruby这个好基友，它们简洁的语法总是让人神往。想在学习Java的同时学习Ruby是出于以下几个原因：\n\n- RoR可以快速开发web应用，这是我想做的一个方向。\n\n- Ruby本身就很讨人喜欢，简洁的语法和有趣的特性（比如block）。\n\n- ThoughtWorks内部很崇尚Ruby，并且有相关的RoR项目。\n\n##其他一些需要做的事情\n\n###练习手速：\n\n[typing.io](typing.io)\n\n[Type Fu](https://chrome.google.com/webstore/detail/type-fu/pofoighmmpljaikjiidkkfhldjndfdbk)\n\n###熟悉IDE（[Intellij IDEA](https://www.jetbrains.com/idea/)）\n\n**1.快捷键**\n\n![](http://img.my.csdn.net/uploads/201207/20/1342778131_9335.png)\n\n**2.集成功能的使用**\n\n[Quick Start](http://confluence.jetbrains.com/display/IntelliJIDEA/Quick+Start)\n\nGitHub/Debug\n\n###Java最佳实践\n\n","slug":"编程-2014-11-17-python-to-java-01","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","_id":"civpk97p6002jtz3a5o63bv8m","comments":1,"photos":[],"link":"","content":"<p>##浅谈Java：消除对Java的歧视</p>\n<p>其实语言本来就没有好坏之分，虽然现在大家对Java的意见都不太好，不管是语言的本身还是其发展前景。但是要去思考Java在二十几年前的时候出现的时候为什么会快速流行起来，它的优势又在哪里？</p>\n<p>那么我们就可以看到Java最大的一个优点就是一次编译，到处运行。这里就有一个面试题是这样的，「Java到底是编译性语言还是解释性语言」，正确的回答应该是「<strong>一半编译，一半解释</strong>」，因为Java在编译的时候其实是生成了class文件，而在这之后还是需要在JVM上解释执行class文件的。</p>\n<p>那说到这里，随着其他语言的发展，这个优势变得越来越不明显，因为其他语言也可以做到或者说更容易做到快速部署快速开发软件。这里可以举一个PHP的例子，大家都不喜欢PHP但是它为什么会火起来呢，就是因为web开发在近几年来说越来越火，随着HTML5的完善开发人员也会越来越偏向这个概念的。可以看到的是LAMP (Linux, Apache, MySQL, PHP)这一整套系统的快速部署是非常利于开发的，而与此同时Ruby on Rails也是另外一个很好的选择。</p>\n<p>但是我们也要看到Java现在还有一个用途是在写Android，虽然在服务器端软件上面有了其他的选择，就比如在近期，微软宣布为C#系的.NET开发环境进行了开源和跨平台，可以想象的是将来可以在Linux服务器上写C#了，这对Java的冲击实在太大。但是Android上native app的优势还会持续很久，虽然HTML5又会带来web app这样的神器进行另一波冲击。</p>\n<p>了解了这么多，那对于个人来说，这门即将被取代的语言该不该学习呢？首先可以先回想一下自己为什么会「讨厌」Java这门语言。</p>\n<p>其实最开始我是很想学习Java的，因为我想开发一个手机app，而在学习Android之前是肯定需要学习Java的，但是随着后来我遇到Python之后就对Python这门语言欲罢不能了，学习门槛很低而且能够快速开发出东西，这不得不让刚入门的编程新手兴奋起来。</p>\n<p>而在学习Python的同时，微信公众帐号成了那时最热门的话题，我发现一个更容易在手机上实现功能和进行交互的方式，那就是开发一个微信公众号。其实Java就不得不羡慕一下Python快速开发的优势，如果当初的我选用Java去开发微信的话，恐怕遇到的问题会很多然后根本就做不出来，说不定从此与编程这条路无缘了呢。哈哈，别忘记<strong>我的初心是做一名会技术的产品经理，快速开发创造出新的产品才是我的第一目的。</strong></p>\n<p>那说完了曾经的经历，就会发现<strong>我至始至终都没有非常深入得去学习和理解Java这门语言</strong>，虽然它有缺点但是它也一定有很大的优点才会让那么多的程序员写出了那么多伟大的产品。那我就需要在真正深入了解Java之后再从自身出发对其进行一个全面的评价，而不是人云亦云说什么「Java正在走向死亡」。</p>\n<p>Java系列的其他语言可以说都是在修正Java的一些问题，比如Scala是采用「函数式」思想设计的一门「纯面向对象」语言，保留Java最大的优势（可以运行在Java虚拟机上）的同时加入了很多高级语法特性。这也是我期望学习Scala的一个理由，作为Java的后继者当然不得忽视，并且它在大数据领域还有更大的用途。所以重点是<strong>我想在哪个领域有所作为，而在该领域中什么东西是最有用的，为了想实现的目标而去选择适当的工具</strong>，而不是局限于一门语言，以语言用途为导向。</p>\n<p>##步入正轨：如何开始学习Java</p>\n<p>我总是比较喜欢讨论一些关于学习的方法论，在学习一门新语言的时候也总有一个比较好的入门方式。最开始学习编程的时候是在大学课堂上，最先接触到和使用的都是C语言，而且由于专业原因C语言在应用上也是偏向于跟硬件打交道的，而在纯软件环境下的程序编写根本就没有，最多也就是在「数据结构」这门巨难巨坑的课程中简单得用C++实现了一些基本算法而已，在那个时候，我应该还是没有对编程这个东西有多大兴趣吧。</p>\n<p>最好的编程入门语言绝对是Python，Python相对于C系列语言来说更高级，更符合人的直觉也更接近人类的表达习惯。当<strong>一个初学者能够很快得按照自己的想法去实现一些东西</strong>的时候，不会遇到一些莫名其妙的语言层面的时候，这对最开始学习编程的人来说是再好不过的了。而离机器更近的C语言的优势其实是在运行速度上，而今计算机的运算速度越来越快，运行速度并不再是开发的性能瓶颈的时候，更快速的学习，开发，部署才是王道。</p>\n<p>虽然我也不敢说我对Python有多熟悉，毕竟还有那么多的高级特性值得我去进一步探索，实际情况中对一门语言「科学」有进一步的了解，倒不如去学习和实现这门语言的相关「技术」，Python有着太多的框架和库值得我去学习和使用，能够快速得投入生产和创造才是王道。这也是我很喜欢Python的原因，<strong>总有现成的「轮子」让我能够更快得实现我想达到的目标。</strong></p>\n<p>但是我现在至少是对编程有了一个入门吧，在ThoughtWorks的培训上有谈到一门<strong>编程语言的「三要素」：抽象值/组合方式/基本表达式</strong>，这也符合我之前的一些感触。我会根据这个思路来对比Python和Java，通过这样的方式来学习一门新的语言一定会很有意思。还可能会用不同的语言实现同一个功能，相信Python一定会用更少的代码来实现更多的功能的，哈哈，当然我会总结他们的优劣，Python不一定总是好的。</p>\n<p><strong>任何程序编写在「思考模型」层面上可以分为：Data &amp; Process，</strong>我们从面向过程（P）的语言中进化到了面向对象/类（D），最后发现函数式（P）又回到了过程式的程序思考模型。这一点非常有趣，由此我也会将这个思想时刻嵌入到我对这两门的对比学习当中，分析各自的三种基本「过程结构」：顺序/分支-判断/选择-循环，比较他们的优劣。</p>\n<p>##随便了解Ruby</p>\n<p>在谈到Python的时候总是会联系到Ruby这个好基友，它们简洁的语法总是让人神往。想在学习Java的同时学习Ruby是出于以下几个原因：</p>\n<ul>\n<li><p>RoR可以快速开发web应用，这是我想做的一个方向。</p>\n</li>\n<li><p>Ruby本身就很讨人喜欢，简洁的语法和有趣的特性（比如block）。</p>\n</li>\n<li><p>ThoughtWorks内部很崇尚Ruby，并且有相关的RoR项目。</p>\n</li>\n</ul>\n<p>##其他一些需要做的事情</p>\n<p>###练习手速：</p>\n<p><a href=\"typing.io\">typing.io</a></p>\n<p><a href=\"https://chrome.google.com/webstore/detail/type-fu/pofoighmmpljaikjiidkkfhldjndfdbk\" target=\"_blank\" rel=\"external\">Type Fu</a></p>\n<p>###熟悉IDE（<a href=\"https://www.jetbrains.com/idea/\" target=\"_blank\" rel=\"external\">Intellij IDEA</a>）</p>\n<p><strong>1.快捷键</strong></p>\n<p><img src=\"http://img.my.csdn.net/uploads/201207/20/1342778131_9335.png\" alt=\"\"></p>\n<p><strong>2.集成功能的使用</strong></p>\n<p><a href=\"http://confluence.jetbrains.com/display/IntelliJIDEA/Quick+Start\" target=\"_blank\" rel=\"external\">Quick Start</a></p>\n<p>GitHub/Debug</p>\n<p>###Java最佳实践</p>\n","excerpt":"","more":"<p>##浅谈Java：消除对Java的歧视</p>\n<p>其实语言本来就没有好坏之分，虽然现在大家对Java的意见都不太好，不管是语言的本身还是其发展前景。但是要去思考Java在二十几年前的时候出现的时候为什么会快速流行起来，它的优势又在哪里？</p>\n<p>那么我们就可以看到Java最大的一个优点就是一次编译，到处运行。这里就有一个面试题是这样的，「Java到底是编译性语言还是解释性语言」，正确的回答应该是「<strong>一半编译，一半解释</strong>」，因为Java在编译的时候其实是生成了class文件，而在这之后还是需要在JVM上解释执行class文件的。</p>\n<p>那说到这里，随着其他语言的发展，这个优势变得越来越不明显，因为其他语言也可以做到或者说更容易做到快速部署快速开发软件。这里可以举一个PHP的例子，大家都不喜欢PHP但是它为什么会火起来呢，就是因为web开发在近几年来说越来越火，随着HTML5的完善开发人员也会越来越偏向这个概念的。可以看到的是LAMP (Linux, Apache, MySQL, PHP)这一整套系统的快速部署是非常利于开发的，而与此同时Ruby on Rails也是另外一个很好的选择。</p>\n<p>但是我们也要看到Java现在还有一个用途是在写Android，虽然在服务器端软件上面有了其他的选择，就比如在近期，微软宣布为C#系的.NET开发环境进行了开源和跨平台，可以想象的是将来可以在Linux服务器上写C#了，这对Java的冲击实在太大。但是Android上native app的优势还会持续很久，虽然HTML5又会带来web app这样的神器进行另一波冲击。</p>\n<p>了解了这么多，那对于个人来说，这门即将被取代的语言该不该学习呢？首先可以先回想一下自己为什么会「讨厌」Java这门语言。</p>\n<p>其实最开始我是很想学习Java的，因为我想开发一个手机app，而在学习Android之前是肯定需要学习Java的，但是随着后来我遇到Python之后就对Python这门语言欲罢不能了，学习门槛很低而且能够快速开发出东西，这不得不让刚入门的编程新手兴奋起来。</p>\n<p>而在学习Python的同时，微信公众帐号成了那时最热门的话题，我发现一个更容易在手机上实现功能和进行交互的方式，那就是开发一个微信公众号。其实Java就不得不羡慕一下Python快速开发的优势，如果当初的我选用Java去开发微信的话，恐怕遇到的问题会很多然后根本就做不出来，说不定从此与编程这条路无缘了呢。哈哈，别忘记<strong>我的初心是做一名会技术的产品经理，快速开发创造出新的产品才是我的第一目的。</strong></p>\n<p>那说完了曾经的经历，就会发现<strong>我至始至终都没有非常深入得去学习和理解Java这门语言</strong>，虽然它有缺点但是它也一定有很大的优点才会让那么多的程序员写出了那么多伟大的产品。那我就需要在真正深入了解Java之后再从自身出发对其进行一个全面的评价，而不是人云亦云说什么「Java正在走向死亡」。</p>\n<p>Java系列的其他语言可以说都是在修正Java的一些问题，比如Scala是采用「函数式」思想设计的一门「纯面向对象」语言，保留Java最大的优势（可以运行在Java虚拟机上）的同时加入了很多高级语法特性。这也是我期望学习Scala的一个理由，作为Java的后继者当然不得忽视，并且它在大数据领域还有更大的用途。所以重点是<strong>我想在哪个领域有所作为，而在该领域中什么东西是最有用的，为了想实现的目标而去选择适当的工具</strong>，而不是局限于一门语言，以语言用途为导向。</p>\n<p>##步入正轨：如何开始学习Java</p>\n<p>我总是比较喜欢讨论一些关于学习的方法论，在学习一门新语言的时候也总有一个比较好的入门方式。最开始学习编程的时候是在大学课堂上，最先接触到和使用的都是C语言，而且由于专业原因C语言在应用上也是偏向于跟硬件打交道的，而在纯软件环境下的程序编写根本就没有，最多也就是在「数据结构」这门巨难巨坑的课程中简单得用C++实现了一些基本算法而已，在那个时候，我应该还是没有对编程这个东西有多大兴趣吧。</p>\n<p>最好的编程入门语言绝对是Python，Python相对于C系列语言来说更高级，更符合人的直觉也更接近人类的表达习惯。当<strong>一个初学者能够很快得按照自己的想法去实现一些东西</strong>的时候，不会遇到一些莫名其妙的语言层面的时候，这对最开始学习编程的人来说是再好不过的了。而离机器更近的C语言的优势其实是在运行速度上，而今计算机的运算速度越来越快，运行速度并不再是开发的性能瓶颈的时候，更快速的学习，开发，部署才是王道。</p>\n<p>虽然我也不敢说我对Python有多熟悉，毕竟还有那么多的高级特性值得我去进一步探索，实际情况中对一门语言「科学」有进一步的了解，倒不如去学习和实现这门语言的相关「技术」，Python有着太多的框架和库值得我去学习和使用，能够快速得投入生产和创造才是王道。这也是我很喜欢Python的原因，<strong>总有现成的「轮子」让我能够更快得实现我想达到的目标。</strong></p>\n<p>但是我现在至少是对编程有了一个入门吧，在ThoughtWorks的培训上有谈到一门<strong>编程语言的「三要素」：抽象值/组合方式/基本表达式</strong>，这也符合我之前的一些感触。我会根据这个思路来对比Python和Java，通过这样的方式来学习一门新的语言一定会很有意思。还可能会用不同的语言实现同一个功能，相信Python一定会用更少的代码来实现更多的功能的，哈哈，当然我会总结他们的优劣，Python不一定总是好的。</p>\n<p><strong>任何程序编写在「思考模型」层面上可以分为：Data &amp; Process，</strong>我们从面向过程（P）的语言中进化到了面向对象/类（D），最后发现函数式（P）又回到了过程式的程序思考模型。这一点非常有趣，由此我也会将这个思想时刻嵌入到我对这两门的对比学习当中，分析各自的三种基本「过程结构」：顺序/分支-判断/选择-循环，比较他们的优劣。</p>\n<p>##随便了解Ruby</p>\n<p>在谈到Python的时候总是会联系到Ruby这个好基友，它们简洁的语法总是让人神往。想在学习Java的同时学习Ruby是出于以下几个原因：</p>\n<ul>\n<li><p>RoR可以快速开发web应用，这是我想做的一个方向。</p>\n</li>\n<li><p>Ruby本身就很讨人喜欢，简洁的语法和有趣的特性（比如block）。</p>\n</li>\n<li><p>ThoughtWorks内部很崇尚Ruby，并且有相关的RoR项目。</p>\n</li>\n</ul>\n<p>##其他一些需要做的事情</p>\n<p>###练习手速：</p>\n<p><a href=\"typing.io\">typing.io</a></p>\n<p><a href=\"https://chrome.google.com/webstore/detail/type-fu/pofoighmmpljaikjiidkkfhldjndfdbk\">Type Fu</a></p>\n<p>###熟悉IDE（<a href=\"https://www.jetbrains.com/idea/\">Intellij IDEA</a>）</p>\n<p><strong>1.快捷键</strong></p>\n<p><img src=\"http://img.my.csdn.net/uploads/201207/20/1342778131_9335.png\" alt=\"\"></p>\n<p><strong>2.集成功能的使用</strong></p>\n<p><a href=\"http://confluence.jetbrains.com/display/IntelliJIDEA/Quick+Start\">Quick Start</a></p>\n<p>GitHub/Debug</p>\n<p>###Java最佳实践</p>\n"},{"layout":"post","title":"突然明白自己的焦虑来自何处","keywords":"工作","description":null,"published":1,"_content":"\nRap God - Eminem\n\n<embed src=\"http://www.xiami.com/widget/0_1772249933/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n\n突然明白自己的焦虑来自何处。\n\n1，绝不是因为你有多优秀。而是因为其他人表现出来的很多特质无时无刻得在向这个世界宣称着自己有多糟糕，而我只不过少抱怨了几句，多尝试了一点。\n\n2，至少不是在现在有多优秀。我其实是在预支未来，把别人所期望的误当作自己已经拥有的，多么傻的错觉。企业看中的只是你的潜力，并不是你现在就能够为企业带来什么样的产出，事实是你现在没有任何能力为企业带来价值。\n\n3，就像Dr.Dre当初看中Eminem的时候，Eminem绝没有现在唱Rap God的Eminem这么牛逼。Eminem很幸运得遇到了Dr.Dre，只是当幸运降临的时候，Eminem有没有足够努力去配得上那份幸运。相信Dr.Dre当时也看中其他很有才华的Rap singer，但唯有Eminem足够珍视这次机会，努力让当初的小屁孩成长为the Rap God。\n\n4，互联网真的是泡沫吗，至少是一种技术泡沫？还是说任何一样事物的成功都需要技术，人性，金融的结合，而互联网只不过是一种技术媒介而已？当人人都学会编程或者计算机能够自我元编程，那一个程序员存在的价值将是什么？\n\n5，早知道泡沫，一触就破。期望自己真的去努力完成自己的计划，去努力拥有自己想要的能力，去努力成为自己所佩服的人。\n","source":"_posts/思考/2014-11-01-why-i-am-so-serious.md","raw":"---\nlayout: post\ntitle: 突然明白自己的焦虑来自何处\ncategory: 思考\ntags: 总结\nkeywords: 工作\ndescription: \npublished: true\n---\n\nRap God - Eminem\n\n<embed src=\"http://www.xiami.com/widget/0_1772249933/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n\n突然明白自己的焦虑来自何处。\n\n1，绝不是因为你有多优秀。而是因为其他人表现出来的很多特质无时无刻得在向这个世界宣称着自己有多糟糕，而我只不过少抱怨了几句，多尝试了一点。\n\n2，至少不是在现在有多优秀。我其实是在预支未来，把别人所期望的误当作自己已经拥有的，多么傻的错觉。企业看中的只是你的潜力，并不是你现在就能够为企业带来什么样的产出，事实是你现在没有任何能力为企业带来价值。\n\n3，就像Dr.Dre当初看中Eminem的时候，Eminem绝没有现在唱Rap God的Eminem这么牛逼。Eminem很幸运得遇到了Dr.Dre，只是当幸运降临的时候，Eminem有没有足够努力去配得上那份幸运。相信Dr.Dre当时也看中其他很有才华的Rap singer，但唯有Eminem足够珍视这次机会，努力让当初的小屁孩成长为the Rap God。\n\n4，互联网真的是泡沫吗，至少是一种技术泡沫？还是说任何一样事物的成功都需要技术，人性，金融的结合，而互联网只不过是一种技术媒介而已？当人人都学会编程或者计算机能够自我元编程，那一个程序员存在的价值将是什么？\n\n5，早知道泡沫，一触就破。期望自己真的去努力完成自己的计划，去努力拥有自己想要的能力，去努力成为自己所佩服的人。\n","slug":"思考-2014-11-01-why-i-am-so-serious","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","_id":"civpkemaf00008t3al1j3u0dd","comments":1,"photos":[],"link":"","content":"<p>Rap God - Eminem</p>\n<embed src=\"http://www.xiami.com/widget/0_1772249933/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\">\n\n<p>突然明白自己的焦虑来自何处。</p>\n<p>1，绝不是因为你有多优秀。而是因为其他人表现出来的很多特质无时无刻得在向这个世界宣称着自己有多糟糕，而我只不过少抱怨了几句，多尝试了一点。</p>\n<p>2，至少不是在现在有多优秀。我其实是在预支未来，把别人所期望的误当作自己已经拥有的，多么傻的错觉。企业看中的只是你的潜力，并不是你现在就能够为企业带来什么样的产出，事实是你现在没有任何能力为企业带来价值。</p>\n<p>3，就像Dr.Dre当初看中Eminem的时候，Eminem绝没有现在唱Rap God的Eminem这么牛逼。Eminem很幸运得遇到了Dr.Dre，只是当幸运降临的时候，Eminem有没有足够努力去配得上那份幸运。相信Dr.Dre当时也看中其他很有才华的Rap singer，但唯有Eminem足够珍视这次机会，努力让当初的小屁孩成长为the Rap God。</p>\n<p>4，互联网真的是泡沫吗，至少是一种技术泡沫？还是说任何一样事物的成功都需要技术，人性，金融的结合，而互联网只不过是一种技术媒介而已？当人人都学会编程或者计算机能够自我元编程，那一个程序员存在的价值将是什么？</p>\n<p>5，早知道泡沫，一触就破。期望自己真的去努力完成自己的计划，去努力拥有自己想要的能力，去努力成为自己所佩服的人。</p>\n","excerpt":"","more":"<p>Rap God - Eminem</p>\n<embed src=\"http://www.xiami.com/widget/0_1772249933/singlePlayer.swf\" type=\"application/x-shockwave-flash\" width=\"257\" height=\"33\" wmode=\"transparent\"></embed>\n\n<p>突然明白自己的焦虑来自何处。</p>\n<p>1，绝不是因为你有多优秀。而是因为其他人表现出来的很多特质无时无刻得在向这个世界宣称着自己有多糟糕，而我只不过少抱怨了几句，多尝试了一点。</p>\n<p>2，至少不是在现在有多优秀。我其实是在预支未来，把别人所期望的误当作自己已经拥有的，多么傻的错觉。企业看中的只是你的潜力，并不是你现在就能够为企业带来什么样的产出，事实是你现在没有任何能力为企业带来价值。</p>\n<p>3，就像Dr.Dre当初看中Eminem的时候，Eminem绝没有现在唱Rap God的Eminem这么牛逼。Eminem很幸运得遇到了Dr.Dre，只是当幸运降临的时候，Eminem有没有足够努力去配得上那份幸运。相信Dr.Dre当时也看中其他很有才华的Rap singer，但唯有Eminem足够珍视这次机会，努力让当初的小屁孩成长为the Rap God。</p>\n<p>4，互联网真的是泡沫吗，至少是一种技术泡沫？还是说任何一样事物的成功都需要技术，人性，金融的结合，而互联网只不过是一种技术媒介而已？当人人都学会编程或者计算机能够自我元编程，那一个程序员存在的价值将是什么？</p>\n<p>5，早知道泡沫，一触就破。期望自己真的去努力完成自己的计划，去努力拥有自己想要的能力，去努力成为自己所佩服的人。</p>\n"},{"layout":"post","title":"ThoughtWorks面试演讲稿","keywords":"工作","description":null,"published":1,"_content":"\n大家好，我叫吕靖，来自西南交大。\n\n最近天气转凉，我也不幸因此感冒了， 所以声音有点嘶哑，讲得不好也请大家见谅。大家也要及时添加衣服，不要像我一样感冒了。\n\n也许每个人都曾经有一个梦想，那就是——「改变世界」，什么叫做改变世界呢，在我的理解里就是改变或者改善所有人的生活，使这个世界变得更加美好一点。Jobs用一台iPhone重新定义了手机，也从此颠覆了许多传统行业；Google的X实验室也在试验着它的「热气球网络」，为偏远地区接入互联网服务。\n\n那作为一个年轻人，该怎样去改变世界呢？我联想到的是我们这样一个年轻群体，年轻人具有着非凡的创造力，拥有着无限的可能性。如果我能够使这个群体实现价值最大化，使他们都能够去做自己想做的事情，那这个群体就能够为这个世界创造出更大的价值。\n\n年轻人当中有一群很酷的人，他们叫做——「程序员」，在极客精神越来越被大家所熟知的信息时代，程序员的影响力不可谓不大。Bill Gate创造了微软，Mark Zuckerberg创造出了他的facebook。如果我们能使更多年轻人学习编程，更好更容易地创造出美好的事物，那这个世界也会因此变得更加美好。\n\n最后我想谈到ThoughtWorks，ThoughtWorks是一家IT咨询行业的领袖企业，这里汇聚着世界上最有才华的软件精英，通过影响程序员群体，推进IT行业的发展，从而影响全球社会变革。可以说，ThoughtWorks就是在直接或间接得改变着整个世界。\n\n所以，加入ThoughtWorks，就是和ThoughtWorks一起改变世界，这就是我的热忱所在。\n\n谢谢大家！\n","source":"_posts/思考/2014-10-27-thoughtworks-speech.md","raw":"---\nlayout: post\ntitle: ThoughtWorks面试演讲稿\ncategory: 思考\ntags: 演讲\nkeywords: 工作\ndescription: \npublished: true\n---\n\n大家好，我叫吕靖，来自西南交大。\n\n最近天气转凉，我也不幸因此感冒了， 所以声音有点嘶哑，讲得不好也请大家见谅。大家也要及时添加衣服，不要像我一样感冒了。\n\n也许每个人都曾经有一个梦想，那就是——「改变世界」，什么叫做改变世界呢，在我的理解里就是改变或者改善所有人的生活，使这个世界变得更加美好一点。Jobs用一台iPhone重新定义了手机，也从此颠覆了许多传统行业；Google的X实验室也在试验着它的「热气球网络」，为偏远地区接入互联网服务。\n\n那作为一个年轻人，该怎样去改变世界呢？我联想到的是我们这样一个年轻群体，年轻人具有着非凡的创造力，拥有着无限的可能性。如果我能够使这个群体实现价值最大化，使他们都能够去做自己想做的事情，那这个群体就能够为这个世界创造出更大的价值。\n\n年轻人当中有一群很酷的人，他们叫做——「程序员」，在极客精神越来越被大家所熟知的信息时代，程序员的影响力不可谓不大。Bill Gate创造了微软，Mark Zuckerberg创造出了他的facebook。如果我们能使更多年轻人学习编程，更好更容易地创造出美好的事物，那这个世界也会因此变得更加美好。\n\n最后我想谈到ThoughtWorks，ThoughtWorks是一家IT咨询行业的领袖企业，这里汇聚着世界上最有才华的软件精英，通过影响程序员群体，推进IT行业的发展，从而影响全球社会变革。可以说，ThoughtWorks就是在直接或间接得改变着整个世界。\n\n所以，加入ThoughtWorks，就是和ThoughtWorks一起改变世界，这就是我的热忱所在。\n\n谢谢大家！\n","slug":"思考-2014-10-27-thoughtworks-speech","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","_id":"civpkemah00018t3abl33khm9","comments":1,"photos":[],"link":"","content":"<p>大家好，我叫吕靖，来自西南交大。</p>\n<p>最近天气转凉，我也不幸因此感冒了， 所以声音有点嘶哑，讲得不好也请大家见谅。大家也要及时添加衣服，不要像我一样感冒了。</p>\n<p>也许每个人都曾经有一个梦想，那就是——「改变世界」，什么叫做改变世界呢，在我的理解里就是改变或者改善所有人的生活，使这个世界变得更加美好一点。Jobs用一台iPhone重新定义了手机，也从此颠覆了许多传统行业；Google的X实验室也在试验着它的「热气球网络」，为偏远地区接入互联网服务。</p>\n<p>那作为一个年轻人，该怎样去改变世界呢？我联想到的是我们这样一个年轻群体，年轻人具有着非凡的创造力，拥有着无限的可能性。如果我能够使这个群体实现价值最大化，使他们都能够去做自己想做的事情，那这个群体就能够为这个世界创造出更大的价值。</p>\n<p>年轻人当中有一群很酷的人，他们叫做——「程序员」，在极客精神越来越被大家所熟知的信息时代，程序员的影响力不可谓不大。Bill Gate创造了微软，Mark Zuckerberg创造出了他的facebook。如果我们能使更多年轻人学习编程，更好更容易地创造出美好的事物，那这个世界也会因此变得更加美好。</p>\n<p>最后我想谈到ThoughtWorks，ThoughtWorks是一家IT咨询行业的领袖企业，这里汇聚着世界上最有才华的软件精英，通过影响程序员群体，推进IT行业的发展，从而影响全球社会变革。可以说，ThoughtWorks就是在直接或间接得改变着整个世界。</p>\n<p>所以，加入ThoughtWorks，就是和ThoughtWorks一起改变世界，这就是我的热忱所在。</p>\n<p>谢谢大家！</p>\n","excerpt":"","more":"<p>大家好，我叫吕靖，来自西南交大。</p>\n<p>最近天气转凉，我也不幸因此感冒了， 所以声音有点嘶哑，讲得不好也请大家见谅。大家也要及时添加衣服，不要像我一样感冒了。</p>\n<p>也许每个人都曾经有一个梦想，那就是——「改变世界」，什么叫做改变世界呢，在我的理解里就是改变或者改善所有人的生活，使这个世界变得更加美好一点。Jobs用一台iPhone重新定义了手机，也从此颠覆了许多传统行业；Google的X实验室也在试验着它的「热气球网络」，为偏远地区接入互联网服务。</p>\n<p>那作为一个年轻人，该怎样去改变世界呢？我联想到的是我们这样一个年轻群体，年轻人具有着非凡的创造力，拥有着无限的可能性。如果我能够使这个群体实现价值最大化，使他们都能够去做自己想做的事情，那这个群体就能够为这个世界创造出更大的价值。</p>\n<p>年轻人当中有一群很酷的人，他们叫做——「程序员」，在极客精神越来越被大家所熟知的信息时代，程序员的影响力不可谓不大。Bill Gate创造了微软，Mark Zuckerberg创造出了他的facebook。如果我们能使更多年轻人学习编程，更好更容易地创造出美好的事物，那这个世界也会因此变得更加美好。</p>\n<p>最后我想谈到ThoughtWorks，ThoughtWorks是一家IT咨询行业的领袖企业，这里汇聚着世界上最有才华的软件精英，通过影响程序员群体，推进IT行业的发展，从而影响全球社会变革。可以说，ThoughtWorks就是在直接或间接得改变着整个世界。</p>\n<p>所以，加入ThoughtWorks，就是和ThoughtWorks一起改变世界，这就是我的热忱所在。</p>\n<p>谢谢大家！</p>\n"},{"layout":"post","title":"由写作环境引起的反思：单一入口的智能化","published":1,"_content":"\n# 单一入口的智能化\n\n```python\n\ndef hello(name):\n\tprint \"hello\" + name\n\n```\n\n## 减少操作/思考成本\n\n### 直达目标：文本先行，不用担心其他额外的事情\n\n1. 比如现在我要记笔记、写博客就只需要打开写就是了，然后存到哪里，在哪里看，在哪里改格式，都不用管，或者说不是在写之前要考虑的事情。\n\n2. 目标导向，释放大脑，只需要肌肉记忆Cmd+Space打开Spotlight里面输入subl，打开了写就是，先做了再说，最重要就是“写”，剩下的事情之后再解决，内容先行。\n\n3. 不用考虑文字格式，一切都是文本，只是Markdown语法，就像写代码一样顺畅和优雅，然后根据Markdown语法还可以马上转换成其他任何格式，HTML、Word、PPT、各种随意。\n\n4. 至于存成`.md`文件之后，我可以加上tag，选择不同的note直接转发到Evernote。也可以存入Dropbox，之后的查看和修改都是以文本形式的，也就是说我可以用任何与Dropbox连接的写作工具进行修改。当然也可以用文件和文件夹的方式管理，这里有一个叫Marboo的工具可以进行可视化管理，文件就是文件，显示效果就是HTML效果，只做管理功能，不参与编辑，这个理念真是太棒太纯粹。\n\n5. 文本格式还有一个好处就是随处可编辑，就像代码一样，你也可以用Git来管理和记录整个写作过程，绝不会丢失任何一处你所涌现的想法，还可以任意回退到你想要的版本。还有就是结合Jekyll框架来写博客，把`.md`文件部署到GitHub Page上就可以自动生成静态HTML了。\n\n6. 技术学习笔记都会用Markdown语法以书的形式写在GitBook里面，新技术的全面了解最好能够有一个清晰良好的结构组织，而书的形式就再好不过了，就可以用章节的方式来全面管理知识架构。博客的作用主要就用来记录一些技术总结、感悟和思考等等，反正就是偶尔扯扯淡。\n\n### Sublime编辑器：各种强大的快捷键和扩展功能\n\n1. Cmd+R可以直接搜索`#`、`##`标题，太喜欢这样的层级关系显示。\n\n2. 最棒的就是编辑功能是用代码编辑器，就像写代码一样，当然还有很多快捷键像多处光标，词间跳转这样的功能。\n\n3. 作为一个颜控和工具控，太多的主题和插件可以折腾了呀，可以预想的是到时候就自己写扩展、写工具了。\n\n4. 沉浸模式，完全就是为写作而生，不管是写文本和写代码。\n\n\n## 工具统一化与入口单一化\n\n### 第二大脑：印象笔记/Evernote\n\n- 最初是觉得把Evernote作为信息到知识的终点，储存知识的第二大脑，然后一切资料都在这里被整理，在这里被找到。\n\n- 但是最终发现Evernote越来越卡了，打开和搜索的速度都太慢，搜索的效果其实并不好，不能够懂我到底想要什么，总之就是随着加入的东西越来越多，管理和检索知识的成本变高了。\n\n- 此处是不是要思考一下人的大脑的检索过程，人脑在搜索的时候应该是结合多方面因素比如今天的天气、情绪、处境，绝不仅仅只是一个关键词就可以了。\n\n- 并且问题出现了，大脑在你搜索之前就已经给你整理过大量的内容，而且进行了一定程度的空间/时间压缩，所以在需要的时候就能够直接给出最优/最简化的结果。\n\n### 谷歌做搜索和做产品的思路\n\n- Google在互联网初期的web时代以搜索起家，也是以搜索为其网络服务的第一入口，至今也保持了无比简洁的首页。Google并不像其他巨头加入了各种元素建立起所谓的门户网站，门户网站这种东西服务于为其他网站的流量导流，利益至上，再看看百度的搜索主页吧，只能呵呵。\n\n- 而Google大概是在搜索之后才会大做文章，比如根据你搜索的内容之后才会推送相应的广告，而不是一开始就在首页给你摆出广告，这实在是资源的合理分配、智能化搜索和用户体验的多重收益。\n\n- 在Chrome浏览器里面也是同样的，地址栏不仅仅只是输入URL的，别称Omnibar，可以搜索和实现大量的操作，当你输入相应的内容，根据内容的不同智能提示相应的URL或者书签或者搜索建议。\n\n- 而单一化入口在Google的一些尝试中也不是那么简单和有效，比如Android OS最初的手机按键是四个，除了现在能够看到的之外还有第四个即搜索按钮，Google就是想把PC时代的单一入口化思路带到移动端。\n\n- 其实我是非常喜欢这种为手机的搜索功能设立一个独立按键的思路，但可能是由于在移动设备上人们更喜欢点击图标而不是输入文字，当然这也是由于屏幕太小，虚拟键盘太难用的结果吧，更甚者，语音输入都比打字来得轻松。\n\n- 最近Google在做的事情就是将无处不在的搜索入口与移动端相连接，只需要在搜索栏输入`send to note`/`set a alarm`就可以给自己的手机发送内容或者设闹钟，简直就是又一个通过单一入口、文本先行、目标导向的典范。\n\n### 搜索与人脑的关系\n\n- 搜索的概念其实是非常符合大脑逻辑的，但是纯以关键词的方式进入就远没有人类大脑那么智能化，大脑所考虑的可不仅仅是关键词。\n\n- 回到大脑的自动处理功能，大脑并不仅仅是记录下一切，而是会选择性遗忘一些我们并不需要的东西，并且会从中提取相应的结构，从而建立起最优化策略防患于未然，在我们遇到问题的时候以最快速给出答案。\n\n- 而搜索与大脑类似的功能就是，虽只是给出几个搜索建议/搜索结果，但是背后的自动优化处理是我们看不到的，我们的大脑在睡觉的时候可是为我们做了非常大量的工作。\n\n\n## 关于未来的畅想：机器人、互联网、部落\n\n### 搜索引擎与机器人的距离有多远？\n\n- 在未来的世界里，可能就会有更加完善的输入输出方式，比如我们输入声音、图像、视频（不限于文本），搜索引擎就会根据这个显性输入和额外隐形输入（比如现在的时间，你身处的地点等等），然后智能化得给出我们最想要的那个结果。那个时候“搜索”大概就不再需要我们再去检“索”了吧，一“搜”，直接给出的就是答案。\n\n- 所以，当一台电脑或者任何一个智能设备具备了多样性的输入模式之后，它跟我们人类的差距还有多远呢？而且，输入的东西其实都是数据，这些数据并不一定要像人类一样具备耳朵、鼻子、眼睛等感官之后才可以获得。如果智能设备可以联网，可以从一些专业部门Hack到比人类器官更加准确的数据之后，加上自身强大的存储和运输能力，那是不是要比人类更加强大？\n\n- 更可怕的人工智能的输出模式也不局限于人体所拥有的肢体力量，在全球网络连接之后，人工智能可以随意篡改任何地方的军事情报，也就是国家间的信息战时代，可能会加入第三方势力：人工智能。\n\n- 由此，我不得不再推荐一下《疑犯追踪》这部美剧，The Machine输入输出的，还有，感情。\n\n### 组织与结构\n\n- 大脑的结构很像互联网，各个神经节点之间协同交流、工作又各有功能分区，层级状的组织架构又使不同神经节点具备不同的基础处理功能。互联网也可以看做是一个巨大的分布式机器群，当它整体发挥作用的时候是否也有与人脑一样的快速优化策略？它又会输出什么的力量来改变世界？\n\n- 另一个有趣的话题是，当每个机器都拥有超高智能的时候，它们会是一个怎么的部落群体？或者说，根本不会像人类一样，从而形成部落。","source":"_posts/思考/2015-05-12-intellectual-and-single-entrance.md","raw":"---\nlayout: post\ntitle: 由写作环境引起的反思：单一入口的智能化\ncategories: [思考]\ntags: [写作, Sublime, Google, Evernote]\npublished: True\n\n---\n\n# 单一入口的智能化\n\n```python\n\ndef hello(name):\n\tprint \"hello\" + name\n\n```\n\n## 减少操作/思考成本\n\n### 直达目标：文本先行，不用担心其他额外的事情\n\n1. 比如现在我要记笔记、写博客就只需要打开写就是了，然后存到哪里，在哪里看，在哪里改格式，都不用管，或者说不是在写之前要考虑的事情。\n\n2. 目标导向，释放大脑，只需要肌肉记忆Cmd+Space打开Spotlight里面输入subl，打开了写就是，先做了再说，最重要就是“写”，剩下的事情之后再解决，内容先行。\n\n3. 不用考虑文字格式，一切都是文本，只是Markdown语法，就像写代码一样顺畅和优雅，然后根据Markdown语法还可以马上转换成其他任何格式，HTML、Word、PPT、各种随意。\n\n4. 至于存成`.md`文件之后，我可以加上tag，选择不同的note直接转发到Evernote。也可以存入Dropbox，之后的查看和修改都是以文本形式的，也就是说我可以用任何与Dropbox连接的写作工具进行修改。当然也可以用文件和文件夹的方式管理，这里有一个叫Marboo的工具可以进行可视化管理，文件就是文件，显示效果就是HTML效果，只做管理功能，不参与编辑，这个理念真是太棒太纯粹。\n\n5. 文本格式还有一个好处就是随处可编辑，就像代码一样，你也可以用Git来管理和记录整个写作过程，绝不会丢失任何一处你所涌现的想法，还可以任意回退到你想要的版本。还有就是结合Jekyll框架来写博客，把`.md`文件部署到GitHub Page上就可以自动生成静态HTML了。\n\n6. 技术学习笔记都会用Markdown语法以书的形式写在GitBook里面，新技术的全面了解最好能够有一个清晰良好的结构组织，而书的形式就再好不过了，就可以用章节的方式来全面管理知识架构。博客的作用主要就用来记录一些技术总结、感悟和思考等等，反正就是偶尔扯扯淡。\n\n### Sublime编辑器：各种强大的快捷键和扩展功能\n\n1. Cmd+R可以直接搜索`#`、`##`标题，太喜欢这样的层级关系显示。\n\n2. 最棒的就是编辑功能是用代码编辑器，就像写代码一样，当然还有很多快捷键像多处光标，词间跳转这样的功能。\n\n3. 作为一个颜控和工具控，太多的主题和插件可以折腾了呀，可以预想的是到时候就自己写扩展、写工具了。\n\n4. 沉浸模式，完全就是为写作而生，不管是写文本和写代码。\n\n\n## 工具统一化与入口单一化\n\n### 第二大脑：印象笔记/Evernote\n\n- 最初是觉得把Evernote作为信息到知识的终点，储存知识的第二大脑，然后一切资料都在这里被整理，在这里被找到。\n\n- 但是最终发现Evernote越来越卡了，打开和搜索的速度都太慢，搜索的效果其实并不好，不能够懂我到底想要什么，总之就是随着加入的东西越来越多，管理和检索知识的成本变高了。\n\n- 此处是不是要思考一下人的大脑的检索过程，人脑在搜索的时候应该是结合多方面因素比如今天的天气、情绪、处境，绝不仅仅只是一个关键词就可以了。\n\n- 并且问题出现了，大脑在你搜索之前就已经给你整理过大量的内容，而且进行了一定程度的空间/时间压缩，所以在需要的时候就能够直接给出最优/最简化的结果。\n\n### 谷歌做搜索和做产品的思路\n\n- Google在互联网初期的web时代以搜索起家，也是以搜索为其网络服务的第一入口，至今也保持了无比简洁的首页。Google并不像其他巨头加入了各种元素建立起所谓的门户网站，门户网站这种东西服务于为其他网站的流量导流，利益至上，再看看百度的搜索主页吧，只能呵呵。\n\n- 而Google大概是在搜索之后才会大做文章，比如根据你搜索的内容之后才会推送相应的广告，而不是一开始就在首页给你摆出广告，这实在是资源的合理分配、智能化搜索和用户体验的多重收益。\n\n- 在Chrome浏览器里面也是同样的，地址栏不仅仅只是输入URL的，别称Omnibar，可以搜索和实现大量的操作，当你输入相应的内容，根据内容的不同智能提示相应的URL或者书签或者搜索建议。\n\n- 而单一化入口在Google的一些尝试中也不是那么简单和有效，比如Android OS最初的手机按键是四个，除了现在能够看到的之外还有第四个即搜索按钮，Google就是想把PC时代的单一入口化思路带到移动端。\n\n- 其实我是非常喜欢这种为手机的搜索功能设立一个独立按键的思路，但可能是由于在移动设备上人们更喜欢点击图标而不是输入文字，当然这也是由于屏幕太小，虚拟键盘太难用的结果吧，更甚者，语音输入都比打字来得轻松。\n\n- 最近Google在做的事情就是将无处不在的搜索入口与移动端相连接，只需要在搜索栏输入`send to note`/`set a alarm`就可以给自己的手机发送内容或者设闹钟，简直就是又一个通过单一入口、文本先行、目标导向的典范。\n\n### 搜索与人脑的关系\n\n- 搜索的概念其实是非常符合大脑逻辑的，但是纯以关键词的方式进入就远没有人类大脑那么智能化，大脑所考虑的可不仅仅是关键词。\n\n- 回到大脑的自动处理功能，大脑并不仅仅是记录下一切，而是会选择性遗忘一些我们并不需要的东西，并且会从中提取相应的结构，从而建立起最优化策略防患于未然，在我们遇到问题的时候以最快速给出答案。\n\n- 而搜索与大脑类似的功能就是，虽只是给出几个搜索建议/搜索结果，但是背后的自动优化处理是我们看不到的，我们的大脑在睡觉的时候可是为我们做了非常大量的工作。\n\n\n## 关于未来的畅想：机器人、互联网、部落\n\n### 搜索引擎与机器人的距离有多远？\n\n- 在未来的世界里，可能就会有更加完善的输入输出方式，比如我们输入声音、图像、视频（不限于文本），搜索引擎就会根据这个显性输入和额外隐形输入（比如现在的时间，你身处的地点等等），然后智能化得给出我们最想要的那个结果。那个时候“搜索”大概就不再需要我们再去检“索”了吧，一“搜”，直接给出的就是答案。\n\n- 所以，当一台电脑或者任何一个智能设备具备了多样性的输入模式之后，它跟我们人类的差距还有多远呢？而且，输入的东西其实都是数据，这些数据并不一定要像人类一样具备耳朵、鼻子、眼睛等感官之后才可以获得。如果智能设备可以联网，可以从一些专业部门Hack到比人类器官更加准确的数据之后，加上自身强大的存储和运输能力，那是不是要比人类更加强大？\n\n- 更可怕的人工智能的输出模式也不局限于人体所拥有的肢体力量，在全球网络连接之后，人工智能可以随意篡改任何地方的军事情报，也就是国家间的信息战时代，可能会加入第三方势力：人工智能。\n\n- 由此，我不得不再推荐一下《疑犯追踪》这部美剧，The Machine输入输出的，还有，感情。\n\n### 组织与结构\n\n- 大脑的结构很像互联网，各个神经节点之间协同交流、工作又各有功能分区，层级状的组织架构又使不同神经节点具备不同的基础处理功能。互联网也可以看做是一个巨大的分布式机器群，当它整体发挥作用的时候是否也有与人脑一样的快速优化策略？它又会输出什么的力量来改变世界？\n\n- 另一个有趣的话题是，当每个机器都拥有超高智能的时候，它们会是一个怎么的部落群体？或者说，根本不会像人类一样，从而形成部落。","slug":"思考-2015-05-12-intellectual-and-single-entrance","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","_id":"civpkemal00068t3as3rs942c","comments":1,"photos":[],"link":"","content":"<h1 id=\"单一入口的智能化\"><a href=\"#单一入口的智能化\" class=\"headerlink\" title=\"单一入口的智能化\"></a>单一入口的智能化</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"hello\"</span> + name</div></pre></td></tr></table></figure>\n<h2 id=\"减少操作-思考成本\"><a href=\"#减少操作-思考成本\" class=\"headerlink\" title=\"减少操作/思考成本\"></a>减少操作/思考成本</h2><h3 id=\"直达目标：文本先行，不用担心其他额外的事情\"><a href=\"#直达目标：文本先行，不用担心其他额外的事情\" class=\"headerlink\" title=\"直达目标：文本先行，不用担心其他额外的事情\"></a>直达目标：文本先行，不用担心其他额外的事情</h3><ol>\n<li><p>比如现在我要记笔记、写博客就只需要打开写就是了，然后存到哪里，在哪里看，在哪里改格式，都不用管，或者说不是在写之前要考虑的事情。</p>\n</li>\n<li><p>目标导向，释放大脑，只需要肌肉记忆Cmd+Space打开Spotlight里面输入subl，打开了写就是，先做了再说，最重要就是“写”，剩下的事情之后再解决，内容先行。</p>\n</li>\n<li><p>不用考虑文字格式，一切都是文本，只是Markdown语法，就像写代码一样顺畅和优雅，然后根据Markdown语法还可以马上转换成其他任何格式，HTML、Word、PPT、各种随意。</p>\n</li>\n<li><p>至于存成<code>.md</code>文件之后，我可以加上tag，选择不同的note直接转发到Evernote。也可以存入Dropbox，之后的查看和修改都是以文本形式的，也就是说我可以用任何与Dropbox连接的写作工具进行修改。当然也可以用文件和文件夹的方式管理，这里有一个叫Marboo的工具可以进行可视化管理，文件就是文件，显示效果就是HTML效果，只做管理功能，不参与编辑，这个理念真是太棒太纯粹。</p>\n</li>\n<li><p>文本格式还有一个好处就是随处可编辑，就像代码一样，你也可以用Git来管理和记录整个写作过程，绝不会丢失任何一处你所涌现的想法，还可以任意回退到你想要的版本。还有就是结合Jekyll框架来写博客，把<code>.md</code>文件部署到GitHub Page上就可以自动生成静态HTML了。</p>\n</li>\n<li><p>技术学习笔记都会用Markdown语法以书的形式写在GitBook里面，新技术的全面了解最好能够有一个清晰良好的结构组织，而书的形式就再好不过了，就可以用章节的方式来全面管理知识架构。博客的作用主要就用来记录一些技术总结、感悟和思考等等，反正就是偶尔扯扯淡。</p>\n</li>\n</ol>\n<h3 id=\"Sublime编辑器：各种强大的快捷键和扩展功能\"><a href=\"#Sublime编辑器：各种强大的快捷键和扩展功能\" class=\"headerlink\" title=\"Sublime编辑器：各种强大的快捷键和扩展功能\"></a>Sublime编辑器：各种强大的快捷键和扩展功能</h3><ol>\n<li><p>Cmd+R可以直接搜索<code>#</code>、<code>##</code>标题，太喜欢这样的层级关系显示。</p>\n</li>\n<li><p>最棒的就是编辑功能是用代码编辑器，就像写代码一样，当然还有很多快捷键像多处光标，词间跳转这样的功能。</p>\n</li>\n<li><p>作为一个颜控和工具控，太多的主题和插件可以折腾了呀，可以预想的是到时候就自己写扩展、写工具了。</p>\n</li>\n<li><p>沉浸模式，完全就是为写作而生，不管是写文本和写代码。</p>\n</li>\n</ol>\n<h2 id=\"工具统一化与入口单一化\"><a href=\"#工具统一化与入口单一化\" class=\"headerlink\" title=\"工具统一化与入口单一化\"></a>工具统一化与入口单一化</h2><h3 id=\"第二大脑：印象笔记-Evernote\"><a href=\"#第二大脑：印象笔记-Evernote\" class=\"headerlink\" title=\"第二大脑：印象笔记/Evernote\"></a>第二大脑：印象笔记/Evernote</h3><ul>\n<li><p>最初是觉得把Evernote作为信息到知识的终点，储存知识的第二大脑，然后一切资料都在这里被整理，在这里被找到。</p>\n</li>\n<li><p>但是最终发现Evernote越来越卡了，打开和搜索的速度都太慢，搜索的效果其实并不好，不能够懂我到底想要什么，总之就是随着加入的东西越来越多，管理和检索知识的成本变高了。</p>\n</li>\n<li><p>此处是不是要思考一下人的大脑的检索过程，人脑在搜索的时候应该是结合多方面因素比如今天的天气、情绪、处境，绝不仅仅只是一个关键词就可以了。</p>\n</li>\n<li><p>并且问题出现了，大脑在你搜索之前就已经给你整理过大量的内容，而且进行了一定程度的空间/时间压缩，所以在需要的时候就能够直接给出最优/最简化的结果。</p>\n</li>\n</ul>\n<h3 id=\"谷歌做搜索和做产品的思路\"><a href=\"#谷歌做搜索和做产品的思路\" class=\"headerlink\" title=\"谷歌做搜索和做产品的思路\"></a>谷歌做搜索和做产品的思路</h3><ul>\n<li><p>Google在互联网初期的web时代以搜索起家，也是以搜索为其网络服务的第一入口，至今也保持了无比简洁的首页。Google并不像其他巨头加入了各种元素建立起所谓的门户网站，门户网站这种东西服务于为其他网站的流量导流，利益至上，再看看百度的搜索主页吧，只能呵呵。</p>\n</li>\n<li><p>而Google大概是在搜索之后才会大做文章，比如根据你搜索的内容之后才会推送相应的广告，而不是一开始就在首页给你摆出广告，这实在是资源的合理分配、智能化搜索和用户体验的多重收益。</p>\n</li>\n<li><p>在Chrome浏览器里面也是同样的，地址栏不仅仅只是输入URL的，别称Omnibar，可以搜索和实现大量的操作，当你输入相应的内容，根据内容的不同智能提示相应的URL或者书签或者搜索建议。</p>\n</li>\n<li><p>而单一化入口在Google的一些尝试中也不是那么简单和有效，比如Android OS最初的手机按键是四个，除了现在能够看到的之外还有第四个即搜索按钮，Google就是想把PC时代的单一入口化思路带到移动端。</p>\n</li>\n<li><p>其实我是非常喜欢这种为手机的搜索功能设立一个独立按键的思路，但可能是由于在移动设备上人们更喜欢点击图标而不是输入文字，当然这也是由于屏幕太小，虚拟键盘太难用的结果吧，更甚者，语音输入都比打字来得轻松。</p>\n</li>\n<li><p>最近Google在做的事情就是将无处不在的搜索入口与移动端相连接，只需要在搜索栏输入<code>send to note</code>/<code>set a alarm</code>就可以给自己的手机发送内容或者设闹钟，简直就是又一个通过单一入口、文本先行、目标导向的典范。</p>\n</li>\n</ul>\n<h3 id=\"搜索与人脑的关系\"><a href=\"#搜索与人脑的关系\" class=\"headerlink\" title=\"搜索与人脑的关系\"></a>搜索与人脑的关系</h3><ul>\n<li><p>搜索的概念其实是非常符合大脑逻辑的，但是纯以关键词的方式进入就远没有人类大脑那么智能化，大脑所考虑的可不仅仅是关键词。</p>\n</li>\n<li><p>回到大脑的自动处理功能，大脑并不仅仅是记录下一切，而是会选择性遗忘一些我们并不需要的东西，并且会从中提取相应的结构，从而建立起最优化策略防患于未然，在我们遇到问题的时候以最快速给出答案。</p>\n</li>\n<li><p>而搜索与大脑类似的功能就是，虽只是给出几个搜索建议/搜索结果，但是背后的自动优化处理是我们看不到的，我们的大脑在睡觉的时候可是为我们做了非常大量的工作。</p>\n</li>\n</ul>\n<h2 id=\"关于未来的畅想：机器人、互联网、部落\"><a href=\"#关于未来的畅想：机器人、互联网、部落\" class=\"headerlink\" title=\"关于未来的畅想：机器人、互联网、部落\"></a>关于未来的畅想：机器人、互联网、部落</h2><h3 id=\"搜索引擎与机器人的距离有多远？\"><a href=\"#搜索引擎与机器人的距离有多远？\" class=\"headerlink\" title=\"搜索引擎与机器人的距离有多远？\"></a>搜索引擎与机器人的距离有多远？</h3><ul>\n<li><p>在未来的世界里，可能就会有更加完善的输入输出方式，比如我们输入声音、图像、视频（不限于文本），搜索引擎就会根据这个显性输入和额外隐形输入（比如现在的时间，你身处的地点等等），然后智能化得给出我们最想要的那个结果。那个时候“搜索”大概就不再需要我们再去检“索”了吧，一“搜”，直接给出的就是答案。</p>\n</li>\n<li><p>所以，当一台电脑或者任何一个智能设备具备了多样性的输入模式之后，它跟我们人类的差距还有多远呢？而且，输入的东西其实都是数据，这些数据并不一定要像人类一样具备耳朵、鼻子、眼睛等感官之后才可以获得。如果智能设备可以联网，可以从一些专业部门Hack到比人类器官更加准确的数据之后，加上自身强大的存储和运输能力，那是不是要比人类更加强大？</p>\n</li>\n<li><p>更可怕的人工智能的输出模式也不局限于人体所拥有的肢体力量，在全球网络连接之后，人工智能可以随意篡改任何地方的军事情报，也就是国家间的信息战时代，可能会加入第三方势力：人工智能。</p>\n</li>\n<li><p>由此，我不得不再推荐一下《疑犯追踪》这部美剧，The Machine输入输出的，还有，感情。</p>\n</li>\n</ul>\n<h3 id=\"组织与结构\"><a href=\"#组织与结构\" class=\"headerlink\" title=\"组织与结构\"></a>组织与结构</h3><ul>\n<li><p>大脑的结构很像互联网，各个神经节点之间协同交流、工作又各有功能分区，层级状的组织架构又使不同神经节点具备不同的基础处理功能。互联网也可以看做是一个巨大的分布式机器群，当它整体发挥作用的时候是否也有与人脑一样的快速优化策略？它又会输出什么的力量来改变世界？</p>\n</li>\n<li><p>另一个有趣的话题是，当每个机器都拥有超高智能的时候，它们会是一个怎么的部落群体？或者说，根本不会像人类一样，从而形成部落。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"单一入口的智能化\"><a href=\"#单一入口的智能化\" class=\"headerlink\" title=\"单一入口的智能化\"></a>单一入口的智能化</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hello</span><span class=\"params\">(name)</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\"hello\"</span> + name</div></pre></td></tr></table></figure>\n<h2 id=\"减少操作-思考成本\"><a href=\"#减少操作-思考成本\" class=\"headerlink\" title=\"减少操作/思考成本\"></a>减少操作/思考成本</h2><h3 id=\"直达目标：文本先行，不用担心其他额外的事情\"><a href=\"#直达目标：文本先行，不用担心其他额外的事情\" class=\"headerlink\" title=\"直达目标：文本先行，不用担心其他额外的事情\"></a>直达目标：文本先行，不用担心其他额外的事情</h3><ol>\n<li><p>比如现在我要记笔记、写博客就只需要打开写就是了，然后存到哪里，在哪里看，在哪里改格式，都不用管，或者说不是在写之前要考虑的事情。</p>\n</li>\n<li><p>目标导向，释放大脑，只需要肌肉记忆Cmd+Space打开Spotlight里面输入subl，打开了写就是，先做了再说，最重要就是“写”，剩下的事情之后再解决，内容先行。</p>\n</li>\n<li><p>不用考虑文字格式，一切都是文本，只是Markdown语法，就像写代码一样顺畅和优雅，然后根据Markdown语法还可以马上转换成其他任何格式，HTML、Word、PPT、各种随意。</p>\n</li>\n<li><p>至于存成<code>.md</code>文件之后，我可以加上tag，选择不同的note直接转发到Evernote。也可以存入Dropbox，之后的查看和修改都是以文本形式的，也就是说我可以用任何与Dropbox连接的写作工具进行修改。当然也可以用文件和文件夹的方式管理，这里有一个叫Marboo的工具可以进行可视化管理，文件就是文件，显示效果就是HTML效果，只做管理功能，不参与编辑，这个理念真是太棒太纯粹。</p>\n</li>\n<li><p>文本格式还有一个好处就是随处可编辑，就像代码一样，你也可以用Git来管理和记录整个写作过程，绝不会丢失任何一处你所涌现的想法，还可以任意回退到你想要的版本。还有就是结合Jekyll框架来写博客，把<code>.md</code>文件部署到GitHub Page上就可以自动生成静态HTML了。</p>\n</li>\n<li><p>技术学习笔记都会用Markdown语法以书的形式写在GitBook里面，新技术的全面了解最好能够有一个清晰良好的结构组织，而书的形式就再好不过了，就可以用章节的方式来全面管理知识架构。博客的作用主要就用来记录一些技术总结、感悟和思考等等，反正就是偶尔扯扯淡。</p>\n</li>\n</ol>\n<h3 id=\"Sublime编辑器：各种强大的快捷键和扩展功能\"><a href=\"#Sublime编辑器：各种强大的快捷键和扩展功能\" class=\"headerlink\" title=\"Sublime编辑器：各种强大的快捷键和扩展功能\"></a>Sublime编辑器：各种强大的快捷键和扩展功能</h3><ol>\n<li><p>Cmd+R可以直接搜索<code>#</code>、<code>##</code>标题，太喜欢这样的层级关系显示。</p>\n</li>\n<li><p>最棒的就是编辑功能是用代码编辑器，就像写代码一样，当然还有很多快捷键像多处光标，词间跳转这样的功能。</p>\n</li>\n<li><p>作为一个颜控和工具控，太多的主题和插件可以折腾了呀，可以预想的是到时候就自己写扩展、写工具了。</p>\n</li>\n<li><p>沉浸模式，完全就是为写作而生，不管是写文本和写代码。</p>\n</li>\n</ol>\n<h2 id=\"工具统一化与入口单一化\"><a href=\"#工具统一化与入口单一化\" class=\"headerlink\" title=\"工具统一化与入口单一化\"></a>工具统一化与入口单一化</h2><h3 id=\"第二大脑：印象笔记-Evernote\"><a href=\"#第二大脑：印象笔记-Evernote\" class=\"headerlink\" title=\"第二大脑：印象笔记/Evernote\"></a>第二大脑：印象笔记/Evernote</h3><ul>\n<li><p>最初是觉得把Evernote作为信息到知识的终点，储存知识的第二大脑，然后一切资料都在这里被整理，在这里被找到。</p>\n</li>\n<li><p>但是最终发现Evernote越来越卡了，打开和搜索的速度都太慢，搜索的效果其实并不好，不能够懂我到底想要什么，总之就是随着加入的东西越来越多，管理和检索知识的成本变高了。</p>\n</li>\n<li><p>此处是不是要思考一下人的大脑的检索过程，人脑在搜索的时候应该是结合多方面因素比如今天的天气、情绪、处境，绝不仅仅只是一个关键词就可以了。</p>\n</li>\n<li><p>并且问题出现了，大脑在你搜索之前就已经给你整理过大量的内容，而且进行了一定程度的空间/时间压缩，所以在需要的时候就能够直接给出最优/最简化的结果。</p>\n</li>\n</ul>\n<h3 id=\"谷歌做搜索和做产品的思路\"><a href=\"#谷歌做搜索和做产品的思路\" class=\"headerlink\" title=\"谷歌做搜索和做产品的思路\"></a>谷歌做搜索和做产品的思路</h3><ul>\n<li><p>Google在互联网初期的web时代以搜索起家，也是以搜索为其网络服务的第一入口，至今也保持了无比简洁的首页。Google并不像其他巨头加入了各种元素建立起所谓的门户网站，门户网站这种东西服务于为其他网站的流量导流，利益至上，再看看百度的搜索主页吧，只能呵呵。</p>\n</li>\n<li><p>而Google大概是在搜索之后才会大做文章，比如根据你搜索的内容之后才会推送相应的广告，而不是一开始就在首页给你摆出广告，这实在是资源的合理分配、智能化搜索和用户体验的多重收益。</p>\n</li>\n<li><p>在Chrome浏览器里面也是同样的，地址栏不仅仅只是输入URL的，别称Omnibar，可以搜索和实现大量的操作，当你输入相应的内容，根据内容的不同智能提示相应的URL或者书签或者搜索建议。</p>\n</li>\n<li><p>而单一化入口在Google的一些尝试中也不是那么简单和有效，比如Android OS最初的手机按键是四个，除了现在能够看到的之外还有第四个即搜索按钮，Google就是想把PC时代的单一入口化思路带到移动端。</p>\n</li>\n<li><p>其实我是非常喜欢这种为手机的搜索功能设立一个独立按键的思路，但可能是由于在移动设备上人们更喜欢点击图标而不是输入文字，当然这也是由于屏幕太小，虚拟键盘太难用的结果吧，更甚者，语音输入都比打字来得轻松。</p>\n</li>\n<li><p>最近Google在做的事情就是将无处不在的搜索入口与移动端相连接，只需要在搜索栏输入<code>send to note</code>/<code>set a alarm</code>就可以给自己的手机发送内容或者设闹钟，简直就是又一个通过单一入口、文本先行、目标导向的典范。</p>\n</li>\n</ul>\n<h3 id=\"搜索与人脑的关系\"><a href=\"#搜索与人脑的关系\" class=\"headerlink\" title=\"搜索与人脑的关系\"></a>搜索与人脑的关系</h3><ul>\n<li><p>搜索的概念其实是非常符合大脑逻辑的，但是纯以关键词的方式进入就远没有人类大脑那么智能化，大脑所考虑的可不仅仅是关键词。</p>\n</li>\n<li><p>回到大脑的自动处理功能，大脑并不仅仅是记录下一切，而是会选择性遗忘一些我们并不需要的东西，并且会从中提取相应的结构，从而建立起最优化策略防患于未然，在我们遇到问题的时候以最快速给出答案。</p>\n</li>\n<li><p>而搜索与大脑类似的功能就是，虽只是给出几个搜索建议/搜索结果，但是背后的自动优化处理是我们看不到的，我们的大脑在睡觉的时候可是为我们做了非常大量的工作。</p>\n</li>\n</ul>\n<h2 id=\"关于未来的畅想：机器人、互联网、部落\"><a href=\"#关于未来的畅想：机器人、互联网、部落\" class=\"headerlink\" title=\"关于未来的畅想：机器人、互联网、部落\"></a>关于未来的畅想：机器人、互联网、部落</h2><h3 id=\"搜索引擎与机器人的距离有多远？\"><a href=\"#搜索引擎与机器人的距离有多远？\" class=\"headerlink\" title=\"搜索引擎与机器人的距离有多远？\"></a>搜索引擎与机器人的距离有多远？</h3><ul>\n<li><p>在未来的世界里，可能就会有更加完善的输入输出方式，比如我们输入声音、图像、视频（不限于文本），搜索引擎就会根据这个显性输入和额外隐形输入（比如现在的时间，你身处的地点等等），然后智能化得给出我们最想要的那个结果。那个时候“搜索”大概就不再需要我们再去检“索”了吧，一“搜”，直接给出的就是答案。</p>\n</li>\n<li><p>所以，当一台电脑或者任何一个智能设备具备了多样性的输入模式之后，它跟我们人类的差距还有多远呢？而且，输入的东西其实都是数据，这些数据并不一定要像人类一样具备耳朵、鼻子、眼睛等感官之后才可以获得。如果智能设备可以联网，可以从一些专业部门Hack到比人类器官更加准确的数据之后，加上自身强大的存储和运输能力，那是不是要比人类更加强大？</p>\n</li>\n<li><p>更可怕的人工智能的输出模式也不局限于人体所拥有的肢体力量，在全球网络连接之后，人工智能可以随意篡改任何地方的军事情报，也就是国家间的信息战时代，可能会加入第三方势力：人工智能。</p>\n</li>\n<li><p>由此，我不得不再推荐一下《疑犯追踪》这部美剧，The Machine输入输出的，还有，感情。</p>\n</li>\n</ul>\n<h3 id=\"组织与结构\"><a href=\"#组织与结构\" class=\"headerlink\" title=\"组织与结构\"></a>组织与结构</h3><ul>\n<li><p>大脑的结构很像互联网，各个神经节点之间协同交流、工作又各有功能分区，层级状的组织架构又使不同神经节点具备不同的基础处理功能。互联网也可以看做是一个巨大的分布式机器群，当它整体发挥作用的时候是否也有与人脑一样的快速优化策略？它又会输出什么的力量来改变世界？</p>\n</li>\n<li><p>另一个有趣的话题是，当每个机器都拥有超高智能的时候，它们会是一个怎么的部落群体？或者说，根本不会像人类一样，从而形成部落。</p>\n</li>\n</ul>\n"},{"layout":"post","title":"出走寝室：在图书馆的所思所想","published":1,"_content":"\n# 在图书馆的所思所想\n\n## 新感觉\n\n其实不出来，不到图书馆走一趟，我还真不知道自己的电脑已经脏成这个样子了，真的是让自己吃惊了一把，而且忍受不了自己迫不及待地清理了一下。\n\n坐在这里感觉好多了，莫名的轻松感，并且开始有信心去做要做的事情，目前最大的事情就是毕业论文，相信在不同的地方有不同的状态去完成它！\n\n## Mac OS X\n\n刚刚保存文件的时候tag系统把我吓尿了，简直就是梦想中的功能，如图所示：\n\n![OS X Tag](/public/img/idea/OS%20X%20Tag.png)\n\nOS X原生支持为每个文件建立tag的功能，所以纯文本+标签的笔记系统完美建立起来啦，哈哈哈，根本不需要依赖任何一个大型软件，各个功能都解耦成功，都可以切换和选用在该领域做得最好的产品。\n\n但是需要考虑的一个问题是这些tag能不能同步到其他设备？\n\n## 产品解耦\n\n人类与机器最大的差别就是，羁绊。人作为群体性动物，不同的人之间往往耦合度极高，存在各种各样的关系将人们结合在一起。那这样的东西是不是束缚呢？以后再说，喜忧参半。\n\n产品作为一种工具，这里讨论的特定于某一种形而上的软件，处于产品之下的代码。借鉴于软件开发的思想，不同模块的代码之间应该进行解耦，不能够互相依赖，那么在生活中使用工具的时候，是不是也应该尽量选取耦合度比较低的产品呢？\n\n锤子就是锤子，它到底应不应该做成一个手机呢？是注重于小而美的钉钉子功能，还是加入操作系统、打电话、发短信这样全而重的功能呢？这就是一个问题，当你决定依赖于某一特定产品的时候，随着时间的推移，你总是会冒出各种不同的新需求，从而期望这个产品能够刚好开发出这样的功能满足自己。\n\n## 功能依赖\n\n往往理想很丰满，现实很骨感，当你越发依赖它的时候，你就越发觉得它缺胳膊少腿的没有满足你想要的需求，怎么这个同步功能也不可以，这个编辑功能太难用了，诸如此类。\n\n所以说，最佳的方案就是绝不依赖某一单一产品，因为世上本就没有绝对完美到能够满足你所有需求的东西。最佳的策略就是寻找最本质的东西：我思考的是内容，我写的是文字，存储的就是纯文本。抽取这些文件之后，需要做的可能就是同步呀，加标签呀，树形管理呀，不同样式预览呀，诸如此类。而每一种，都有额外的不同产品来履行其本职工作。\n\n准确来说，Git只是一个版本管理工具，一切版本信息都保存在`.git/`文件夹里面。如果只需要同步，可以直接使用Dropbox就好了，只要同步了`.git/`文件夹，你就有了想要的版本信息呀。当然也可以使用GitHub，优势就是能够直接在GitHub网站上看到自己的版本记录啦，从而就构成了可同步的版本管理工具，美其名曰远程仓库，这简直就是两种功能的完美结合，同时依赖于两种需求，工具上却互不耦合。\n\n## 需求和爱情\n\n就像爱上一个人，最开始的时候可能就只是因为她的某一个特点，比如爱笑，刚好满足了你喜欢好看的笑容这样一个需求。可是随着你们在一起之后，你越发疯狂，不可理论无理取闹得提出了各种其他方面的要求，比如来大姨妈了为什么不关心我，比如这么晚了为什么不催我睡觉，比如今天早上为什么忘记跟我说晚安，诸如此类，还要美其名曰我其实只是有那一个“潜在”需求：你是不是还爱我？\n\n## 图床\n\n突然想插入图片，最佳流程应该是，截图自动保存到Dropbox，然后在Dropbox里面分享公开链接，从而建立自己图床外链。\n\n由于Dropbox被墙，想到两个解决方案：\n\n1. 曾经看到过相关资料可以设置链接DNS，国内可访问。\n2. 直接使用flicker分享图片，值得一试。\n\n然后进而觉得GIF动图的效果可能更好，所以就想去尝试和挑选一款GIF录制软件了。\n\n## 断网\n\n像以前有网的时候我是绝对会忍不住诱惑就陷入寻找GIF软件的深渊了，然后一下午就又过去了。\n\n一款软件是有学习成本的，而寻找最好的软件也是需要花费时间精力的，每每这种时候我都会花费大量时间在寻找和对比各种工具上，由此而忘记了自己要写东西的初衷。\n\n这种行为就像一个原始人一样，总是希望囤积最多的粮食，总是害怕最好的东西不属于自己。\n\n## 享受\n\n当某件事情过度之后，抽出一定时间去做与之相反的事情是一种享受，就像现在坐在图书馆享受着断网的日子，特别是在尝试过联网却不得结果的时候，辗转之间，尤为轻松。\n\n又或者是，尝试过那么多之后终于找到最为合适的方式是一种享受，就像现在以最为美好的方式写作，画面简直太沉浸太完美。只关注于写些什么，行文之间就是自己的思考，这就是快乐呀。\n\n## 移动端\n\n然后又想到写作的种种方面，在移动端如何写？本来在手机/iPad上写东西就不是一件轻松的事情，因为虚拟键盘的原因根本就无法很好地进行文字输入。\n\n更好的方式或许是语音输入然后转化为文字，这里需要考虑到环境的影响，比如图书馆你没法说话或者是在嘈杂的地方语音识别不准，当然另外一个因素就是语音识别技术本身的先进性，如果说识别出一大堆错误照样需要人为输入文字修改，那岂不是违背初衷了。\n\n总之，在移动端是不可能出现能够超越PC端的码字体验，如果并没有这样的环境，那为什么要做多余的事情，试试在手机上做一下word排版？所以说，手机上最好就是快速记录自己的思考内容，如何良好的组织和发散用户思维才是这个产品最重要的核心价值，这里想到的就是思维导图和树形workflowy等等工具，又或者依旧是纯文本+特定标签。\n\n## 思维组织\n\n组织思维的产品应该是怎么样的呢？\n\n- 提问式的？九宫格式提出几个方面引发思考？那为什么要限定数量？\n- GTD流程式？一定要注重引导用户操作，用户只关心思维思考，最后去做（还是什么）？\n- 思维导图式？移动端的操作输入依旧很成问题，格式感太重。\n- 纯文本语法式？书写的时候只需要加入@、#、!、&等等的语法标签，然后组织和生成新的格式？有种编程语言编译器/解释器的感觉了。\n- 关键词联接式？\n\n## 同步\n\n在移动端的思维记录永远都是很简单的内容和结构，最后需要转化为更详细的文字篇幅的时候就在PC端处理吧，所以说记录在移动端，重新加工在PC端。目前只需要在EverMemo里面输入纯文字+语法标签，就可以同步到EverNote里面，然后再PC端就可以人为解释自己所设定的具有特定含义的语法标签。\n\n同步到EverNote里面之后就能够在sublime里面打开从而写作啦，又回到这样一个完美的写作环境，真是开心，来个颜文字：~\\(≧▽≦)/~啦啦啦\n\n## 平衡\n\n凡事有好有坏，正反两面不过利弊，尚且每个人都独一无二有自己的看法。我们这个时代无法离开网络，也无法离开社交圈，甚至无法离开游戏，只是在做这些事情的时候如何掌握其中的度：\n\n- 如何去平衡网络连接与断开的时间，在不同的时候做不同的事情。\n- 如何去平衡玩游戏娱乐或发泄或结交朋友和远离游戏删除游戏的时间。\n- 如何去平衡在什么样状态做什么样的事，一种是偏执，一种是执着。\n\n## 捷径\n\n这真的是本次思维之旅的最后一个话题了，好累好累呀，脑袋要炸了！\n\n- 在不同的精神状态下做不同的事情（为啥要在疲惫的时候学习，精力充沛的时候洗衣服？）\n- 在不同的兴趣爱好下做不同的事情（为啥要忙碌于写文字报告而不是创造理想的完美软件？）\n- 在不同的目标导向下做不同的事情（为啥要花费大量精力在毕设产品上而不是毕业论文上？）\n- 在不同的团队群体中做不同的事情（为啥要去做全英文Lead而不专心于写代码技术擅长？）\n\n=> 防止资源的不必要浪费\n\n\n\n","source":"_posts/思考/2015-05-27-new-state-in-library.md","raw":"---\nlayout: post\ntitle: 出走寝室：在图书馆的所思所想\ncategories: [思考]\ntags: []\npublished: True\n\n---\n\n# 在图书馆的所思所想\n\n## 新感觉\n\n其实不出来，不到图书馆走一趟，我还真不知道自己的电脑已经脏成这个样子了，真的是让自己吃惊了一把，而且忍受不了自己迫不及待地清理了一下。\n\n坐在这里感觉好多了，莫名的轻松感，并且开始有信心去做要做的事情，目前最大的事情就是毕业论文，相信在不同的地方有不同的状态去完成它！\n\n## Mac OS X\n\n刚刚保存文件的时候tag系统把我吓尿了，简直就是梦想中的功能，如图所示：\n\n![OS X Tag](/public/img/idea/OS%20X%20Tag.png)\n\nOS X原生支持为每个文件建立tag的功能，所以纯文本+标签的笔记系统完美建立起来啦，哈哈哈，根本不需要依赖任何一个大型软件，各个功能都解耦成功，都可以切换和选用在该领域做得最好的产品。\n\n但是需要考虑的一个问题是这些tag能不能同步到其他设备？\n\n## 产品解耦\n\n人类与机器最大的差别就是，羁绊。人作为群体性动物，不同的人之间往往耦合度极高，存在各种各样的关系将人们结合在一起。那这样的东西是不是束缚呢？以后再说，喜忧参半。\n\n产品作为一种工具，这里讨论的特定于某一种形而上的软件，处于产品之下的代码。借鉴于软件开发的思想，不同模块的代码之间应该进行解耦，不能够互相依赖，那么在生活中使用工具的时候，是不是也应该尽量选取耦合度比较低的产品呢？\n\n锤子就是锤子，它到底应不应该做成一个手机呢？是注重于小而美的钉钉子功能，还是加入操作系统、打电话、发短信这样全而重的功能呢？这就是一个问题，当你决定依赖于某一特定产品的时候，随着时间的推移，你总是会冒出各种不同的新需求，从而期望这个产品能够刚好开发出这样的功能满足自己。\n\n## 功能依赖\n\n往往理想很丰满，现实很骨感，当你越发依赖它的时候，你就越发觉得它缺胳膊少腿的没有满足你想要的需求，怎么这个同步功能也不可以，这个编辑功能太难用了，诸如此类。\n\n所以说，最佳的方案就是绝不依赖某一单一产品，因为世上本就没有绝对完美到能够满足你所有需求的东西。最佳的策略就是寻找最本质的东西：我思考的是内容，我写的是文字，存储的就是纯文本。抽取这些文件之后，需要做的可能就是同步呀，加标签呀，树形管理呀，不同样式预览呀，诸如此类。而每一种，都有额外的不同产品来履行其本职工作。\n\n准确来说，Git只是一个版本管理工具，一切版本信息都保存在`.git/`文件夹里面。如果只需要同步，可以直接使用Dropbox就好了，只要同步了`.git/`文件夹，你就有了想要的版本信息呀。当然也可以使用GitHub，优势就是能够直接在GitHub网站上看到自己的版本记录啦，从而就构成了可同步的版本管理工具，美其名曰远程仓库，这简直就是两种功能的完美结合，同时依赖于两种需求，工具上却互不耦合。\n\n## 需求和爱情\n\n就像爱上一个人，最开始的时候可能就只是因为她的某一个特点，比如爱笑，刚好满足了你喜欢好看的笑容这样一个需求。可是随着你们在一起之后，你越发疯狂，不可理论无理取闹得提出了各种其他方面的要求，比如来大姨妈了为什么不关心我，比如这么晚了为什么不催我睡觉，比如今天早上为什么忘记跟我说晚安，诸如此类，还要美其名曰我其实只是有那一个“潜在”需求：你是不是还爱我？\n\n## 图床\n\n突然想插入图片，最佳流程应该是，截图自动保存到Dropbox，然后在Dropbox里面分享公开链接，从而建立自己图床外链。\n\n由于Dropbox被墙，想到两个解决方案：\n\n1. 曾经看到过相关资料可以设置链接DNS，国内可访问。\n2. 直接使用flicker分享图片，值得一试。\n\n然后进而觉得GIF动图的效果可能更好，所以就想去尝试和挑选一款GIF录制软件了。\n\n## 断网\n\n像以前有网的时候我是绝对会忍不住诱惑就陷入寻找GIF软件的深渊了，然后一下午就又过去了。\n\n一款软件是有学习成本的，而寻找最好的软件也是需要花费时间精力的，每每这种时候我都会花费大量时间在寻找和对比各种工具上，由此而忘记了自己要写东西的初衷。\n\n这种行为就像一个原始人一样，总是希望囤积最多的粮食，总是害怕最好的东西不属于自己。\n\n## 享受\n\n当某件事情过度之后，抽出一定时间去做与之相反的事情是一种享受，就像现在坐在图书馆享受着断网的日子，特别是在尝试过联网却不得结果的时候，辗转之间，尤为轻松。\n\n又或者是，尝试过那么多之后终于找到最为合适的方式是一种享受，就像现在以最为美好的方式写作，画面简直太沉浸太完美。只关注于写些什么，行文之间就是自己的思考，这就是快乐呀。\n\n## 移动端\n\n然后又想到写作的种种方面，在移动端如何写？本来在手机/iPad上写东西就不是一件轻松的事情，因为虚拟键盘的原因根本就无法很好地进行文字输入。\n\n更好的方式或许是语音输入然后转化为文字，这里需要考虑到环境的影响，比如图书馆你没法说话或者是在嘈杂的地方语音识别不准，当然另外一个因素就是语音识别技术本身的先进性，如果说识别出一大堆错误照样需要人为输入文字修改，那岂不是违背初衷了。\n\n总之，在移动端是不可能出现能够超越PC端的码字体验，如果并没有这样的环境，那为什么要做多余的事情，试试在手机上做一下word排版？所以说，手机上最好就是快速记录自己的思考内容，如何良好的组织和发散用户思维才是这个产品最重要的核心价值，这里想到的就是思维导图和树形workflowy等等工具，又或者依旧是纯文本+特定标签。\n\n## 思维组织\n\n组织思维的产品应该是怎么样的呢？\n\n- 提问式的？九宫格式提出几个方面引发思考？那为什么要限定数量？\n- GTD流程式？一定要注重引导用户操作，用户只关心思维思考，最后去做（还是什么）？\n- 思维导图式？移动端的操作输入依旧很成问题，格式感太重。\n- 纯文本语法式？书写的时候只需要加入@、#、!、&等等的语法标签，然后组织和生成新的格式？有种编程语言编译器/解释器的感觉了。\n- 关键词联接式？\n\n## 同步\n\n在移动端的思维记录永远都是很简单的内容和结构，最后需要转化为更详细的文字篇幅的时候就在PC端处理吧，所以说记录在移动端，重新加工在PC端。目前只需要在EverMemo里面输入纯文字+语法标签，就可以同步到EverNote里面，然后再PC端就可以人为解释自己所设定的具有特定含义的语法标签。\n\n同步到EverNote里面之后就能够在sublime里面打开从而写作啦，又回到这样一个完美的写作环境，真是开心，来个颜文字：~\\(≧▽≦)/~啦啦啦\n\n## 平衡\n\n凡事有好有坏，正反两面不过利弊，尚且每个人都独一无二有自己的看法。我们这个时代无法离开网络，也无法离开社交圈，甚至无法离开游戏，只是在做这些事情的时候如何掌握其中的度：\n\n- 如何去平衡网络连接与断开的时间，在不同的时候做不同的事情。\n- 如何去平衡玩游戏娱乐或发泄或结交朋友和远离游戏删除游戏的时间。\n- 如何去平衡在什么样状态做什么样的事，一种是偏执，一种是执着。\n\n## 捷径\n\n这真的是本次思维之旅的最后一个话题了，好累好累呀，脑袋要炸了！\n\n- 在不同的精神状态下做不同的事情（为啥要在疲惫的时候学习，精力充沛的时候洗衣服？）\n- 在不同的兴趣爱好下做不同的事情（为啥要忙碌于写文字报告而不是创造理想的完美软件？）\n- 在不同的目标导向下做不同的事情（为啥要花费大量精力在毕设产品上而不是毕业论文上？）\n- 在不同的团队群体中做不同的事情（为啥要去做全英文Lead而不专心于写代码技术擅长？）\n\n=> 防止资源的不必要浪费\n\n\n\n","slug":"思考-2015-05-27-new-state-in-library","date":"2015-05-27T09:06:51.000Z","updated":"2015-05-27T09:06:51.000Z","_id":"civpkemam00078t3a9xpdy3lz","comments":1,"photos":[],"link":"","content":"<h1 id=\"在图书馆的所思所想\"><a href=\"#在图书馆的所思所想\" class=\"headerlink\" title=\"在图书馆的所思所想\"></a>在图书馆的所思所想</h1><h2 id=\"新感觉\"><a href=\"#新感觉\" class=\"headerlink\" title=\"新感觉\"></a>新感觉</h2><p>其实不出来，不到图书馆走一趟，我还真不知道自己的电脑已经脏成这个样子了，真的是让自己吃惊了一把，而且忍受不了自己迫不及待地清理了一下。</p>\n<p>坐在这里感觉好多了，莫名的轻松感，并且开始有信心去做要做的事情，目前最大的事情就是毕业论文，相信在不同的地方有不同的状态去完成它！</p>\n<h2 id=\"Mac-OS-X\"><a href=\"#Mac-OS-X\" class=\"headerlink\" title=\"Mac OS X\"></a>Mac OS X</h2><p>刚刚保存文件的时候tag系统把我吓尿了，简直就是梦想中的功能，如图所示：</p>\n<p><img src=\"/public/img/idea/OS%20X%20Tag.png\" alt=\"OS X Tag\"></p>\n<p>OS X原生支持为每个文件建立tag的功能，所以纯文本+标签的笔记系统完美建立起来啦，哈哈哈，根本不需要依赖任何一个大型软件，各个功能都解耦成功，都可以切换和选用在该领域做得最好的产品。</p>\n<p>但是需要考虑的一个问题是这些tag能不能同步到其他设备？</p>\n<h2 id=\"产品解耦\"><a href=\"#产品解耦\" class=\"headerlink\" title=\"产品解耦\"></a>产品解耦</h2><p>人类与机器最大的差别就是，羁绊。人作为群体性动物，不同的人之间往往耦合度极高，存在各种各样的关系将人们结合在一起。那这样的东西是不是束缚呢？以后再说，喜忧参半。</p>\n<p>产品作为一种工具，这里讨论的特定于某一种形而上的软件，处于产品之下的代码。借鉴于软件开发的思想，不同模块的代码之间应该进行解耦，不能够互相依赖，那么在生活中使用工具的时候，是不是也应该尽量选取耦合度比较低的产品呢？</p>\n<p>锤子就是锤子，它到底应不应该做成一个手机呢？是注重于小而美的钉钉子功能，还是加入操作系统、打电话、发短信这样全而重的功能呢？这就是一个问题，当你决定依赖于某一特定产品的时候，随着时间的推移，你总是会冒出各种不同的新需求，从而期望这个产品能够刚好开发出这样的功能满足自己。</p>\n<h2 id=\"功能依赖\"><a href=\"#功能依赖\" class=\"headerlink\" title=\"功能依赖\"></a>功能依赖</h2><p>往往理想很丰满，现实很骨感，当你越发依赖它的时候，你就越发觉得它缺胳膊少腿的没有满足你想要的需求，怎么这个同步功能也不可以，这个编辑功能太难用了，诸如此类。</p>\n<p>所以说，最佳的方案就是绝不依赖某一单一产品，因为世上本就没有绝对完美到能够满足你所有需求的东西。最佳的策略就是寻找最本质的东西：我思考的是内容，我写的是文字，存储的就是纯文本。抽取这些文件之后，需要做的可能就是同步呀，加标签呀，树形管理呀，不同样式预览呀，诸如此类。而每一种，都有额外的不同产品来履行其本职工作。</p>\n<p>准确来说，Git只是一个版本管理工具，一切版本信息都保存在<code>.git/</code>文件夹里面。如果只需要同步，可以直接使用Dropbox就好了，只要同步了<code>.git/</code>文件夹，你就有了想要的版本信息呀。当然也可以使用GitHub，优势就是能够直接在GitHub网站上看到自己的版本记录啦，从而就构成了可同步的版本管理工具，美其名曰远程仓库，这简直就是两种功能的完美结合，同时依赖于两种需求，工具上却互不耦合。</p>\n<h2 id=\"需求和爱情\"><a href=\"#需求和爱情\" class=\"headerlink\" title=\"需求和爱情\"></a>需求和爱情</h2><p>就像爱上一个人，最开始的时候可能就只是因为她的某一个特点，比如爱笑，刚好满足了你喜欢好看的笑容这样一个需求。可是随着你们在一起之后，你越发疯狂，不可理论无理取闹得提出了各种其他方面的要求，比如来大姨妈了为什么不关心我，比如这么晚了为什么不催我睡觉，比如今天早上为什么忘记跟我说晚安，诸如此类，还要美其名曰我其实只是有那一个“潜在”需求：你是不是还爱我？</p>\n<h2 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h2><p>突然想插入图片，最佳流程应该是，截图自动保存到Dropbox，然后在Dropbox里面分享公开链接，从而建立自己图床外链。</p>\n<p>由于Dropbox被墙，想到两个解决方案：</p>\n<ol>\n<li>曾经看到过相关资料可以设置链接DNS，国内可访问。</li>\n<li>直接使用flicker分享图片，值得一试。</li>\n</ol>\n<p>然后进而觉得GIF动图的效果可能更好，所以就想去尝试和挑选一款GIF录制软件了。</p>\n<h2 id=\"断网\"><a href=\"#断网\" class=\"headerlink\" title=\"断网\"></a>断网</h2><p>像以前有网的时候我是绝对会忍不住诱惑就陷入寻找GIF软件的深渊了，然后一下午就又过去了。</p>\n<p>一款软件是有学习成本的，而寻找最好的软件也是需要花费时间精力的，每每这种时候我都会花费大量时间在寻找和对比各种工具上，由此而忘记了自己要写东西的初衷。</p>\n<p>这种行为就像一个原始人一样，总是希望囤积最多的粮食，总是害怕最好的东西不属于自己。</p>\n<h2 id=\"享受\"><a href=\"#享受\" class=\"headerlink\" title=\"享受\"></a>享受</h2><p>当某件事情过度之后，抽出一定时间去做与之相反的事情是一种享受，就像现在坐在图书馆享受着断网的日子，特别是在尝试过联网却不得结果的时候，辗转之间，尤为轻松。</p>\n<p>又或者是，尝试过那么多之后终于找到最为合适的方式是一种享受，就像现在以最为美好的方式写作，画面简直太沉浸太完美。只关注于写些什么，行文之间就是自己的思考，这就是快乐呀。</p>\n<h2 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h2><p>然后又想到写作的种种方面，在移动端如何写？本来在手机/iPad上写东西就不是一件轻松的事情，因为虚拟键盘的原因根本就无法很好地进行文字输入。</p>\n<p>更好的方式或许是语音输入然后转化为文字，这里需要考虑到环境的影响，比如图书馆你没法说话或者是在嘈杂的地方语音识别不准，当然另外一个因素就是语音识别技术本身的先进性，如果说识别出一大堆错误照样需要人为输入文字修改，那岂不是违背初衷了。</p>\n<p>总之，在移动端是不可能出现能够超越PC端的码字体验，如果并没有这样的环境，那为什么要做多余的事情，试试在手机上做一下word排版？所以说，手机上最好就是快速记录自己的思考内容，如何良好的组织和发散用户思维才是这个产品最重要的核心价值，这里想到的就是思维导图和树形workflowy等等工具，又或者依旧是纯文本+特定标签。</p>\n<h2 id=\"思维组织\"><a href=\"#思维组织\" class=\"headerlink\" title=\"思维组织\"></a>思维组织</h2><p>组织思维的产品应该是怎么样的呢？</p>\n<ul>\n<li>提问式的？九宫格式提出几个方面引发思考？那为什么要限定数量？</li>\n<li>GTD流程式？一定要注重引导用户操作，用户只关心思维思考，最后去做（还是什么）？</li>\n<li>思维导图式？移动端的操作输入依旧很成问题，格式感太重。</li>\n<li>纯文本语法式？书写的时候只需要加入@、#、!、&amp;等等的语法标签，然后组织和生成新的格式？有种编程语言编译器/解释器的感觉了。</li>\n<li>关键词联接式？</li>\n</ul>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>在移动端的思维记录永远都是很简单的内容和结构，最后需要转化为更详细的文字篇幅的时候就在PC端处理吧，所以说记录在移动端，重新加工在PC端。目前只需要在EverMemo里面输入纯文字+语法标签，就可以同步到EverNote里面，然后再PC端就可以人为解释自己所设定的具有特定含义的语法标签。</p>\n<p>同步到EverNote里面之后就能够在sublime里面打开从而写作啦，又回到这样一个完美的写作环境，真是开心，来个颜文字：~(≧▽≦)/~啦啦啦</p>\n<h2 id=\"平衡\"><a href=\"#平衡\" class=\"headerlink\" title=\"平衡\"></a>平衡</h2><p>凡事有好有坏，正反两面不过利弊，尚且每个人都独一无二有自己的看法。我们这个时代无法离开网络，也无法离开社交圈，甚至无法离开游戏，只是在做这些事情的时候如何掌握其中的度：</p>\n<ul>\n<li>如何去平衡网络连接与断开的时间，在不同的时候做不同的事情。</li>\n<li>如何去平衡玩游戏娱乐或发泄或结交朋友和远离游戏删除游戏的时间。</li>\n<li>如何去平衡在什么样状态做什么样的事，一种是偏执，一种是执着。</li>\n</ul>\n<h2 id=\"捷径\"><a href=\"#捷径\" class=\"headerlink\" title=\"捷径\"></a>捷径</h2><p>这真的是本次思维之旅的最后一个话题了，好累好累呀，脑袋要炸了！</p>\n<ul>\n<li>在不同的精神状态下做不同的事情（为啥要在疲惫的时候学习，精力充沛的时候洗衣服？）</li>\n<li>在不同的兴趣爱好下做不同的事情（为啥要忙碌于写文字报告而不是创造理想的完美软件？）</li>\n<li>在不同的目标导向下做不同的事情（为啥要花费大量精力在毕设产品上而不是毕业论文上？）</li>\n<li>在不同的团队群体中做不同的事情（为啥要去做全英文Lead而不专心于写代码技术擅长？）</li>\n</ul>\n<p>=&gt; 防止资源的不必要浪费</p>\n","excerpt":"","more":"<h1 id=\"在图书馆的所思所想\"><a href=\"#在图书馆的所思所想\" class=\"headerlink\" title=\"在图书馆的所思所想\"></a>在图书馆的所思所想</h1><h2 id=\"新感觉\"><a href=\"#新感觉\" class=\"headerlink\" title=\"新感觉\"></a>新感觉</h2><p>其实不出来，不到图书馆走一趟，我还真不知道自己的电脑已经脏成这个样子了，真的是让自己吃惊了一把，而且忍受不了自己迫不及待地清理了一下。</p>\n<p>坐在这里感觉好多了，莫名的轻松感，并且开始有信心去做要做的事情，目前最大的事情就是毕业论文，相信在不同的地方有不同的状态去完成它！</p>\n<h2 id=\"Mac-OS-X\"><a href=\"#Mac-OS-X\" class=\"headerlink\" title=\"Mac OS X\"></a>Mac OS X</h2><p>刚刚保存文件的时候tag系统把我吓尿了，简直就是梦想中的功能，如图所示：</p>\n<p><img src=\"/public/img/idea/OS%20X%20Tag.png\" alt=\"OS X Tag\"></p>\n<p>OS X原生支持为每个文件建立tag的功能，所以纯文本+标签的笔记系统完美建立起来啦，哈哈哈，根本不需要依赖任何一个大型软件，各个功能都解耦成功，都可以切换和选用在该领域做得最好的产品。</p>\n<p>但是需要考虑的一个问题是这些tag能不能同步到其他设备？</p>\n<h2 id=\"产品解耦\"><a href=\"#产品解耦\" class=\"headerlink\" title=\"产品解耦\"></a>产品解耦</h2><p>人类与机器最大的差别就是，羁绊。人作为群体性动物，不同的人之间往往耦合度极高，存在各种各样的关系将人们结合在一起。那这样的东西是不是束缚呢？以后再说，喜忧参半。</p>\n<p>产品作为一种工具，这里讨论的特定于某一种形而上的软件，处于产品之下的代码。借鉴于软件开发的思想，不同模块的代码之间应该进行解耦，不能够互相依赖，那么在生活中使用工具的时候，是不是也应该尽量选取耦合度比较低的产品呢？</p>\n<p>锤子就是锤子，它到底应不应该做成一个手机呢？是注重于小而美的钉钉子功能，还是加入操作系统、打电话、发短信这样全而重的功能呢？这就是一个问题，当你决定依赖于某一特定产品的时候，随着时间的推移，你总是会冒出各种不同的新需求，从而期望这个产品能够刚好开发出这样的功能满足自己。</p>\n<h2 id=\"功能依赖\"><a href=\"#功能依赖\" class=\"headerlink\" title=\"功能依赖\"></a>功能依赖</h2><p>往往理想很丰满，现实很骨感，当你越发依赖它的时候，你就越发觉得它缺胳膊少腿的没有满足你想要的需求，怎么这个同步功能也不可以，这个编辑功能太难用了，诸如此类。</p>\n<p>所以说，最佳的方案就是绝不依赖某一单一产品，因为世上本就没有绝对完美到能够满足你所有需求的东西。最佳的策略就是寻找最本质的东西：我思考的是内容，我写的是文字，存储的就是纯文本。抽取这些文件之后，需要做的可能就是同步呀，加标签呀，树形管理呀，不同样式预览呀，诸如此类。而每一种，都有额外的不同产品来履行其本职工作。</p>\n<p>准确来说，Git只是一个版本管理工具，一切版本信息都保存在<code>.git/</code>文件夹里面。如果只需要同步，可以直接使用Dropbox就好了，只要同步了<code>.git/</code>文件夹，你就有了想要的版本信息呀。当然也可以使用GitHub，优势就是能够直接在GitHub网站上看到自己的版本记录啦，从而就构成了可同步的版本管理工具，美其名曰远程仓库，这简直就是两种功能的完美结合，同时依赖于两种需求，工具上却互不耦合。</p>\n<h2 id=\"需求和爱情\"><a href=\"#需求和爱情\" class=\"headerlink\" title=\"需求和爱情\"></a>需求和爱情</h2><p>就像爱上一个人，最开始的时候可能就只是因为她的某一个特点，比如爱笑，刚好满足了你喜欢好看的笑容这样一个需求。可是随着你们在一起之后，你越发疯狂，不可理论无理取闹得提出了各种其他方面的要求，比如来大姨妈了为什么不关心我，比如这么晚了为什么不催我睡觉，比如今天早上为什么忘记跟我说晚安，诸如此类，还要美其名曰我其实只是有那一个“潜在”需求：你是不是还爱我？</p>\n<h2 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h2><p>突然想插入图片，最佳流程应该是，截图自动保存到Dropbox，然后在Dropbox里面分享公开链接，从而建立自己图床外链。</p>\n<p>由于Dropbox被墙，想到两个解决方案：</p>\n<ol>\n<li>曾经看到过相关资料可以设置链接DNS，国内可访问。</li>\n<li>直接使用flicker分享图片，值得一试。</li>\n</ol>\n<p>然后进而觉得GIF动图的效果可能更好，所以就想去尝试和挑选一款GIF录制软件了。</p>\n<h2 id=\"断网\"><a href=\"#断网\" class=\"headerlink\" title=\"断网\"></a>断网</h2><p>像以前有网的时候我是绝对会忍不住诱惑就陷入寻找GIF软件的深渊了，然后一下午就又过去了。</p>\n<p>一款软件是有学习成本的，而寻找最好的软件也是需要花费时间精力的，每每这种时候我都会花费大量时间在寻找和对比各种工具上，由此而忘记了自己要写东西的初衷。</p>\n<p>这种行为就像一个原始人一样，总是希望囤积最多的粮食，总是害怕最好的东西不属于自己。</p>\n<h2 id=\"享受\"><a href=\"#享受\" class=\"headerlink\" title=\"享受\"></a>享受</h2><p>当某件事情过度之后，抽出一定时间去做与之相反的事情是一种享受，就像现在坐在图书馆享受着断网的日子，特别是在尝试过联网却不得结果的时候，辗转之间，尤为轻松。</p>\n<p>又或者是，尝试过那么多之后终于找到最为合适的方式是一种享受，就像现在以最为美好的方式写作，画面简直太沉浸太完美。只关注于写些什么，行文之间就是自己的思考，这就是快乐呀。</p>\n<h2 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h2><p>然后又想到写作的种种方面，在移动端如何写？本来在手机/iPad上写东西就不是一件轻松的事情，因为虚拟键盘的原因根本就无法很好地进行文字输入。</p>\n<p>更好的方式或许是语音输入然后转化为文字，这里需要考虑到环境的影响，比如图书馆你没法说话或者是在嘈杂的地方语音识别不准，当然另外一个因素就是语音识别技术本身的先进性，如果说识别出一大堆错误照样需要人为输入文字修改，那岂不是违背初衷了。</p>\n<p>总之，在移动端是不可能出现能够超越PC端的码字体验，如果并没有这样的环境，那为什么要做多余的事情，试试在手机上做一下word排版？所以说，手机上最好就是快速记录自己的思考内容，如何良好的组织和发散用户思维才是这个产品最重要的核心价值，这里想到的就是思维导图和树形workflowy等等工具，又或者依旧是纯文本+特定标签。</p>\n<h2 id=\"思维组织\"><a href=\"#思维组织\" class=\"headerlink\" title=\"思维组织\"></a>思维组织</h2><p>组织思维的产品应该是怎么样的呢？</p>\n<ul>\n<li>提问式的？九宫格式提出几个方面引发思考？那为什么要限定数量？</li>\n<li>GTD流程式？一定要注重引导用户操作，用户只关心思维思考，最后去做（还是什么）？</li>\n<li>思维导图式？移动端的操作输入依旧很成问题，格式感太重。</li>\n<li>纯文本语法式？书写的时候只需要加入@、#、!、&amp;等等的语法标签，然后组织和生成新的格式？有种编程语言编译器/解释器的感觉了。</li>\n<li>关键词联接式？</li>\n</ul>\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><p>在移动端的思维记录永远都是很简单的内容和结构，最后需要转化为更详细的文字篇幅的时候就在PC端处理吧，所以说记录在移动端，重新加工在PC端。目前只需要在EverMemo里面输入纯文字+语法标签，就可以同步到EverNote里面，然后再PC端就可以人为解释自己所设定的具有特定含义的语法标签。</p>\n<p>同步到EverNote里面之后就能够在sublime里面打开从而写作啦，又回到这样一个完美的写作环境，真是开心，来个颜文字：~(≧▽≦)/~啦啦啦</p>\n<h2 id=\"平衡\"><a href=\"#平衡\" class=\"headerlink\" title=\"平衡\"></a>平衡</h2><p>凡事有好有坏，正反两面不过利弊，尚且每个人都独一无二有自己的看法。我们这个时代无法离开网络，也无法离开社交圈，甚至无法离开游戏，只是在做这些事情的时候如何掌握其中的度：</p>\n<ul>\n<li>如何去平衡网络连接与断开的时间，在不同的时候做不同的事情。</li>\n<li>如何去平衡玩游戏娱乐或发泄或结交朋友和远离游戏删除游戏的时间。</li>\n<li>如何去平衡在什么样状态做什么样的事，一种是偏执，一种是执着。</li>\n</ul>\n<h2 id=\"捷径\"><a href=\"#捷径\" class=\"headerlink\" title=\"捷径\"></a>捷径</h2><p>这真的是本次思维之旅的最后一个话题了，好累好累呀，脑袋要炸了！</p>\n<ul>\n<li>在不同的精神状态下做不同的事情（为啥要在疲惫的时候学习，精力充沛的时候洗衣服？）</li>\n<li>在不同的兴趣爱好下做不同的事情（为啥要忙碌于写文字报告而不是创造理想的完美软件？）</li>\n<li>在不同的目标导向下做不同的事情（为啥要花费大量精力在毕设产品上而不是毕业论文上？）</li>\n<li>在不同的团队群体中做不同的事情（为啥要去做全英文Lead而不专心于写代码技术擅长？）</li>\n</ul>\n<p>=&gt; 防止资源的不必要浪费</p>\n"},{"layout":"post","title":"「反思我的大学」之科学与技术","keywords":"大学","description":null,"published":1,"_content":"\nthink: 「反思我的大学」之科学与技术\n\n在当初进大学之前选专业的时候，我们就见过了太多的「科学与技术」，像什么计算机科学与技术，电子科学与技术，生命科学与技术等等一大堆。我想讲的就是需要将「科学」与「技术」进行区分，「科学」是指在某一领域探索知識的方法及其研究成果，而「技术」是指人類因應自身需要而發明的處理事務的有效方法和工具。（引自陳政宏教授的定义）\n\n就拿编程来说的话，除了学习编程语言之外需要掌握的知识可能涉及到计算机电路、操作系统、编译原理、计算机网络、数据库、数据结构等等各个方面，而在大学里面的学习其实都是比较注重基础理论这方面的考试的。我们在大学学习之后往往面临一个问题，那就是在学习了那么多课程之后却发现自己无法接手任何一个实际项目。可以说我们在大学里面只是学习了计算机「科学」的基础知识，而计算机「技术」却在与时俱进得飞速发展和改进中国，我们用课本上所学习到的方法和技术去实现某一个功能且不说难度巨大，更可能的情况是早有更好的方法和技术进行了替代。为什么我学了计算机专业，却还是做不出网站、软件、APP呢？这大概就是原因。\n\n但这样就可以说大学教育错了吗？我看未必。社会指责大学教育的原因可能就在于整个社会环境。大学毕业之后我们往往有工作和读研两种选择，现实情况是大学一毕业更多的人都走向了社会，当发现自身与职场存在能力差距的时候大概就会比较痛恨自己的大学四年白学了吧。虽然大学教育过多得去研究了「科学」，而没有去实践其中的「技术」，但是在怪罪大学所教的时候何不反思一下自身所学。对个人而言，大学课堂是只能够教给你相对应的基础知识，但是说到实验室的话你又是否花费足够多的时间去实践过呢？于此同时需要反思的也有很多要读研的小伙伴们，你是真的想去追寻「科学」的脚步吗？还是只想多学点「技术」去适应职场呢？那可能又要让你失望了吧。\n\n其实明白了这一点，我想说大学教育本没有错，之前我一直纳闷为什么欧美也会说他们的大学不好，那可是我们中国社会所认可的好大学呢，呵呵。与此同时，也正因为大学是为了同时培养「科学」人才和「技术」人才的，所以侧重点当然只能是最基本的基础知识。如果你只想快速掌握一门「技术」，出门右转，「山东蓝翔」和「北大青鸟」在等着你哟~\n\n而学习编程的目的是什么呢，我想回归到我的初心，当初的我就是想创造出一些美好的东西，要去做一些更有意义的事情。\n\n下一篇预告《「反思我的大学」之技术与能力》\n","source":"_posts/思考/2014-11-16-think-college-1.md","raw":"---\nlayout: post\ntitle: 「反思我的大学」之科学与技术\ncategory: 思考\ntags: 总结\nkeywords: 大学\ndescription: \npublished: true\n---\n\nthink: 「反思我的大学」之科学与技术\n\n在当初进大学之前选专业的时候，我们就见过了太多的「科学与技术」，像什么计算机科学与技术，电子科学与技术，生命科学与技术等等一大堆。我想讲的就是需要将「科学」与「技术」进行区分，「科学」是指在某一领域探索知識的方法及其研究成果，而「技术」是指人類因應自身需要而發明的處理事務的有效方法和工具。（引自陳政宏教授的定义）\n\n就拿编程来说的话，除了学习编程语言之外需要掌握的知识可能涉及到计算机电路、操作系统、编译原理、计算机网络、数据库、数据结构等等各个方面，而在大学里面的学习其实都是比较注重基础理论这方面的考试的。我们在大学学习之后往往面临一个问题，那就是在学习了那么多课程之后却发现自己无法接手任何一个实际项目。可以说我们在大学里面只是学习了计算机「科学」的基础知识，而计算机「技术」却在与时俱进得飞速发展和改进中国，我们用课本上所学习到的方法和技术去实现某一个功能且不说难度巨大，更可能的情况是早有更好的方法和技术进行了替代。为什么我学了计算机专业，却还是做不出网站、软件、APP呢？这大概就是原因。\n\n但这样就可以说大学教育错了吗？我看未必。社会指责大学教育的原因可能就在于整个社会环境。大学毕业之后我们往往有工作和读研两种选择，现实情况是大学一毕业更多的人都走向了社会，当发现自身与职场存在能力差距的时候大概就会比较痛恨自己的大学四年白学了吧。虽然大学教育过多得去研究了「科学」，而没有去实践其中的「技术」，但是在怪罪大学所教的时候何不反思一下自身所学。对个人而言，大学课堂是只能够教给你相对应的基础知识，但是说到实验室的话你又是否花费足够多的时间去实践过呢？于此同时需要反思的也有很多要读研的小伙伴们，你是真的想去追寻「科学」的脚步吗？还是只想多学点「技术」去适应职场呢？那可能又要让你失望了吧。\n\n其实明白了这一点，我想说大学教育本没有错，之前我一直纳闷为什么欧美也会说他们的大学不好，那可是我们中国社会所认可的好大学呢，呵呵。与此同时，也正因为大学是为了同时培养「科学」人才和「技术」人才的，所以侧重点当然只能是最基本的基础知识。如果你只想快速掌握一门「技术」，出门右转，「山东蓝翔」和「北大青鸟」在等着你哟~\n\n而学习编程的目的是什么呢，我想回归到我的初心，当初的我就是想创造出一些美好的东西，要去做一些更有意义的事情。\n\n下一篇预告《「反思我的大学」之技术与能力》\n","slug":"思考-2014-11-16-think-college-1","date":"2015-05-17T12:58:08.000Z","updated":"2015-05-17T12:58:08.000Z","_id":"civpkemaq000e8t3a5ax0dtwk","comments":1,"photos":[],"link":"","content":"<p>think: 「反思我的大学」之科学与技术</p>\n<p>在当初进大学之前选专业的时候，我们就见过了太多的「科学与技术」，像什么计算机科学与技术，电子科学与技术，生命科学与技术等等一大堆。我想讲的就是需要将「科学」与「技术」进行区分，「科学」是指在某一领域探索知識的方法及其研究成果，而「技术」是指人類因應自身需要而發明的處理事務的有效方法和工具。（引自陳政宏教授的定义）</p>\n<p>就拿编程来说的话，除了学习编程语言之外需要掌握的知识可能涉及到计算机电路、操作系统、编译原理、计算机网络、数据库、数据结构等等各个方面，而在大学里面的学习其实都是比较注重基础理论这方面的考试的。我们在大学学习之后往往面临一个问题，那就是在学习了那么多课程之后却发现自己无法接手任何一个实际项目。可以说我们在大学里面只是学习了计算机「科学」的基础知识，而计算机「技术」却在与时俱进得飞速发展和改进中国，我们用课本上所学习到的方法和技术去实现某一个功能且不说难度巨大，更可能的情况是早有更好的方法和技术进行了替代。为什么我学了计算机专业，却还是做不出网站、软件、APP呢？这大概就是原因。</p>\n<p>但这样就可以说大学教育错了吗？我看未必。社会指责大学教育的原因可能就在于整个社会环境。大学毕业之后我们往往有工作和读研两种选择，现实情况是大学一毕业更多的人都走向了社会，当发现自身与职场存在能力差距的时候大概就会比较痛恨自己的大学四年白学了吧。虽然大学教育过多得去研究了「科学」，而没有去实践其中的「技术」，但是在怪罪大学所教的时候何不反思一下自身所学。对个人而言，大学课堂是只能够教给你相对应的基础知识，但是说到实验室的话你又是否花费足够多的时间去实践过呢？于此同时需要反思的也有很多要读研的小伙伴们，你是真的想去追寻「科学」的脚步吗？还是只想多学点「技术」去适应职场呢？那可能又要让你失望了吧。</p>\n<p>其实明白了这一点，我想说大学教育本没有错，之前我一直纳闷为什么欧美也会说他们的大学不好，那可是我们中国社会所认可的好大学呢，呵呵。与此同时，也正因为大学是为了同时培养「科学」人才和「技术」人才的，所以侧重点当然只能是最基本的基础知识。如果你只想快速掌握一门「技术」，出门右转，「山东蓝翔」和「北大青鸟」在等着你哟~</p>\n<p>而学习编程的目的是什么呢，我想回归到我的初心，当初的我就是想创造出一些美好的东西，要去做一些更有意义的事情。</p>\n<p>下一篇预告《「反思我的大学」之技术与能力》</p>\n","excerpt":"","more":"<p>think: 「反思我的大学」之科学与技术</p>\n<p>在当初进大学之前选专业的时候，我们就见过了太多的「科学与技术」，像什么计算机科学与技术，电子科学与技术，生命科学与技术等等一大堆。我想讲的就是需要将「科学」与「技术」进行区分，「科学」是指在某一领域探索知識的方法及其研究成果，而「技术」是指人類因應自身需要而發明的處理事務的有效方法和工具。（引自陳政宏教授的定义）</p>\n<p>就拿编程来说的话，除了学习编程语言之外需要掌握的知识可能涉及到计算机电路、操作系统、编译原理、计算机网络、数据库、数据结构等等各个方面，而在大学里面的学习其实都是比较注重基础理论这方面的考试的。我们在大学学习之后往往面临一个问题，那就是在学习了那么多课程之后却发现自己无法接手任何一个实际项目。可以说我们在大学里面只是学习了计算机「科学」的基础知识，而计算机「技术」却在与时俱进得飞速发展和改进中国，我们用课本上所学习到的方法和技术去实现某一个功能且不说难度巨大，更可能的情况是早有更好的方法和技术进行了替代。为什么我学了计算机专业，却还是做不出网站、软件、APP呢？这大概就是原因。</p>\n<p>但这样就可以说大学教育错了吗？我看未必。社会指责大学教育的原因可能就在于整个社会环境。大学毕业之后我们往往有工作和读研两种选择，现实情况是大学一毕业更多的人都走向了社会，当发现自身与职场存在能力差距的时候大概就会比较痛恨自己的大学四年白学了吧。虽然大学教育过多得去研究了「科学」，而没有去实践其中的「技术」，但是在怪罪大学所教的时候何不反思一下自身所学。对个人而言，大学课堂是只能够教给你相对应的基础知识，但是说到实验室的话你又是否花费足够多的时间去实践过呢？于此同时需要反思的也有很多要读研的小伙伴们，你是真的想去追寻「科学」的脚步吗？还是只想多学点「技术」去适应职场呢？那可能又要让你失望了吧。</p>\n<p>其实明白了这一点，我想说大学教育本没有错，之前我一直纳闷为什么欧美也会说他们的大学不好，那可是我们中国社会所认可的好大学呢，呵呵。与此同时，也正因为大学是为了同时培养「科学」人才和「技术」人才的，所以侧重点当然只能是最基本的基础知识。如果你只想快速掌握一门「技术」，出门右转，「山东蓝翔」和「北大青鸟」在等着你哟~</p>\n<p>而学习编程的目的是什么呢，我想回归到我的初心，当初的我就是想创造出一些美好的东西，要去做一些更有意义的事情。</p>\n<p>下一篇预告《「反思我的大学」之技术与能力》</p>\n"},{"date":"2015-06-14T13:54:00.000Z","status":"public","title":"。","_content":"\n一直想不通，\n狗狗那么可爱为什么喜欢吃屎呢？\n有些人不是狗为什么偏偏喜欢咬人呢？\n狗咬人，明显看得出是谁欺负谁。\n当然咯，又何必跟可爱的狗狗计较呢？\n未必还要抢它的屎吃呀？\n","source":"_posts/思考/2015-06-14.md","raw":"---\ndate: 2015-06-14 21:54\nstatus: public\ntitle: 。\n---\n\n一直想不通，\n狗狗那么可爱为什么喜欢吃屎呢？\n有些人不是狗为什么偏偏喜欢咬人呢？\n狗咬人，明显看得出是谁欺负谁。\n当然咯，又何必跟可爱的狗狗计较呢？\n未必还要抢它的屎吃呀？\n","slug":"思考-2015-06-14","published":1,"updated":"2015-06-14T14:05:24.000Z","_id":"civpkemaq000f8t3an9ya3fj2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一直想不通，<br>狗狗那么可爱为什么喜欢吃屎呢？<br>有些人不是狗为什么偏偏喜欢咬人呢？<br>狗咬人，明显看得出是谁欺负谁。<br>当然咯，又何必跟可爱的狗狗计较呢？<br>未必还要抢它的屎吃呀？</p>\n","excerpt":"","more":"<p>一直想不通，<br>狗狗那么可爱为什么喜欢吃屎呢？<br>有些人不是狗为什么偏偏喜欢咬人呢？<br>狗咬人，明显看得出是谁欺负谁。<br>当然咯，又何必跟可爱的狗狗计较呢？<br>未必还要抢它的屎吃呀？</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"civpk97md000qtz3ayh2hoj0r","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97mg000utz3aps5h6lng"},{"post_id":"civpk97mi000vtz3arkhad1v3","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97mk000xtz3aesd4h9xz"},{"post_id":"civpk97nn000ztz3au2ehukdc","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97nt0013tz3a3m0ou89g"},{"post_id":"civpk97np0010tz3a826u2gf7","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97nx0015tz3aqh1p4w03"},{"post_id":"civpk97nr0012tz3aiq38elu3","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97o00018tz3akjsy1v7r"},{"post_id":"civpk97nt0014tz3a7ies1cfm","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97o2001btz3a4ecys4gx"},{"post_id":"civpk97ny0016tz3aintjaa5r","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97o7001ftz3al2idenc5"},{"post_id":"civpk97o0001atz3a1yb99lwd","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97o8001htz3aaavfcg8n"},{"post_id":"civpk97o4001dtz3a2xjr49o8","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97oa001ltz3aa50kolib"},{"post_id":"civpk97o8001gtz3awq4gk1cl","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97ob001ptz3a9qq81hlw"},{"post_id":"civpk97oa001mtz3apnb0n17d","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97oh001utz3ao6szslli"},{"post_id":"civpk97ob001qtz3a2gl5dofl","category_id":"civpk97me000rtz3aueitaocz","_id":"civpk97oh001xtz3ao9iq3x2o"},{"post_id":"civpk97oe001ttz3a6cf5eeup","category_id":"civpk97ob001ntz3af0ulwaq9","_id":"civpk97oi001ztz3aeed835od"},{"post_id":"civpk97o9001itz3a3zz54yyf","category_id":"civpk97ob001ntz3af0ulwaq9","_id":"civpk97oi0021tz3ammdivt0q"},{"post_id":"civpk97oy002btz3az6gkt3bq","category_id":"civpk97p3002dtz3az1lbj8o1","_id":"civpk97p5002htz3ax2ot9y1r"},{"post_id":"civpk97p1002ctz3aokhe3wzu","category_id":"civpk97p3002dtz3az1lbj8o1","_id":"civpk97p5002itz3ac2awr3ra"},{"post_id":"civpk97p6002jtz3a5o63bv8m","category_id":"civpk97p3002dtz3az1lbj8o1","_id":"civpk97p8002ltz3a371kwys7"},{"post_id":"civpkemaf00008t3al1j3u0dd","category_id":"civpk97la0002tz3aza9gd11v","_id":"civpkemak00038t3aj4ecx169"},{"post_id":"civpkemah00018t3abl33khm9","category_id":"civpk97la0002tz3aza9gd11v","_id":"civpkemak00058t3agj0f7pf8"},{"post_id":"civpkemal00068t3as3rs942c","category_id":"civpk97la0002tz3aza9gd11v","_id":"civpkemap00098t3a6f29ll8k"},{"post_id":"civpkemam00078t3a9xpdy3lz","category_id":"civpk97la0002tz3aza9gd11v","_id":"civpkemap000b8t3a10kii6hr"},{"post_id":"civpkemaq000e8t3a5ax0dtwk","category_id":"civpk97la0002tz3aza9gd11v","_id":"civpkemar000h8t3awuefzku7"}],"PostTag":[{"post_id":"civpk97md000qtz3ayh2hoj0r","tag_id":"civpk97mf000stz3alqwc5hik","_id":"civpk97mg000ttz3awde7ndgp"},{"post_id":"civpk97mi000vtz3arkhad1v3","tag_id":"civpk97mk000wtz3as6f20iu5","_id":"civpk97ml000ytz3asrxbsk2p"},{"post_id":"civpk97nn000ztz3au2ehukdc","tag_id":"civpk97nr0011tz3a2rf0e7sm","_id":"civpk97o00019tz3aqcun9dj0"},{"post_id":"civpk97ny0016tz3aintjaa5r","tag_id":"civpk97nr0011tz3a2rf0e7sm","_id":"civpk97o3001ctz3atrpioezo"},{"post_id":"civpk97o8001gtz3awq4gk1cl","tag_id":"civpk97nr0011tz3a2rf0e7sm","_id":"civpk97oa001ktz3ayx3ts5cn"},{"post_id":"civpk97np0010tz3a826u2gf7","tag_id":"civpk97nr0011tz3a2rf0e7sm","_id":"civpk97ob001otz3ao94kjsk7"},{"post_id":"civpk97np0010tz3a826u2gf7","tag_id":"civpk97ls000gtz3aah7ecy23","_id":"civpk97oe001stz3aj2wmhqww"},{"post_id":"civpk97np0010tz3a826u2gf7","tag_id":"civpk97o6001etz3awbk5sbq1","_id":"civpk97oh001vtz3a8n7ue491"},{"post_id":"civpk97nr0012tz3aiq38elu3","tag_id":"civpk97nr0011tz3a2rf0e7sm","_id":"civpk97oh001ytz3aq3awi1ng"},{"post_id":"civpk97nt0014tz3a7ies1cfm","tag_id":"civpk97od001rtz3adnd36dvb","_id":"civpk97oi0020tz3aujhxt9c0"},{"post_id":"civpk97o0001atz3a1yb99lwd","tag_id":"civpk97oh001wtz3aob79d7la","_id":"civpk97oi0023tz3ajqyti8ia"},{"post_id":"civpk97o4001dtz3a2xjr49o8","tag_id":"civpk97oi0022tz3af8h1k93o","_id":"civpk97oj0025tz3a9k8sp7p0"},{"post_id":"civpk97o9001itz3a3zz54yyf","tag_id":"civpk97oj0024tz3av6xlk6zq","_id":"civpk97oj0027tz3ajqboktdv"},{"post_id":"civpk97oa001mtz3apnb0n17d","tag_id":"civpk97oj0026tz3ajrt96fh1","_id":"civpk97ok0029tz3aa9mfgi6l"},{"post_id":"civpk97oe001ttz3a6cf5eeup","tag_id":"civpk97oj0024tz3av6xlk6zq","_id":"civpk97ok002atz3afcii0zuo"},{"post_id":"civpk97oy002btz3az6gkt3bq","tag_id":"civpk97o6001etz3awbk5sbq1","_id":"civpk97p4002etz3a23gm5l2p"},{"post_id":"civpk97p1002ctz3aokhe3wzu","tag_id":"civpk97o6001etz3awbk5sbq1","_id":"civpk97p4002ftz3aq34nt0ml"},{"post_id":"civpk97p6002jtz3a5o63bv8m","tag_id":"civpk97o6001etz3awbk5sbq1","_id":"civpk97p7002ktz3a35c6z0i2"},{"post_id":"civpkemaf00008t3al1j3u0dd","tag_id":"civpk97lc0005tz3au0hiheei","_id":"civpkemak00028t3aayq8hh74"},{"post_id":"civpkemah00018t3abl33khm9","tag_id":"civpk97lb0003tz3ao8r1c9ij","_id":"civpkemak00048t3arg6pno8n"},{"post_id":"civpkemal00068t3as3rs942c","tag_id":"civpk97lq000etz3a3z03macj","_id":"civpkeman00088t3a7z7oq9j5"},{"post_id":"civpkemal00068t3as3rs942c","tag_id":"civpk97ls000gtz3aah7ecy23","_id":"civpkemap000a8t3awqosuffu"},{"post_id":"civpkemal00068t3as3rs942c","tag_id":"civpk97lt000htz3awouko02r","_id":"civpkemap000c8t3ant7b5k4o"},{"post_id":"civpkemal00068t3as3rs942c","tag_id":"civpk97lu000itz3aix3y1g0h","_id":"civpkemap000d8t3ady3fxzir"},{"post_id":"civpkemaq000e8t3a5ax0dtwk","tag_id":"civpk97lc0005tz3au0hiheei","_id":"civpkemar000g8t3a2sphsr11"}],"Tag":[{"name":"演讲","_id":"civpk97lb0003tz3ao8r1c9ij"},{"name":"总结","_id":"civpk97lc0005tz3au0hiheei"},{"name":"写作","_id":"civpk97lq000etz3a3z03macj"},{"name":"Sublime","_id":"civpk97ls000gtz3aah7ecy23"},{"name":"Google","_id":"civpk97lt000htz3awouko02r"},{"name":"Evernote","_id":"civpk97lu000itz3aix3y1g0h"},{"name":"Ruby","_id":"civpk97mf000stz3alqwc5hik"},{"name":"Github Jekyll","_id":"civpk97mk000wtz3as6f20iu5"},{"name":"Ubuntu","_id":"civpk97nr0011tz3a2rf0e7sm"},{"name":"Python","_id":"civpk97o6001etz3awbk5sbq1"},{"name":"Jekyll Markdown","_id":"civpk97od001rtz3adnd36dvb"},{"name":"Linux","_id":"civpk97oh001wtz3aob79d7la"},{"name":"翻墙","_id":"civpk97oi0022tz3af8h1k93o"},{"name":"摄影","_id":"civpk97oj0024tz3av6xlk6zq"},{"name":"JavaScript","_id":"civpk97oj0026tz3ajrt96fh1"}]}}